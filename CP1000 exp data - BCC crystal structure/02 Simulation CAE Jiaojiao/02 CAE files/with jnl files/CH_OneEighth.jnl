# -*- coding: mbcs -*-
from abaqus import *
upgradeMdb(
    '//juno/gruppen/Werkstoffmechanik/01 WM MMD/03 Wenqi/01 Project/01 TOOLKIT/10 Simulation-Macro/01 Geometry design/2 CH/CH3-G2-6.14-1.cae'
    , 
    '//juno/gruppen/Werkstoffmechanik/01 WM MMD/03 Wenqi/01 Project/01 TOOLKIT/10 Simulation-Macro/01 Geometry design/2 CH/CH3-G2.cae')
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['CH4'].Part(name='Part-1-failed', objectToCopy=
    mdb.models['CH4'].parts['Part-1'])
mdb.models['CH4'].parts['Part-1-failed'].Unlock(reportWarnings=False)
del mdb.models['CH4'].parts['Part-1']
mdb.models['CH4'].parts.changeKey(fromName='Part-1-failed', toName='Part-1')
mdb.models['CH4'].rootAssembly.regenerate()
#* FeatureError: The assembly is locked and cannot be regenerated.
mdb.models['CH4'].rootAssembly.unlock()
mdb.models['CH4'].rootAssembly.rotate(angle=180.0, axisDirection=(0.0, 2.0, 
    0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('model', ))
del mdb.models['CH4'].rootAssembly.features['Datum csys-1']
mdb.models['CH4'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['CH4'].parts['Part-1'].features['Solid extrude-1'].sketch)
mdb.models['CH4'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['CH4'].sketches['__edit__'], upToFeature=
    mdb.models['CH4'].parts['Part-1'].features['Solid extrude-1'])
del mdb.models['CH4'].sketches['__edit__']
mdb.Model(modelType=STANDARD_EXPLICIT, name='CH2')
mdb.models['CH2'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['CH2'].sketches['__profile__'].rectangle(point1=(37.5, 62.5), 
    point2=(0.0, 0.0))
mdb.models['CH2'].sketches['__profile__'].ObliqueDimension(textPoint=(
    24.569465637207, -14.4755554199219), value=10.0, vertex1=
    mdb.models['CH2'].sketches['__profile__'].vertices[1], vertex2=
    mdb.models['CH2'].sketches['__profile__'].vertices[2])
mdb.models['CH2'].sketches['__profile__'].ObliqueDimension(textPoint=(
    24.2946701049805, 21.5415115356445), value=30.0, vertex1=
    mdb.models['CH2'].sketches['__profile__'].vertices[0], vertex2=
    mdb.models['CH2'].sketches['__profile__'].vertices[1])
mdb.models['CH2'].Part(dimensionality=THREE_D, name='Part-1', type=
    DEFORMABLE_BODY)
mdb.models['CH2'].parts['Part-1'].BaseSolidExtrude(depth=0.75, sketch=
    mdb.models['CH2'].sketches['__profile__'])
del mdb.models['CH2'].sketches['__profile__']
mdb.models['CH2'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['CH2'].parts['Part-1'].features['Solid extrude-1'].sketch)
mdb.models['CH2'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['CH2'].sketches['__edit__'], upToFeature=
    mdb.models['CH2'].parts['Part-1'].features['Solid extrude-1'])
mdb.models['CH2'].sketches['__edit__'].dimensions[1].setValues(value=20)
mdb.models['CH2'].parts['Part-1'].features['Solid extrude-1'].setValues(sketch=
    mdb.models['CH2'].sketches['__edit__'])
del mdb.models['CH2'].sketches['__edit__']
mdb.models['CH2'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['CH2'].parts['Part-1'].features['Solid extrude-1'].sketch)
mdb.models['CH2'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['CH2'].sketches['__edit__'], upToFeature=
    mdb.models['CH2'].parts['Part-1'].features['Solid extrude-1'])
mdb.models['CH2'].sketches['__edit__'].CircleByCenterPerimeter(center=(0.0, 
    0.0), point1=(3.20600509643555, 1.40031623840332))
mdb.models['CH2'].sketches['__edit__'].RadialDimension(curve=
    mdb.models['CH2'].sketches['__edit__'].geometry[6], radius=1.0, textPoint=(
    5.08708953857422, -4.96530151367188))
mdb.models['CH2'].sketches['__edit__'].undo()
mdb.models['CH2'].sketches['__edit__'].FixedConstraint(entity=
    mdb.models['CH2'].sketches['__edit__'].vertices[2])
mdb.models['CH2'].sketches['__edit__'].RadialDimension(curve=
    mdb.models['CH2'].sketches['__edit__'].geometry[6], radius=1.0, textPoint=(
    -5.70147323608398, -1.36734294891357))
mdb.models['CH2'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['CH2'].sketches['__edit__'].geometry[6], point1=(
    0.810993671417236, -0.528387188911438))
mdb.models['CH2'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['CH2'].sketches['__edit__'].geometry[3], point1=(
    0.578336238861084, -0.039563775062561))
mdb.models['CH2'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['CH2'].sketches['__edit__'].geometry[4], point1=(
    0.0664868354797363, 0.449260592460632))
mdb.models['CH2'].parts['Part-1'].features['Solid extrude-1'].setValues(sketch=
    mdb.models['CH2'].sketches['__edit__'])
del mdb.models['CH2'].sketches['__edit__']
mdb.models['CH2'].parts['Part-1'].regenerate()
mdb.models['CH2'].parts['Part-1'].DatumPlaneByOffset(flip=SIDE2, offset=1.0, 
    plane=mdb.models['CH2'].parts['Part-1'].faces[1])
del mdb.models['CH2'].parts['Part-1'].features['Datum plane-1']
mdb.models['CH2'].parts['Part-1'].DatumPlaneByOffset(flip=SIDE2, offset=0.6, 
    plane=mdb.models['CH2'].parts['Part-1'].faces[1])
mdb.models['CH2'].parts['Part-1'].DatumPlaneByOffset(flip=SIDE2, offset=1.2, 
    plane=mdb.models['CH2'].parts['Part-1'].faces[1])
mdb.models['CH2'].parts['Part-1'].DatumPlaneByOffset(flip=SIDE2, offset=1.5, 
    plane=mdb.models['CH2'].parts['Part-1'].faces[1])
mdb.models['CH2'].parts['Part-1'].DatumPlaneByOffset(flip=SIDE2, offset=1.7, 
    plane=mdb.models['CH2'].parts['Part-1'].faces[1])
mdb.models['CH2'].parts['Part-1'].PartitionCellByDatumPlane(cells=
    mdb.models['CH2'].parts['Part-1'].cells.getSequenceFromMask(('[#1 ]', ), ), 
    datumPlane=mdb.models['CH2'].parts['Part-1'].datums[3])
mdb.models['CH2'].parts['Part-1'].PartitionCellByDatumPlane(cells=
    mdb.models['CH2'].parts['Part-1'].cells.getSequenceFromMask(('[#1 ]', ), ), 
    datumPlane=mdb.models['CH2'].parts['Part-1'].datums[4])
mdb.models['CH2'].parts['Part-1'].PartitionCellByDatumPlane(cells=
    mdb.models['CH2'].parts['Part-1'].cells.getSequenceFromMask(('[#2 ]', ), ), 
    datumPlane=mdb.models['CH2'].parts['Part-1'].datums[5])
mdb.models['CH2'].parts['Part-1'].PartitionCellByDatumPlane(cells=
    mdb.models['CH2'].parts['Part-1'].cells.getSequenceFromMask(('[#1 ]', ), ), 
    datumPlane=mdb.models['CH2'].parts['Part-1'].datums[6])
mdb.models['CH2'].parts['Part-1'].Set(cells=
    mdb.models['CH2'].parts['Part-1'].cells.getSequenceFromMask(('[#1f ]', ), )
    , name='Sample')
mdb.models['CH2'].Material(name='DP1000')
mdb.models['CH2'].materials['DP1000'].Elastic(table=((210000.0, 0.3), ))
mdb.models['CH2'].HomogeneousSolidSection(material='DP1000', name='Section-1', 
    thickness=None)
mdb.models['CH2'].parts['Part-1'].SectionAssignment(offset=0.0, offsetField='', 
    offsetType=MIDDLE_SURFACE, region=
    mdb.models['CH2'].parts['Part-1'].sets['Sample'], sectionName='Section-1', 
    thicknessAssignment=FROM_SECTION)
mdb.models['CH2'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['CH2'].rootAssembly.Instance(dependent=ON, name='Part-1-1', part=
    mdb.models['CH2'].parts['Part-1'])
del mdb.models['CH2'].rootAssembly.features['Datum csys-1']
mdb.models['CH2'].rootAssembly.makeIndependent(instances=(
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'], ))
mdb.models['CH2'].rootAssembly.setMeshControls(algorithm=ADVANCING_FRONT, 
    regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#1d ]', ), ), technique=SWEEP)
mdb.models['CH2'].rootAssembly.setSweepPath(edge=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].edges[1], region=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells[0], sense=
    FORWARD)
mdb.models['CH2'].rootAssembly.setSweepPath(edge=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].edges[33], region=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells[2], sense=
    FORWARD)
mdb.models['CH2'].rootAssembly.setSweepPath(edge=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].edges[23], region=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells[3], sense=
    FORWARD)
mdb.models['CH2'].rootAssembly.setSweepPath(edge=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].edges[33], region=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells[4], sense=
    FORWARD)
mdb.models['CH2'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#72000000 #2300 ]', ), ), size=0.1)
mdb.models['CH2'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#0 #400 ]', ), ), size=0.1)
mdb.models['CH2'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#0 #8000 ]', ), ), size=0.1)
mdb.models['CH2'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#100 ]', ), ), size=0.5)
mdb.models['CH2'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#4000 ]', ), ), size=0.1)
mdb.models['CH2'].rootAssembly.seedEdgeByNumber(constraint=FIXED, edges=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#1 ]', ), ), number=3)
mdb.models['CH2'].rootAssembly.generateMesh(regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['CH2'].rootAssembly.generateMesh(regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['CH2'].rootAssembly.generateMesh(regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH2'].rootAssembly.generateMesh(regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['CH2'].rootAssembly.deleteMesh(regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#1d ]', ), ))
mdb.models['CH2'].rootAssembly.setMeshControls(algorithm=MEDIAL_AXIS, regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#1d ]', ), ))
mdb.models['CH2'].rootAssembly.generateMesh(regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['CH2'].rootAssembly.generateMesh(regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#10 ]', ), ), seedConstraintOverride=ON)
mdb.models['CH2'].rootAssembly.generateMesh(regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['CH2'].rootAssembly.generateMesh(regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#14 ]', ), ), seedConstraintOverride=ON)
mdb.models['CH2'].rootAssembly.generateMesh(regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH2'].rootAssembly.generateMesh(regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ), seedConstraintOverride=ON)
mdb.models['CH2'].rootAssembly.generateMesh(regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['CH2'].rootAssembly.deleteMesh(regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#c ]', ), ))
mdb.models['CH2'].rootAssembly.setMeshControls(algorithm=ADVANCING_FRONT, 
    regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#d ]', ), ))
mdb.models['CH2'].rootAssembly.generateMesh(regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['CH2'].rootAssembly.generateMesh(regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH2'].rootAssembly.generateMesh(regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['CH2'].rootAssembly.deleteMesh(regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#9 ]', ), ))
mdb.models['CH2'].rootAssembly.seedEdgeBySize(deviationFactor=0.1, edges=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#100 ]', ), ), size=1.0)
mdb.models['CH2'].rootAssembly.generateMesh(regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH2'].rootAssembly.generateMesh(regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['CH2'].parts['Part-1'].features['Datum plane-4'].setValues(offset=
    2.0)
mdb.models['CH2'].parts['Part-1'].regenerate()
mdb.models['CH2'].parts['Part-1'].regenerate()
mdb.models['CH2'].parts['Part-1'].regenerate()
mdb.models['CH2'].rootAssembly.regenerate()
mdb.models['CH2'].rootAssembly.generateMesh(regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['CH2'].rootAssembly.generateMesh(regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['CH2'].rootAssembly.seedEdgeBySize(deviationFactor=0.1, edges=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#40 ]', ), ), size=1.0)
mdb.models['CH2'].rootAssembly.seedEdgeBySize(deviationFactor=0.1, edges=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#200000 ]', ), ), size=1.0)
mdb.models['CH2'].rootAssembly.generateMesh(regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['CH2'].rootAssembly.deleteMesh(regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['CH2'].rootAssembly.seedEdgeBySize(deviationFactor=0.1, edges=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#200 ]', ), ), size=0.2)
mdb.models['CH2'].rootAssembly.deleteMesh(regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#a ]', ), ))
mdb.models['CH2'].rootAssembly.seedEdgeBySize(deviationFactor=0.1, edges=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#100 ]', ), ), size=0.5)
mdb.models['CH2'].rootAssembly.DatumPlaneByOffset(flip=SIDE2, offset=2.5, 
    plane=mdb.models['CH2'].rootAssembly.instances['Part-1-1'].faces[21])
mdb.models['CH2'].parts['Part-1'].regenerate()
mdb.models['CH2'].parts['Part-1'].regenerate()
mdb.models['CH2'].parts['Part-1'].DatumPlaneByOffset(flip=SIDE2, offset=3.0, 
    plane=mdb.models['CH2'].parts['Part-1'].faces[21])
mdb.models['CH2'].parts['Part-1'].PartitionCellByDatumPlane(cells=
    mdb.models['CH2'].parts['Part-1'].cells.getSequenceFromMask(('[#2 ]', ), ), 
    datumPlane=mdb.models['CH2'].parts['Part-1'].datums[12])
mdb.models['CH2'].rootAssembly.regenerate()
mdb.models['CH2'].rootAssembly.setMeshControls(algorithm=ADVANCING_FRONT, 
    regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ), technique=SWEEP)
mdb.models['CH2'].rootAssembly.setSweepPath(edge=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].edges[13], region=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells[2], sense=
    FORWARD)
mdb.models['CH2'].rootAssembly.seedEdgeBySize(deviationFactor=0.1, edges=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#8 ]', ), ), size=1.0)
mdb.models['CH2'].rootAssembly.seedEdgeByNumber(edges=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#1000 ]', ), ), number=3)
mdb.models['CH2'].rootAssembly.generateMesh(regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['CH2'].rootAssembly.generateMesh(regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['CH2'].rootAssembly.generateMesh(regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['CH2'].rootAssembly.deleteMesh(regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['CH2'].rootAssembly.setSeedConstraints(constraint=FIXED, edges=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH2'].rootAssembly.generateMesh(regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['CH2'].rootAssembly.generateMesh(regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
del mdb.models['CH2'].rootAssembly.features['Datum plane-1']
mdb.models['CH2'].rootAssembly.Set(name='Disp', nodes=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].nodes.getSequenceFromMask(
    mask=('[#0:418 #9f8024 #300 #f0000c00 #3fff #21c40 #0:8', ' #3f800010 ]', 
    ), ))
mdb.models['CH2'].rootAssembly.Set(name='Force', nodes=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].nodes.getSequenceFromMask(
    mask=('[#0:418 #9f8024 #300 #f0000c00 #3fff #21c40 #0:8', ' #3f800010 ]', 
    ), ))
mdb.models['CH2'].rootAssembly.Set(name='y_symm', nodes=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].nodes.getSequenceFromMask(
    mask=('[#350 #0:5 #fffe0000 #ffffffff:2 #1fff87ff #fffffffe #ffffffff', 
    ' #7ffffff #0:50 #ffffffff:19 #3fffff ]', ), ))
mdb.models['CH2'].rootAssembly.Set(name='x_symm', nodes=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].nodes.getSequenceFromMask(
    mask=('[#0:214 #3f8 #3a000800 #0:3 #ff808000 #1f #0:144', 
    ' #c0000000 #1f #0:2 #8000000 #0 #c0000000 #3f80', 
    ' #846 #fc00 #0:27 #3ffc0 #80000 #f00000 #0', 
    ' #40000000 #0:6 #68000000 #c60000 #7000c #0 #3ff80000', 
    ' #0 #fc000000 #fffffff #30000 #d80 #16000000 #7fc78', ' #0:6 #40000000 ]', 
    ), ))
mdb.models['CH2'].rootAssembly.Set(name='z_symm', nodes=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].nodes.getSequenceFromMask(
    mask=('[#fffffc73 #ffffffff:2 #f #0:2 #fffff000 #ffffffff:2 #7fff', 
    ' #0:22 #ffc00000 #ffffffff:13 #ffffff #0:168 #e2000000 #ffffffff:3', 
    ' #ffff #0:2 #ffffff80 #ffffffff:15 #3ffffff #0:127 #ffffffe0', 
    ' #ffffffff #fffffe3f #7ffffff #0 #fffff800 #0 #900', 
    ' #0:27 #80000000 #3f #fff7fbe0 #ff600001 #7ff011 #c0000000', 
    ' #1f #0:5 #30000000 #c1f83000 #3bd3 #7f81 #c0000000', 
    ' #ff607fdb #fc0000ff #3ff #fffcbfe0 #3fc0a7f #e1fe0000 #7', 
    ' #0:4 #fffffff8 #ffffffff #7fffef ]', ), ))
mdb.models['CH2'].rootAssembly.deleteSets(setNames=('z_symm', 'x_symm', 
    'y_symm'))
mdb.models['CH2'].rootAssembly.Set(faces=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    ('[#10014050 ]', ), ), name='x_symm')
mdb.models['CH2'].rootAssembly.Set(faces=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    ('[#80822088 ]', ), ), name='z_symm')
mdb.models['CH2'].rootAssembly.Set(faces=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    ('[#4000000 ]', ), ), name='y_symm')
mdb.models['CH2'].XsymmBC(createStepName='Initial', localCsys=None, name=
    'xsymm', region=mdb.models['CH2'].rootAssembly.sets['x_symm'])
mdb.models['CH2'].YsymmBC(createStepName='Initial', localCsys=None, name=
    'ysymm', region=mdb.models['CH2'].rootAssembly.sets['y_symm'])
mdb.models['CH2'].ZsymmBC(createStepName='Initial', localCsys=None, name=
    'zsymm', region=mdb.models['CH2'].rootAssembly.sets['z_symm'])
mdb.models['CH2'].ExplicitDynamicsStep(name='Move', previous='Initial', 
    timePeriod=0.01)
mdb.models['CH2'].TabularAmplitude(data=((0.0, 0.0), (0.01, 1.0)), name='Amp-1'
    , smooth=SOLVER_DEFAULT, timeSpan=STEP)
mdb.models['CH2'].DisplacementBC(amplitude='Amp-1', createStepName='Move', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'Move', region=mdb.models['CH2'].rootAssembly.sets['Disp'], u1=UNSET, u2=
    0.5, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
del mdb.jobs['CH4']
del mdb.jobs['CH6']
del mdb.jobs['CH8']
del mdb.jobs['CH12']
mdb.models['CH2'].materials['DP1000'].Density(table=((7.89e-09, ), ))
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='CH2', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='CH2', nodalOutputPrecision=SINGLE, 
    numCpus=1, numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['CH2'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['CH2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'Dagobert', 'handle': 0, 'jobName': 'CH2'})
mdb.jobs['CH2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '27 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'CH2'})
mdb.jobs['CH2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE OPTION *BOUNDARY,TYPE=DISPLACEMENT HAS BEEN USED; CHECK STATUS FILE BETWEEN STEPS FOR WARNINGS ON ANY JUMPS PRESCRIBED ACROSS THE STEPS IN DISPLACEMENT VALUES OF TRANSLATIONAL DOF. FOR ROTATIONAL DOF MAKE SURE THAT THERE ARE NO SUCH JUMPS. ALL JUMPS IN DISPLACEMENTS ACROSS STEPS ARE IGNORED', 
    'jobName': 'CH2'})
mdb.jobs['CH2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'CH2'})
mdb.jobs['CH2']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'Dagobert', 'handle': 14700, 'jobName': 'CH2'})
mdb.jobs['CH2']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 2 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'CH2'})
mdb.jobs['CH2']._Message(COMPLETED, {'phase': PACKAGER_PHASE, 
    'message': 'Phase complete', 'jobName': 'CH2'})
mdb.jobs['CH2']._Message(STARTED, {'phase': EXPLICIT_PHASE, 
    'clientHost': 'Dagobert', 'handle': 13720, 'jobName': 'CH2'})
mdb.jobs['CH2']._Message(STATUS, {'totalTime': 0.0, 
    'stableTimeIncrement': 4.83129314332587e-09, 'stepTime': 0.0, 
    'totalEnergy': 3.69843728549313e-05, 'cpuTime': 0.100000001490116, 
    'jobName': 'CH2', 'step': 1, 'increment': 0, 'phase': EXPLICIT_PHASE, 
    'kineticEnergy': 3.69843728549313e-05})
mdb.jobs['CH2']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'CH2'})
mdb.jobs['CH2']._Message(COMPLETED, {'phase': EXPLICIT_PHASE, 
    'message': 'Phase complete', 'jobName': 'CH2'})
mdb.jobs['CH2']._Message(JOB_COMPLETED, {'time': 'Mon Jan 21 20:00:19 2019', 
    'jobName': 'CH2'})
# Save by wliu on 2019_01_21-20.01.52; build 2017 2016_09_27-23.54.59 126836
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['CH4']
del mdb.models['CH6']
del mdb.models['CH8']
del mdb.models['CH12']
mdb.Model(name='CH4', objectToCopy=mdb.models['CH2'])
mdb.models['CH4'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['CH4'].parts['Part-1'].features['Solid extrude-1'].sketch)
mdb.models['CH4'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['CH4'].sketches['__edit__'], upToFeature=
    mdb.models['CH4'].parts['Part-1'].features['Solid extrude-1'])
mdb.models['CH4'].sketches['__edit__'].RadialDimension(curve=
    mdb.models['CH4'].sketches['__edit__'].geometry[7], radius=2.0, textPoint=(
    -3.67407131195068, 0.254638433456421))
mdb.models['CH4'].parts['Part-1'].features['Solid extrude-1'].setValues(sketch=
    mdb.models['CH4'].sketches['__edit__'])
del mdb.models['CH4'].sketches['__edit__']
mdb.models['CH4'].parts['Part-1'].regenerate()
#* FeatureError: Regeneration failed
mdb.models['CH4'].parts['Part-1'].backup()
mdb.models['CH4'].parts['Part-1'].deleteFeatures(('Datum plane-1', 
    'Partition cell-1'))
mdb.models['CH4'].parts['Part-1'].deleteFeatures(('Datum plane-3', 
    'Partition cell-3'))
#* FeatureError: Regeneration failed
del mdb.models['CH4'].parts['Part-1'].features['Partition cell-5']
mdb.models['CH4'].parts['Part-1'].features['Datum plane-4'].setValues(offset=
    2.2)
mdb.models['CH4'].parts['Part-1'].regenerate()
mdb.models['CH4'].parts['Part-1'].regenerate()
mdb.models['CH4'].parts['Part-1'].regenerate()
mdb.models['CH4'].parts['Part-1'].regenerate()
mdb.models['CH4'].parts['Part-1'].DatumPlaneByOffset(flip=SIDE2, offset=3.6, 
    plane=mdb.models['CH4'].parts['Part-1'].faces[11])
mdb.models['CH4'].parts['Part-1'].PartitionCellByDatumPlane(cells=
    mdb.models['CH4'].parts['Part-1'].cells.getSequenceFromMask(('[#2 ]', ), ), 
    datumPlane=mdb.models['CH4'].parts['Part-1'].datums[12])
mdb.models['CH4'].parts['Part-1'].PartitionCellByDatumPlane(cells=
    mdb.models['CH4'].parts['Part-1'].cells.getSequenceFromMask(('[#1 ]', ), ), 
    datumPlane=mdb.models['CH4'].parts['Part-1'].datums[14])
mdb.models['CH4'].parts['Part-1'].Set(cells=
    mdb.models['CH4'].parts['Part-1'].cells.getSequenceFromMask(('[#1f ]', ), )
    , name='Sample')
mdb.models['CH4'].parts['Part-1'].Set(cells=
    mdb.models['CH4'].parts['Part-1'].cells.getSequenceFromMask(('[#1f ]', ), )
    , name='Sample')
mdb.models['CH4'].rootAssembly.regenerate()
mdb.models['CH4'].rootAssembly.makeDependent(instances=(
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'], ))
mdb.models['CH4'].rootAssembly.makeIndependent(instances=(
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'], ))
mdb.models['CH4'].rootAssembly.setMeshControls(algorithm=ADVANCING_FRONT, 
    regions=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#1d ]', ), ), technique=SWEEP)
mdb.models['CH4'].rootAssembly.setSweepPath(edge=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].edges[1], region=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].cells[0], sense=
    REVERSE)
mdb.models['CH4'].rootAssembly.setSweepPath(edge=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].edges[33], region=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].cells[2], sense=
    REVERSE)
mdb.models['CH4'].rootAssembly.setSweepPath(edge=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].edges[24], region=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].cells[3], sense=
    FORWARD)
mdb.models['CH4'].rootAssembly.setSweepPath(edge=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].edges[32], region=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].cells[4], sense=
    FORWARD)
mdb.models['CH4'].rootAssembly.setMeshControls(algorithm=MEDIAL_AXIS, regions=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['CH4'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#0 #7c ]', ), ), size=0.1)
mdb.models['CH4'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#0 #800 ]', ), ), size=0.1)
mdb.models['CH4'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#1000000 ]', ), ), size=0.1)
mdb.models['CH4'].rootAssembly.seedEdgeByNumber(constraint=FIXED, edges=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#4 ]', ), ), number=3)
mdb.models['CH4'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#80000 ]', ), ), size=0.1)
mdb.models['CH4'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#8000 ]', ), ), size=1.0)
mdb.models['CH4'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#400 ]', ), ), size=1.0)
mdb.models['CH4'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#80000000 ]', ), ), size=0.2)
mdb.models['CH4'].rootAssembly.seedEdgeByNumber(constraint=FIXED, edges=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#100000 ]', ), ), number=3)
mdb.models['CH4'].rootAssembly.generateMesh(regions=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['CH4'].rootAssembly.generateMesh(regions=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#10 ]', ), ), seedConstraintOverride=ON)
mdb.models['CH4'].rootAssembly.generateMesh(regions=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['CH4'].rootAssembly.generateMesh(regions=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH4'].rootAssembly.generateMesh(regions=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['CH4'].rootAssembly.generateMesh(regions=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['CH4'].rootAssembly.deleteMesh(regions=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['CH4'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#800 ]', ), ), size=1.0)
mdb.models['CH4'].rootAssembly.seedEdgeByNumber(constraint=FIXED, edges=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#20000 ]', ), ), number=3)
mdb.models['CH4'].rootAssembly.generateMesh(regions=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['CH4'].rootAssembly.deleteMesh(regions=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['CH4'].rootAssembly.seedEdgeByNumber(constraint=FIXED, edges=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#1000 ]', ), ), number=2)
mdb.models['CH4'].rootAssembly.generateMesh(regions=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['CH4'].rootAssembly.deleteMesh(regions=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['CH4'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#200000 ]', ), ), size=1.0)
mdb.models['CH4'].rootAssembly.generateMesh(regions=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['CH4'].rootAssembly.Set(name='Disp', nodes=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].nodes.getSequenceFromMask(
    mask=('[#0:692 #c0000000 #8808bfff #40028 #0:5 #800000 #8884244', 
    ' #10420091 #20180000 #110204 ]', ), ))
mdb.models['CH4'].rootAssembly.Set(name='Force', nodes=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].nodes.getSequenceFromMask(
    mask=('[#0:692 #c0000000 #8808bfff #40028 #0:5 #800000 #8884244', 
    ' #10420091 #20180000 #110204 ]', ), ))
mdb.models['CH4'].rootAssembly.Set(faces=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    ('[#800a02 ]', ), ), name='x_symm')
mdb.models['CH4'].rootAssembly.Set(faces=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    ('[#200000 ]', ), ), name='y_symm')
mdb.models['CH4'].rootAssembly.Set(faces=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    ('[#4041104 ]', ), ), name='z_symm')
mdb.models['CH4'].rootAssembly.Set(elements=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].elements.getSequenceFromMask(
    mask=('[#0:251 #80000000 ]', ), ), name='CrE')
mdb.models['CH2'].rootAssembly.Set(elements=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].elements.getSequenceFromMask(
    mask=('[#0:17 #2 ]', ), ), name='CrE')
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='CH4', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='CH4', nodalOutputPrecision=SINGLE, 
    numCpus=1, numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.Model(name='CH6', objectToCopy=mdb.models['CH4'])
mdb.models['CH6'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['CH6'].parts['Part-1'].features['Solid extrude-1'].sketch)
mdb.models['CH6'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['CH6'].sketches['__edit__'], upToFeature=
    mdb.models['CH6'].parts['Part-1'].features['Solid extrude-1'])
mdb.models['CH6'].sketches['__edit__'].dimensions[3].setValues(value=3)
mdb.models['CH6'].parts['Part-1'].features['Solid extrude-1'].setValues(sketch=
    mdb.models['CH6'].sketches['__edit__'])
del mdb.models['CH6'].sketches['__edit__']
mdb.models['CH6'].parts['Part-1'].regenerate()
mdb.models['CH6'].parts['Part-1'].features['Datum plane-5'].setValues(offset=
    3.2)
mdb.models['CH6'].parts['Part-1'].regenerate()
mdb.models['CH6'].parts['Part-1'].regenerate()
mdb.models['CH6'].parts['Part-1'].features['Datum plane-1'].setValues(offset=
    3.8)
mdb.models['CH6'].parts['Part-1'].regenerate()
mdb.models['CH6'].parts['Part-1'].regenerate()
mdb.models['CH6'].parts['Part-1'].features['Datum plane-2'].setValues(offset=
    4.4)
mdb.models['CH6'].parts['Part-1'].regenerate()
#* FeatureError: Regeneration failed
mdb.models['CH6'].parts['Part-1'].regenerate()
mdb.models['CH6'].parts['Part-1'].deleteFeatures(('Partition cell-4', 
    'Partition cell-1', 'Partition cell-3'))
mdb.models['CH6'].parts['Part-1'].PartitionCellByDatumPlane(cells=
    mdb.models['CH6'].parts['Part-1'].cells.getSequenceFromMask(('[#2 ]', ), ), 
    datumPlane=mdb.models['CH6'].parts['Part-1'].datums[6])
mdb.models['CH6'].parts['Part-1'].PartitionCellByDatumPlane(cells=
    mdb.models['CH6'].parts['Part-1'].cells.getSequenceFromMask(('[#1 ]', ), ), 
    datumPlane=mdb.models['CH6'].parts['Part-1'].datums[12])
mdb.models['CH6'].parts['Part-1'].PartitionCellByDatumPlane(cells=
    mdb.models['CH6'].parts['Part-1'].cells.getSequenceFromMask(('[#1 ]', ), ), 
    datumPlane=mdb.models['CH6'].parts['Part-1'].datums[14])
mdb.models['CH6'].parts['Part-1'].PartitionCellByDatumPlane(cells=
    mdb.models['CH6'].parts['Part-1'].cells.getSequenceFromMask(('[#1 ]', ), ), 
    datumPlane=mdb.models['CH6'].parts['Part-1'].datums[4])
#* Feature creation failed.
mdb.models['CH6'].parts['Part-1'].Set(cells=
    mdb.models['CH6'].parts['Part-1'].cells.getSequenceFromMask(('[#1f ]', ), )
    , name='Sample')
mdb.models['CH6'].rootAssembly.regenerate()
mdb.models['CH6'].rootAssembly.makeDependent(instances=(
    mdb.models['CH6'].rootAssembly.instances['Part-1-1'], ))
mdb.models['CH6'].rootAssembly.makeIndependent(instances=(
    mdb.models['CH6'].rootAssembly.instances['Part-1-1'], ))
mdb.models['CH6'].rootAssembly.setMeshControls(algorithm=ADVANCING_FRONT, 
    regions=
    mdb.models['CH6'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#17 ]', ), ), technique=SWEEP)
mdb.models['CH6'].rootAssembly.setSweepPath(edge=
    mdb.models['CH6'].rootAssembly.instances['Part-1-1'].edges[3], region=
    mdb.models['CH6'].rootAssembly.instances['Part-1-1'].cells[0], sense=
    FORWARD)
mdb.models['CH6'].rootAssembly.setSweepPath(edge=
    mdb.models['CH6'].rootAssembly.instances['Part-1-1'].edges[15], region=
    mdb.models['CH6'].rootAssembly.instances['Part-1-1'].cells[1], sense=
    FORWARD)
mdb.models['CH6'].rootAssembly.setSweepPath(edge=
    mdb.models['CH6'].rootAssembly.instances['Part-1-1'].edges[26], region=
    mdb.models['CH6'].rootAssembly.instances['Part-1-1'].cells[2], sense=
    REVERSE)
mdb.models['CH6'].rootAssembly.setSweepPath(edge=
    mdb.models['CH6'].rootAssembly.instances['Part-1-1'].edges[17], region=
    mdb.models['CH6'].rootAssembly.instances['Part-1-1'].cells[4], sense=
    FORWARD)
mdb.models['CH6'].rootAssembly.setMeshControls(algorithm=MEDIAL_AXIS, regions=
    mdb.models['CH6'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['CH6'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH6'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#e1c7c000 #e ]', ), ), size=0.1)
mdb.models['CH6'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH6'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#2 ]', ), ), size=1.0)
mdb.models['CH6'].rootAssembly.seedEdgeByNumber(constraint=FIXED, edges=
    mdb.models['CH6'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#800 ]', ), ), number=3)
mdb.models['CH6'].rootAssembly.seedEdgeByNumber(constraint=FIXED, edges=
    mdb.models['CH6'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#0 #10 ]', ), ), number=3)
mdb.models['CH6'].rootAssembly.seedEdgeByNumber(constraint=FIXED, edges=
    mdb.models['CH6'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#10 ]', ), ), number=2)
mdb.models['CH6'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH6'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#20 #14080 ]', ), ), size=1.0)
mdb.models['CH6'].rootAssembly.seedEdgeByNumber(constraint=FIXED, edges=
    mdb.models['CH6'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#0 #40 ]', ), ), number=3)
mdb.models['CH6'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH6'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#0 #200 ]', ), ), size=1.0)
mdb.models['CH6'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH6'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#0 #20 ]', ), ), size=1.0)
mdb.models['CH6'].rootAssembly.generateMesh(regions=
    mdb.models['CH6'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['CH6'].rootAssembly.generateMesh(regions=
    mdb.models['CH6'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#10 ]', ), ), seedConstraintOverride=ON)
mdb.models['CH6'].rootAssembly.generateMesh(regions=
    mdb.models['CH6'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['CH6'].rootAssembly.generateMesh(regions=
    mdb.models['CH6'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['CH6'].rootAssembly.generateMesh(regions=
    mdb.models['CH6'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['CH6'].rootAssembly.generateMesh(regions=
    mdb.models['CH6'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH6'].rootAssembly.deleteMesh(regions=
    mdb.models['CH6'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['CH6'].rootAssembly.setMeshControls(algorithm=ADVANCING_FRONT, 
    regions=
    mdb.models['CH6'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['CH6'].rootAssembly.generateMesh(regions=
    mdb.models['CH6'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['CH6'].rootAssembly.generateMesh(regions=
    mdb.models['CH6'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['CH6'].rootAssembly.Set(elements=
    mdb.models['CH6'].rootAssembly.instances['Part-1-1'].elements.getSequenceFromMask(
    mask=('[#0:524 #800 ]', ), ), name='CrE')
mdb.models['CH6'].rootAssembly.Set(name='Disp', nodes=
    mdb.models['CH6'].rootAssembly.instances['Part-1-1'].nodes.getSequenceFromMask(
    mask=('[#0:118 #40000101 #3e0010 #10009 #c0010 #ff3ff8 #40031', 
    ' #0:3 #30 #28000000 #10000800 ]', ), ))
mdb.models['CH6'].rootAssembly.Set(name='Force', nodes=
    mdb.models['CH6'].rootAssembly.instances['Part-1-1'].nodes.getSequenceFromMask(
    mask=('[#0:118 #40000101 #3e0010 #10009 #c0010 #ff3ff8 #40031', 
    ' #0:3 #30 #28000000 #10000800 ]', ), ))
mdb.models['CH6'].rootAssembly.Set(faces=
    mdb.models['CH6'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    ('[#880104 ]', ), ), name='x_symm')
mdb.models['CH6'].rootAssembly.Set(faces=
    mdb.models['CH6'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    ('[#4040890 ]', ), ), name='z_symm')
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='CH6', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='CH6', nodalOutputPrecision=SINGLE, 
    numCpus=1, numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.Model(name='CH8', objectToCopy=mdb.models['CH6'])
mdb.models['CH8'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['CH8'].parts['Part-1'].features['Solid extrude-1'].sketch)
mdb.models['CH8'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['CH8'].sketches['__edit__'], upToFeature=
    mdb.models['CH8'].parts['Part-1'].features['Solid extrude-1'])
mdb.models['CH8'].sketches['__edit__'].dimensions[3].setValues(value=4)
mdb.models['CH8'].parts['Part-1'].features['Solid extrude-1'].setValues(sketch=
    mdb.models['CH8'].sketches['__edit__'])
del mdb.models['CH8'].sketches['__edit__']
mdb.models['CH8'].parts['Part-1'].regenerate()
mdb.models['CH8'].parts['Part-1'].features['Datum plane-1'].setValues(offset=
    5.0)
mdb.models['CH8'].parts['Part-1'].regenerate()
#* FeatureError: Regeneration failed
mdb.models['CH8'].parts['Part-1'].regenerate()
del mdb.models['CH8'].parts['Part-1'].features['Partition cell-4']
mdb.models['CH8'].parts['Part-1'].PartitionCellByDatumPlane(cells=
    mdb.models['CH8'].parts['Part-1'].cells.getSequenceFromMask(('[#4 ]', ), ), 
    datumPlane=mdb.models['CH8'].parts['Part-1'].datums[14])
mdb.models['CH8'].parts['Part-1'].DatumPlaneByOffset(flip=SIDE2, offset=5.6, 
    plane=mdb.models['CH8'].parts['Part-1'].faces[21])
mdb.models['CH8'].parts['Part-1'].PartitionCellByDatumPlane(cells=
    mdb.models['CH8'].parts['Part-1'].cells.getSequenceFromMask(('[#8 ]', ), ), 
    datumPlane=mdb.models['CH8'].parts['Part-1'].datums[24])
mdb.models['CH8'].parts['Part-1'].Set(cells=
    mdb.models['CH8'].parts['Part-1'].cells.getSequenceFromMask(('[#3f ]', ), )
    , name='Sample')
mdb.models['CH8'].rootAssembly.regenerate()
mdb.models['CH8'].rootAssembly.makeDependent(instances=(
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'], ))
mdb.models['CH8'].rootAssembly.makeIndependent(instances=(
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'], ))
mdb.models['CH8'].rootAssembly.setMeshControls(algorithm=ADVANCING_FRONT, 
    regions=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#3e ]', ), ), technique=SWEEP)
mdb.models['CH8'].rootAssembly.setSweepPath(edge=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].edges[23], region=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].cells[1], sense=
    FORWARD)
mdb.models['CH8'].rootAssembly.setSweepPath(edge=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].edges[49], region=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].cells[2], sense=
    REVERSE)
mdb.models['CH8'].rootAssembly.setSweepPath(edge=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].edges[27], region=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].cells[3], sense=
    FORWARD)
mdb.models['CH8'].rootAssembly.setSweepPath(edge=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].edges[1], region=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].cells[4], sense=
    REVERSE)
mdb.models['CH8'].rootAssembly.setSweepPath(edge=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].edges[39], region=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].cells[5], sense=
    FORWARD)
mdb.models['CH8'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#1c000000 #5dcd4 ]', ), ), size=0.1)
mdb.models['CH8'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#20000000 ]', ), ), size=0.2)
mdb.models['CH8'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#100 ]', ), ), size=1.0)
mdb.models['CH8'].rootAssembly.seedEdgeByNumber(constraint=FIXED, edges=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#4 ]', ), ), number=3)
mdb.models['CH8'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#210042 ]', ), ), size=1.0)
mdb.models['CH8'].rootAssembly.seedEdgeByNumber(constraint=FIXED, edges=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#80000000 ]', ), ), number=3)
mdb.models['CH8'].rootAssembly.seedEdgeByNumber(constraint=FIXED, edges=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#400000 ]', ), ), number=3)
mdb.models['CH8'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#800 ]', ), ), size=1.0)
mdb.models['CH8'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#10 ]', ), ), size=1.0)
mdb.models['CH8'].rootAssembly.generateMesh(regions=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#20 ]', ), ))
mdb.models['CH8'].rootAssembly.generateMesh(regions=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH8'].rootAssembly.generateMesh(regions=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#28 ]', ), ), seedConstraintOverride=ON)
mdb.models['CH8'].rootAssembly.generateMesh(regions=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['CH8'].rootAssembly.generateMesh(regions=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['CH8'].rootAssembly.generateMesh(regions=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['CH8'].rootAssembly.generateMesh(regions=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['CH8'].rootAssembly.deleteMesh(regions=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['CH8'].rootAssembly.seedEdgeByNumber(constraint=FIXED, edges=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#200 ]', ), ), number=2)
mdb.models['CH8'].rootAssembly.generateMesh(regions=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['CH8'].rootAssembly.deleteMesh(regions=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#20 ]', ), ))
mdb.models['CH8'].rootAssembly.setMeshControls(algorithm=MEDIAL_AXIS, regions=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#20 ]', ), ))
mdb.meshEditOptions.setValues(enableUndo=True, maxUndoCacheElements=0.5)
mdb.models['CH8'].rootAssembly.generateMesh(regions=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#20 ]', ), ))
mdb.models['CH8'].rootAssembly.generateMesh(regions=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#20 ]', ), ), seedConstraintOverride=ON)
mdb.models['CH8'].rootAssembly.generateMesh(regions=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH8'].rootAssembly.generateMesh(regions=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), seedConstraintOverride=ON)
mdb.models['CH8'].rootAssembly.deleteMesh(regions=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['CH8'].rootAssembly.setSeedConstraints(constraint=FINER, edges=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#80000000 ]', ), ))
mdb.models['CH8'].rootAssembly.generateMesh(regions=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['CH8'].rootAssembly.deleteMesh(regions=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['CH8'].rootAssembly.seedEdgeBySize(deviationFactor=0.1, edges=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#80000000 ]', ), ), size=0.5)
mdb.models['CH8'].rootAssembly.generateMesh(regions=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['CH8'].rootAssembly.deleteMesh(regions=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['CH8'].rootAssembly.seedEdgeBySize(deviationFactor=0.1, edges=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#80000000 ]', ), ), size=0.3)
mdb.models['CH8'].rootAssembly.generateMesh(regions=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['CH8'].rootAssembly.deleteMesh(regions=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['CH8'].rootAssembly.seedEdgeBySize(deviationFactor=0.1, edges=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#80000000 ]', ), ), size=0.2)
mdb.models['CH8'].rootAssembly.generateMesh(regions=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['CH8'].rootAssembly.Set(elements=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].elements.getSequenceFromMask(
    mask=('[#0:603 #800000 ]', ), ), name='CrE')
mdb.models['CH8'].rootAssembly.Set(name='Disp', nodes=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].nodes.getSequenceFromMask(
    mask=('[#6c #6000 #fc001800 #1ff007 #0:32 #ffffc00 ]', ), ))
mdb.models['CH8'].rootAssembly.Set(name='Force', nodes=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].nodes.getSequenceFromMask(
    mask=('[#6c #6000 #fc001800 #1ff007 #0:32 #ffffc00 ]', ), ))
mdb.models['CH8'].rootAssembly.Set(faces=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    ('[#11000050 ]', ), ), name='x_symm')
mdb.models['CH8'].rootAssembly.Set(faces=
    mdb.models['CH8'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    ('[#80814088 ]', ), ), name='z_symm')
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='CH8', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='CH8', nodalOutputPrecision=SINGLE, 
    numCpus=1, numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.Model(name='CH12', objectToCopy=mdb.models['CH8'])
mdb.models['CH12'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['CH12'].parts['Part-1'].features['Solid extrude-1'].sketch)
mdb.models['CH12'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['CH12'].sketches['__edit__'], 
    upToFeature=mdb.models['CH12'].parts['Part-1'].features['Solid extrude-1'])
mdb.models['CH12'].sketches['__edit__'].dimensions[3].setValues(value=6)
mdb.models['CH12'].parts['Part-1'].features['Solid extrude-1'].setValues(
    sketch=mdb.models['CH12'].sketches['__edit__'])
del mdb.models['CH12'].sketches['__edit__']
mdb.models['CH12'].parts['Part-1'].regenerate()
mdb.models['CH12'].parts['Part-1'].features['Datum plane-3'].setValues(offset=
    6.2)
mdb.models['CH12'].parts['Part-1'].regenerate()
mdb.models['CH12'].parts['Part-1'].regenerate()
mdb.models['CH12'].parts['Part-1'].features['Datum plane-3'].setValues(offset=
    7.6)
mdb.models['CH12'].parts['Part-1'].regenerate()
mdb.models['CH12'].parts['Part-1'].regenerate()
mdb.models['CH12'].parts['Part-1'].features['Datum plane-1'].setValues(offset=
    7.0)
mdb.models['CH12'].parts['Part-1'].regenerate()
mdb.models['CH12'].parts['Part-1'].regenerate()
mdb.models['CH12'].parts['Part-1'].features['Datum plane-2'].setValues(offset=
    6.2)
mdb.models['CH12'].parts['Part-1'].regenerate()
mdb.models['CH12'].parts['Part-1'].regenerate()
mdb.models['CH12'].parts['Part-1'].features['Datum plane-5'].setValues(offset=
    4.6)
mdb.models['CH12'].parts['Part-1'].regenerate()
mdb.models['CH12'].parts['Part-1'].regenerate()
mdb.models['CH12'].parts['Part-1'].Set(cells=
    mdb.models['CH12'].parts['Part-1'].cells.getSequenceFromMask(('[#3f ]', ), 
    ), name='Sample')
mdb.models['CH12'].rootAssembly.regenerate()
mdb.models['CH12'].rootAssembly.makeDependent(instances=(
    mdb.models['CH12'].rootAssembly.instances['Part-1-1'], ))
mdb.models['CH12'].rootAssembly.makeIndependent(instances=(
    mdb.models['CH12'].rootAssembly.instances['Part-1-1'], ))
mdb.models['CH12'].rootAssembly.setMeshControls(algorithm=ADVANCING_FRONT, 
    regions=
    mdb.models['CH12'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#3e ]', ), ), technique=SWEEP)
mdb.models['CH12'].rootAssembly.setSweepPath(edge=
    mdb.models['CH12'].rootAssembly.instances['Part-1-1'].edges[23], region=
    mdb.models['CH12'].rootAssembly.instances['Part-1-1'].cells[1], sense=
    FORWARD)
mdb.models['CH12'].rootAssembly.setSweepPath(edge=
    mdb.models['CH12'].rootAssembly.instances['Part-1-1'].edges[50], region=
    mdb.models['CH12'].rootAssembly.instances['Part-1-1'].cells[2], sense=
    REVERSE)
mdb.models['CH12'].rootAssembly.setSweepPath(edge=
    mdb.models['CH12'].rootAssembly.instances['Part-1-1'].edges[27], region=
    mdb.models['CH12'].rootAssembly.instances['Part-1-1'].cells[3], sense=
    FORWARD)
mdb.models['CH12'].rootAssembly.setSweepPath(edge=
    mdb.models['CH12'].rootAssembly.instances['Part-1-1'].edges[1], region=
    mdb.models['CH12'].rootAssembly.instances['Part-1-1'].cells[4], sense=
    REVERSE)
mdb.models['CH12'].rootAssembly.setSweepPath(edge=
    mdb.models['CH12'].rootAssembly.instances['Part-1-1'].edges[41], region=
    mdb.models['CH12'].rootAssembly.instances['Part-1-1'].cells[5], sense=
    FORWARD)
mdb.models['CH12'].rootAssembly.seedEdgeBySize(deviationFactor=0.1, edges=
    mdb.models['CH12'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#c000000 #b7358 ]', ), ), size=0.1)
mdb.models['CH12'].rootAssembly.seedEdgeBySize(deviationFactor=0.1, edges=
    mdb.models['CH12'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#b0000000 ]', ), ), size=0.2)
mdb.models['CH12'].rootAssembly.setSeedConstraints(constraint=FIXED, edges=
    mdb.models['CH12'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#b0000000 ]', ), ))
mdb.models['CH12'].rootAssembly.setSeedConstraints(constraint=FIXED, edges=
    mdb.models['CH12'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#c000000 #b7358 ]', ), ))
mdb.models['CH12'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH12'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#100 ]', ), ), size=1.0)
mdb.models['CH12'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH12'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#210042 ]', ), ), size=1.0)
mdb.models['CH12'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH12'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#74 ]', ), ), size=1.0)
mdb.models['CH12'].rootAssembly.seedEdgeByNumber(constraint=FIXED, edges=
    mdb.models['CH12'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#4 ]', ), ), number=3)
mdb.models['CH12'].rootAssembly.seedEdgeByNumber(constraint=FIXED, edges=
    mdb.models['CH12'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#400000 ]', ), ), number=2)
mdb.models['CH12'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH12'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#800 ]', ), ), size=1.0)
mdb.models['CH12'].rootAssembly.generateMesh(regions=
    mdb.models['CH12'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#20 ]', ), ))
mdb.models['CH12'].rootAssembly.generateMesh(regions=
    mdb.models['CH12'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#20 ]', ), ), seedConstraintOverride=ON)
mdb.models['CH12'].rootAssembly.generateMesh(regions=
    mdb.models['CH12'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH12'].rootAssembly.generateMesh(regions=
    mdb.models['CH12'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ), seedConstraintOverride=ON)
mdb.models['CH12'].rootAssembly.generateMesh(regions=
    mdb.models['CH12'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['CH12'].rootAssembly.generateMesh(regions=
    mdb.models['CH12'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['CH12'].rootAssembly.generateMesh(regions=
    mdb.models['CH12'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['CH12'].rootAssembly.generateMesh(regions=
    mdb.models['CH12'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['CH12'].rootAssembly.generateMesh(regions=
    mdb.models['CH12'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), seedConstraintOverride=ON)
mdb.models['CH12'].rootAssembly.deleteMesh(regions=
    mdb.models['CH12'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['CH12'].rootAssembly.seedEdgeByNumber(constraint=FIXED, edges=
    mdb.models['CH12'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#200 ]', ), ), number=2)
mdb.models['CH12'].rootAssembly.generateMesh(regions=
    mdb.models['CH12'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['CH12'].rootAssembly.generateMesh(regions=
    mdb.models['CH12'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#20 ]', ), ))
mdb.models['CH12'].rootAssembly.deleteMesh(regions=
    mdb.models['CH12'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#20 ]', ), ))
mdb.models['CH12'].rootAssembly.setMeshControls(algorithm=MEDIAL_AXIS, regions=
    mdb.models['CH12'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#20 ]', ), ))
mdb.models['CH12'].rootAssembly.generateMesh(regions=
    mdb.models['CH12'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#20 ]', ), ))
mdb.models['CH12'].rootAssembly.generateMesh(regions=
    mdb.models['CH12'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#20 ]', ), ), seedConstraintOverride=ON)
mdb.models['CH12'].rootAssembly.generateMesh(regions=
    mdb.models['CH12'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH12'].rootAssembly.Set(elements=
    mdb.models['CH12'].rootAssembly.instances['Part-1-1'].elements.getSequenceFromMask(
    mask=('[#0:465 #80000 ]', ), ), name='CrE')
mdb.models['CH12'].rootAssembly.Set(name='Disp', nodes=
    mdb.models['CH12'].rootAssembly.instances['Part-1-1'].nodes.getSequenceFromMask(
    mask=('[#0:237 #4206081 #25004000 #8010404 #214000 #0 #12680000', 
    ' #801 #1203a80 #80801880 #20017a2 ]', ), ))
mdb.models['CH12'].rootAssembly.Set(name='Force', nodes=
    mdb.models['CH12'].rootAssembly.instances['Part-1-1'].nodes.getSequenceFromMask(
    mask=('[#0:237 #4206081 #25004000 #8010404 #214000 #0 #12680000', 
    ' #801 #1203a80 #80801880 #20017a2 ]', ), ))
mdb.models['CH12'].rootAssembly.Set(faces=
    mdb.models['CH12'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    ('[#80814088 ]', ), ), name='z_symm')
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='CH12', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='CH12', nodalOutputPrecision=SINGLE, 
    numCpus=1, numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
# Save by wliu on 2019_01_21-20.42.21; build 2017 2016_09_27-23.54.59 126836
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(name='CH1', objectToCopy=mdb.models['CH2'])
mdb.models['CH1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['CH1'].parts['Part-1'].features['Solid extrude-1'].sketch)
mdb.models['CH1'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['CH1'].sketches['__edit__'], upToFeature=
    mdb.models['CH1'].parts['Part-1'].features['Solid extrude-1'])
mdb.models['CH1'].sketches['__edit__'].delete(objectList=(
    mdb.models['CH1'].sketches['__edit__'].geometry[7], ))
mdb.models['CH1'].sketches['__edit__'].delete(objectList=(
    mdb.models['CH1'].sketches['__edit__'].geometry[8], ))
mdb.models['CH1'].sketches['__edit__'].CircleByCenterPerimeter(center=(0.0, 
    0.0), point1=(0.510743141174316, 0.252499938011169))
mdb.models['CH1'].sketches['__edit__'].delete(objectList=(
    mdb.models['CH1'].sketches['__edit__'].geometry[11], ))
mdb.models['CH1'].sketches['__edit__'].CircleByCenterPerimeter(center=(0.0, 
    0.0), point1=(-0.0224556922912598, -0.664386749267578))
mdb.models['CH1'].sketches['__edit__'].RadialDimension(curve=
    mdb.models['CH1'].sketches['__edit__'].geometry[12], radius=0.5, textPoint=
    (-1.43043351173401, -0.222614169120789))
mdb.models['CH1'].sketches['__edit__'].FixedConstraint(entity=
    mdb.models['CH1'].sketches['__edit__'].vertices[10])
mdb.models['CH1'].sketches['__edit__'].trimExtendCurve(curve1=
    mdb.models['CH1'].sketches['__edit__'].geometry[10], curve2=
    mdb.models['CH1'].sketches['__edit__'].geometry[12], point1=(
    0.0126241445541382, 1.21144568920136), point2=(0.0431956052780151, 
    0.477365583181381))
mdb.models['CH1'].sketches['__edit__'].trimExtendCurve(curve1=
    mdb.models['CH1'].sketches['__edit__'].geometry[9], curve2=
    mdb.models['CH1'].sketches['__edit__'].geometry[12], point1=(
    1.31497490406036, -0.01813855022192), point2=(0.513998627662659, 
    -0.073194645345211))
mdb.models['CH1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['CH1'].sketches['__edit__'].geometry[12], point1=(
    -0.231948971748352, -0.409648090600967))
mdb.models['CH1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['CH1'].sketches['__edit__'].geometry[15], point1=(
    0.226625323295593, -0.409648090600967))
mdb.models['CH1'].parts['Part-1'].features['Solid extrude-1'].setValues(sketch=
    mdb.models['CH1'].sketches['__edit__'])
del mdb.models['CH1'].sketches['__edit__']
mdb.models['CH1'].parts['Part-1'].regenerate()
#* FeatureError: Regeneration failed
mdb.models['CH1'].parts['Part-1'].backup()
mdb.models['CH1'].parts['Part-1'].deleteFeatures(('Datum plane-1', 
    'Datum plane-2', 'Datum plane-3', 'Datum plane-4', 'Partition cell-1', 
    'Partition cell-2', 'Partition cell-3', 'Partition cell-4', 
    'Datum plane-5', 'Partition cell-5'))
mdb.models['CH1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['CH1'].parts['Part-1'].features['Solid extrude-1'].sketch)
mdb.models['CH1'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['CH1'].sketches['__edit__'], upToFeature=
    mdb.models['CH1'].parts['Part-1'].features['Solid extrude-1'])
del mdb.models['CH1'].sketches['__edit__']
mdb.models['CH1'].parts['Part-1'].DatumPlaneByOffset(flip=SIDE2, offset=0.46, 
    plane=mdb.models['CH1'].parts['Part-1'].faces[1])
mdb.models['CH1'].parts['Part-1'].DatumPlaneByOffset(flip=SIDE2, offset=0.6, 
    plane=mdb.models['CH1'].parts['Part-1'].faces[1])
mdb.models['CH1'].parts['Part-1'].DatumPlaneByOffset(flip=SIDE2, offset=1.0, 
    plane=mdb.models['CH1'].parts['Part-1'].faces[1])
mdb.models['CH1'].parts['Part-1'].DatumPlaneByOffset(flip=SIDE2, offset=1.6, 
    plane=mdb.models['CH1'].parts['Part-1'].faces[1])
mdb.models['CH1'].parts['Part-1'].PartitionCellByDatumPlane(cells=
    mdb.models['CH1'].parts['Part-1'].cells.getSequenceFromMask(('[#1 ]', ), ), 
    datumPlane=mdb.models['CH1'].parts['Part-1'].datums[17])
mdb.models['CH1'].parts['Part-1'].PartitionCellByDatumPlane(cells=
    mdb.models['CH1'].parts['Part-1'].cells.getSequenceFromMask(('[#2 ]', ), ), 
    datumPlane=mdb.models['CH1'].parts['Part-1'].datums[16])
mdb.models['CH1'].parts['Part-1'].PartitionCellByDatumPlane(cells=
    mdb.models['CH1'].parts['Part-1'].cells.getSequenceFromMask(('[#4 ]', ), ), 
    datumPlane=mdb.models['CH1'].parts['Part-1'].datums[15])
mdb.models['CH1'].parts['Part-1'].PartitionCellByDatumPlane(cells=
    mdb.models['CH1'].parts['Part-1'].cells.getSequenceFromMask(('[#8 ]', ), ), 
    datumPlane=mdb.models['CH1'].parts['Part-1'].datums[14])
mdb.models['CH1'].parts['Part-1'].Set(cells=
    mdb.models['CH1'].parts['Part-1'].cells.getSequenceFromMask(('[#1f ]', ), )
    , name='Sample')
mdb.models['CH1'].rootAssembly.regenerate()
mdb.models['CH1'].rootAssembly.makeDependent(instances=(
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'], ))
mdb.models['CH1'].rootAssembly.makeIndependent(instances=(
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'], ))
mdb.models['CH1'].rootAssembly.setMeshControls(algorithm=ADVANCING_FRONT, 
    regions=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#17 ]', ), ), technique=SWEEP)
mdb.models['CH1'].rootAssembly.setSweepPath(edge=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].edges[1], region=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].cells[0], sense=
    REVERSE)
mdb.models['CH1'].rootAssembly.setSweepPath(edge=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].edges[16], region=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].cells[1], sense=
    REVERSE)
mdb.models['CH1'].rootAssembly.setSweepPath(edge=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].edges[36], region=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].cells[2], sense=
    FORWARD)
mdb.models['CH1'].rootAssembly.setSweepPath(edge=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].edges[1], region=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].cells[4], sense=
    REVERSE)
mdb.models['CH1'].rootAssembly.setSweepPath(edge=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].edges[16], region=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].cells[1], sense=
    FORWARD)
mdb.models['CH1'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#300118c #4 ]', ), ), size=0.1)
mdb.models['CH1'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#440 ]', ), ), size=0.1)
mdb.models['CH1'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#800000 ]', ), ), size=0.1)
mdb.models['CH1'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#400000 ]', ), ), size=0.1)
mdb.models['CH1'].rootAssembly.seedEdgeByNumber(constraint=FIXED, edges=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#4000000 ]', ), ), number=3)
mdb.models['CH1'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#0 #8 ]', ), ), size=1.0)
mdb.models['CH1'].rootAssembly.seedEdgeByNumber(constraint=FIXED, edges=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#0 #20 ]', ), ), number=3)
mdb.models['CH1'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#0 #4540 ]', ), ), size=1.0)
mdb.models['CH1'].rootAssembly.seedEdgeByNumber(constraint=FIXED, edges=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#0 #80 ]', ), ), number=3)
mdb.models['CH1'].rootAssembly.generateMesh(regions=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['CH1'].rootAssembly.generateMesh(regions=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['CH1'].rootAssembly.generateMesh(regions=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['CH1'].rootAssembly.generateMesh(regions=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['CH1'].rootAssembly.generateMesh(regions=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH1'].rootAssembly.generateMesh(regions=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['CH1'].rootAssembly.deleteMesh(regions=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['CH1'].rootAssembly.setMeshControls(algorithm=MEDIAL_AXIS, regions=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['CH1'].rootAssembly.generateMesh(regions=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['CH1'].rootAssembly.generateMesh(regions=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#10 ]', ), ), seedConstraintOverride=ON)
mdb.models['CH1'].rootAssembly.generateMesh(regions=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['CH1'].rootAssembly.deleteMesh(regions=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['CH1'].rootAssembly.setMeshControls(algorithm=MEDIAL_AXIS, regions=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['CH1'].rootAssembly.generateMesh(regions=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['CH1'].rootAssembly.generateMesh(regions=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['CH1'].rootAssembly.deleteMesh(regions=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['CH1'].rootAssembly.seedEdgeByNumber(constraint=FIXED, edges=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#40000 ]', ), ), number=2)
mdb.models['CH1'].rootAssembly.seedEdgeByNumber(constraint=FIXED, edges=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#800 ]', ), ), number=2)
mdb.models['CH1'].rootAssembly.generateMesh(regions=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['CH1'].rootAssembly.generateMesh(regions=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['CH1'].parts['Part-1'].regenerate()
mdb.models['CH1'].parts['Part-1'].deleteFeatures(('Datum plane-1', 
    'Partition cell-4'))
mdb.models['CH1'].rootAssembly.regenerate()
mdb.models['CH1'].rootAssembly.setMeshControls(algorithm=ADVANCING_FRONT, 
    regions=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ), technique=SWEEP)
mdb.models['CH1'].rootAssembly.setSweepPath(edge=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].edges[35], region=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].cells[3], sense=
    REVERSE)
mdb.models['CH1'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#1000000 ]', ), ), size=0.1)
mdb.models['CH1'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#2000 ]', ), ), size=0.1)
mdb.models['CH1'].rootAssembly.generateMesh(regions=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH1'].rootAssembly.generateMesh(regions=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ), seedConstraintOverride=ON)
mdb.models['CH1'].rootAssembly.generateMesh(regions=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['CH1'].rootAssembly.generateMesh(regions=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH1'].rootAssembly.deleteMesh(regions=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH1'].rootAssembly.setMeshControls(algorithm=MEDIAL_AXIS, regions=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH1'].rootAssembly.generateMesh(regions=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH1'].rootAssembly.generateMesh(regions=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['CH1'].rootAssembly.generateMesh(regions=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH1'].parts['Part-1'].Set(cells=
    mdb.models['CH1'].parts['Part-1'].cells.getSequenceFromMask(('[#f ]', ), ), 
    name='Sample')
mdb.models['CH1'].rootAssembly.regenerate()
mdb.models['CH1'].rootAssembly.Set(elements=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].elements.getSequenceFromMask(
    mask=('[#0:234 #100000 ]', ), ), name='CrE')
mdb.models['CH1'].rootAssembly.Set(name='Disp', nodes=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].nodes.getSequenceFromMask(
    mask=('[#0:41 #800c0000 #40084 #0 #40020000 #a02a0482 #4080', 
    ' #8000c1 #10040100 #800 #2010 #20080 #400600 #80010510', 
    ' #3000200 #184000 ]', ), ))
mdb.models['CH1'].rootAssembly.Set(name='Force', nodes=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].nodes.getSequenceFromMask(
    mask=('[#0:41 #800c0000 #40084 #0 #40020000 #a02a0482 #4080', 
    ' #8000c1 #10040100 #800 #2010 #20080 #400600 #80010510', 
    ' #3000200 #184000 ]', ), ))
mdb.models['CH1'].rootAssembly.Set(faces=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    ('[#44104 ]', ), ), name='x_symm')
mdb.models['CH1'].rootAssembly.Set(faces=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    ('[#10000 ]', ), ), name='y_symm')
mdb.models['CH1'].rootAssembly.Set(faces=
    mdb.models['CH1'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    ('[#202042 ]', ), ), name='z_symm')
mdb.models['CH1'].boundaryConditions['Move'].setValues(u2=0.75)
mdb.Model(name='CH3', objectToCopy=mdb.models['CH2'])
mdb.models['CH3'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['CH3'].parts['Part-1'].features['Solid extrude-1'].sketch)
mdb.models['CH3'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['CH3'].sketches['__edit__'], upToFeature=
    mdb.models['CH3'].parts['Part-1'].features['Solid extrude-1'])
mdb.models['CH3'].sketches['__edit__'].RadialDimension(curve=
    mdb.models['CH3'].sketches['__edit__'].geometry[7], radius=1.5, textPoint=(
    0.280069351196289, 0.322490900754929))
mdb.models['CH3'].parts['Part-1'].features['Solid extrude-1'].setValues(sketch=
    mdb.models['CH3'].sketches['__edit__'])
del mdb.models['CH3'].sketches['__edit__']
mdb.models['CH3'].parts['Part-1'].regenerate()
mdb.models['CH3'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['CH3'].parts['Part-1'].features['Solid extrude-1'].sketch)
mdb.models['CH3'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['CH3'].sketches['__edit__'], upToFeature=
    mdb.models['CH3'].parts['Part-1'].features['Solid extrude-1'])
del mdb.models['CH3'].sketches['__edit__']
mdb.models['CH3'].parts['Part-1'].regenerate()
mdb.models['CH3'].parts['Part-1'].regenerate()
mdb.models['CH3'].parts['Part-1'].features['Datum plane-4'].setValues(offset=
    2.4)
mdb.models['CH3'].parts['Part-1'].regenerate()
mdb.models['CH3'].parts['Part-1'].regenerate()
mdb.models['CH3'].parts['Part-1'].features['Datum plane-3'].setValues(offset=
    2.0)
mdb.models['CH3'].parts['Part-1'].regenerate()
mdb.models['CH3'].parts['Part-1'].regenerate()
mdb.models['CH3'].parts['Part-1'].features['Datum plane-2'].setValues(offset=
    1.6)
mdb.models['CH3'].parts['Part-1'].regenerate()
mdb.models['CH3'].parts['Part-1'].regenerate()
mdb.models['CH3'].parts['Part-1'].Set(cells=
    mdb.models['CH3'].parts['Part-1'].cells.getSequenceFromMask(('[#3f ]', ), )
    , name='Sample')
mdb.models['CH3'].rootAssembly.regenerate()
mdb.models['CH3'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#0 #405100 ]', ), ), size=0.1)
mdb.models['CH3'].rootAssembly.seedEdgeByNumber(constraint=FIXED, edges=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#20000000 ]', ), ), number=2)
mdb.models['CH3'].rootAssembly.seedEdgeByNumber(constraint=FIXED, edges=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#400000 ]', ), ), number=2)
mdb.models['CH3'].rootAssembly.seedEdgeByNumber(constraint=FIXED, edges=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#200 ]', ), ), number=2)
mdb.models['CH3'].rootAssembly.generateMesh(regions=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#20 ]', ), ))
mdb.models['CH3'].rootAssembly.generateMesh(regions=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#20 ]', ), ), seedConstraintOverride=ON)
mdb.models['CH3'].rootAssembly.generateMesh(regions=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH3'].rootAssembly.generateMesh(regions=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ), seedConstraintOverride=ON)
mdb.models['CH3'].rootAssembly.generateMesh(regions=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#20 ]', ), ))
mdb.models['CH3'].rootAssembly.generateMesh(regions=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['CH3'].rootAssembly.generateMesh(regions=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['CH3'].rootAssembly.generateMesh(regions=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['CH3'].rootAssembly.deleteMesh(regions=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['CH3'].rootAssembly.seedEdgeByNumber(edges=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#1000 ]', ), ), number=2)
mdb.models['CH3'].rootAssembly.generateMesh(regions=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['CH3'].rootAssembly.Set(elements=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].elements.getSequenceFromMask(
    mask=('[#0:315 #100000 ]', ), ), name='CrE')
mdb.models['CH3'].rootAssembly.Set(name='Disp', nodes=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].nodes.getSequenceFromMask(
    mask=('[#0 #48000000 #13f00 #6 #ffe00018 #8000007f #438', 
    ' #0:7 #20000000 #7f0000 ]', ), ))
mdb.models['CH3'].rootAssembly.Set(name='Force', nodes=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].nodes.getSequenceFromMask(
    mask=('[#0 #48000000 #13f00 #6 #ffe00018 #8000007f #438', 
    ' #0:7 #20000000 #7f0000 ]', ), ))
mdb.models['CH3'].rootAssembly.Set(faces=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    ('[#80822088 ]', ), ), name='z_symm')
mdb.models['CH3'].rootAssembly.deleteMesh(regions=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH3'].rootAssembly.setSeedConstraints(constraint=FREE, edges=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#0 #400000 ]', ), ))
mdb.models['CH3'].rootAssembly.generateMesh(regions=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH3'].rootAssembly.Set(elements=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].elements.getSequenceFromMask(
    mask=('[#0:29 #1000 ]', ), ), name='CrE')
mdb.models['CH3'].rootAssembly.Set(name='Disp', nodes=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].nodes.getSequenceFromMask(
    mask=('[#0 #48000000 #13f00 #6 #ffe00018 #8000007f #438', 
    ' #0:7 #20000000 #7f0000 ]', ), ))
mdb.models['CH3'].rootAssembly.Set(name='Force', nodes=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].nodes.getSequenceFromMask(
    mask=('[#0 #48000000 #13f00 #6 #ffe00018 #8000007f #438', 
    ' #0:7 #20000000 #7f0000 ]', ), ))
mdb.models['CH3'].boundaryConditions['Move'].setValues(u2=0.75)
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='CH1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='CH1', nodalOutputPrecision=SINGLE, 
    numCpus=1, numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='CH3', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='CH3', nodalOutputPrecision=SINGLE, 
    numCpus=1, numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.Model(name='CH05', objectToCopy=mdb.models['CH1'])
mdb.models['CH05'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['CH05'].parts['Part-1'].features['Solid extrude-1'].sketch)
mdb.models['CH05'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['CH05'].sketches['__edit__'], 
    upToFeature=mdb.models['CH05'].parts['Part-1'].features['Solid extrude-1'])
mdb.models['CH05'].sketches['__edit__'].RadialDimension(curve=
    mdb.models['CH05'].sketches['__edit__'].geometry[16], radius=0.25, 
    textPoint=(-0.132016181945801, -0.0917456150054932))
mdb.models['CH05'].parts['Part-1'].features['Solid extrude-1'].setValues(
    sketch=mdb.models['CH05'].sketches['__edit__'])
del mdb.models['CH05'].sketches['__edit__']
mdb.models['CH05'].parts['Part-1'].regenerate()
mdb.models['CH05'].parts['Part-1'].Set(cells=
    mdb.models['CH05'].parts['Part-1'].cells.getSequenceFromMask(('[#f ]', ), )
    , name='Sample')
mdb.models['CH05'].rootAssembly.regenerate()
mdb.models['CH05'].rootAssembly.generateMesh(regions=
    mdb.models['CH05'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH05'].rootAssembly.generateMesh(regions=
    mdb.models['CH05'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ), seedConstraintOverride=ON)
mdb.models['CH05'].rootAssembly.generateMesh(regions=
    mdb.models['CH05'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['CH05'].rootAssembly.generateMesh(regions=
    mdb.models['CH05'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['CH05'].rootAssembly.generateMesh(regions=
    mdb.models['CH05'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['CH05'].rootAssembly.deleteMesh(regions=
    mdb.models['CH05'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH05'].rootAssembly.setSeedConstraints(constraint=FINER, edges=
    mdb.models['CH05'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#40 ]', ), ))
mdb.models['CH05'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['CH05'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#80 ]', ), ), size=0.1)
mdb.models['CH05'].rootAssembly.generateMesh(regions=
    mdb.models['CH05'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH05'].rootAssembly.Set(elements=
    mdb.models['CH05'].rootAssembly.instances['Part-1-1'].elements.getSequenceFromMask(
    mask=('[#0:219 #800 ]', ), ), name='CrE')
mdb.models['CH05'].rootAssembly.Set(name='Disp', nodes=
    mdb.models['CH05'].rootAssembly.instances['Part-1-1'].nodes.getSequenceFromMask(
    mask=('[#0:118 #4000000 #600 #28040000 #8000800 #1031000 #d8000000', 
    ' #60000fff #0 #3d00006 #6000 #8030c ]', ), ))
mdb.models['CH05'].rootAssembly.Set(name='Force', nodes=
    mdb.models['CH05'].rootAssembly.instances['Part-1-1'].nodes.getSequenceFromMask(
    mask=('[#0:118 #4000000 #600 #28040000 #8000800 #1031000 #d8000000', 
    ' #60000fff #0 #3d00006 #6000 #8030c ]', ), ))
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='CH05', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='CH05', nodalOutputPrecision=SINGLE, 
    numCpus=1, numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
# Save by wliu on 2019_01_22-17.09.32; build 2017 2016_09_27-23.54.59 126836
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['CH3'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['CH3'].parts['Part-1'].features['Solid extrude-1'].sketch)
mdb.models['CH3'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['CH3'].sketches['__edit__'], upToFeature=
    mdb.models['CH3'].parts['Part-1'].features['Solid extrude-1'])
del mdb.models['CH3'].sketches['__edit__']
mdb.models['CH4'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['CH4'].parts['Part-1'].features['Solid extrude-1'].sketch)
mdb.models['CH4'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['CH4'].sketches['__edit__'], upToFeature=
    mdb.models['CH4'].parts['Part-1'].features['Solid extrude-1'])
mdb.models['CH4'].sketches['__edit__'].dimensions[0].setValues(value=7.5)
mdb.models['CH4'].sketches['__edit__'].dimensions[1].setValues(value=15)
mdb.models['CH4'].parts['Part-1'].features['Solid extrude-1'].setValues(sketch=
    mdb.models['CH4'].sketches['__edit__'])
del mdb.models['CH4'].sketches['__edit__']
mdb.models['CH4'].parts['Part-1'].features['Solid extrude-1'].setValues(depth=
    0.5)
mdb.models['CH4'].parts['Part-1'].regenerate()
mdb.models['CH4'].parts['Part-1'].regenerate()
mdb.models['CH4'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['CH4'].parts['Part-1'].features['Solid extrude-1'].sketch)
mdb.models['CH4'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['CH4'].sketches['__edit__'], upToFeature=
    mdb.models['CH4'].parts['Part-1'].features['Solid extrude-1'])
del mdb.models['CH4'].sketches['__edit__']
del mdb.models['CH12']
mdb.models['CH3'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['CH3'].parts['Part-1'].features['Solid extrude-1'].sketch)
mdb.models['CH3'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['CH3'].sketches['__edit__'], upToFeature=
    mdb.models['CH3'].parts['Part-1'].features['Solid extrude-1'])
mdb.models['CH3'].sketches['__edit__'].dimensions[0].setValues(value=7.5)
mdb.models['CH3'].sketches['__edit__'].dimensions[1].setValues(value=15)
mdb.models['CH3'].parts['Part-1'].features['Solid extrude-1'].setValues(sketch=
    mdb.models['CH3'].sketches['__edit__'])
del mdb.models['CH3'].sketches['__edit__']
mdb.models['CH3'].parts['Part-1'].features['Solid extrude-1'].setValues(depth=
    0.5)
mdb.models['CH3'].parts['Part-1'].regenerate()
mdb.models['CH3'].parts['Part-1'].regenerate()
mdb.models['CH3'].materials.changeKey(fromName='DP1000', toName='CP1000')
mdb.models['CH3'].materials['CP1000'].Plastic(table=((547.3187706, 0.0), (
    561.3449136, 5e-05), (589.0707033, 7e-05), (616.652144, 0.0001), (
    656.8709159, 0.00012), (683.0123178, 0.00015), (695.9660165, 0.00016), (
    721.2695576, 0.00018), (745.9669958, 0.00021), (757.8497493, 0.00025), (
    781.0406786, 0.00028), (792.1875965, 0.00031), (802.6010531, 0.00033), (
    825.1501316, 0.0004), (836.6886007, 0.0005), (846.5918057, 0.0006), (
    855.2550949, 0.0007), (862.9333441, 0.0008), (869.8042195, 0.0009), (
    875.9986899, 0.001), (915.7895779, 0.002), (936.535345, 0.003), (
    950.0382983, 0.004), (960.1576656, 0.005), (968.3939004, 0.006), (
    975.4212223, 0.007), (981.5897122, 0.008), (987.1062691, 0.009), (
    992.1061142, 0.01), (992.1061142, 0.01), (1026.652879, 0.02), (1048.26802, 
    0.03), (1064.270724, 0.04), (1077.078935, 0.05), (1087.807916, 0.06), (
    1097.068595, 0.07), (1105.233604, 0.08), (1112.547721, 0.09), (1119.180742, 
    0.1), (1125.25548, 0.11), (1130.86376, 0.12), (1136.076106, 0.13), (
    1140.947913, 0.14), (1145.523514, 0.15), (1149.838967, 0.16), (1153.924009, 
    0.17), (1157.803466, 0.18), (1161.498284, 0.19), (1165.026306, 0.2), (
    1168.402861, 0.21), (1171.641219, 0.22), (1174.752949, 0.23), (1177.748195, 
    0.24), (1180.63591, 0.25), (1183.424032, 0.26), (1186.119634, 0.27), (
    1188.729047, 0.28), (1191.257964, 0.29), (1193.711518, 0.3), (1196.094358, 
    0.31), (1198.410707, 0.32), (1200.664415, 0.33), (1202.858998, 0.34), (
    1204.99768, 0.35), (1207.083422, 0.36), (1209.118952, 0.37), (1211.106788, 
    0.38), (1213.04926, 0.39), (1214.948527, 0.4), (1216.806595, 0.41), (
    1218.625331, 0.42), (1220.406474, 0.43), (1222.151649, 0.44), (1223.862376, 
    0.45), (1225.540078, 0.46), (1227.186091, 0.47), (1228.801667, 0.48), (
    1230.387987, 0.49), (1231.946162, 0.5), (1233.477239, 0.51), (1234.982207, 
    0.52), (1236.462002, 0.53), (1237.917506, 0.54), (1239.349559, 0.55), (
    1240.758953, 0.56), (1242.146443, 0.57), (1243.512745, 0.58), (1244.858539, 
    0.59), (1246.184473, 0.6), (1247.491163, 0.61), (1248.779198, 0.62), (
    1250.049139, 0.63), (1251.301521, 0.64), (1252.536856, 0.65), (1253.755632, 
    0.66), (1254.958318, 0.67), (1256.145361, 0.68), (1257.31719, 0.69), (
    1258.474217, 0.7), (1259.616837, 0.71), (1260.745427, 0.72), (1261.860351, 
    0.73), (1262.961959, 0.74), (1264.050587, 0.75), (1265.126557, 0.76), (
    1266.190181, 0.77), (1267.241757, 0.78), (1268.281574, 0.79), (1269.309909, 
    0.8), (1270.327032, 0.81), (1271.3332, 0.82), (1272.328662, 0.83), (
    1273.31366, 0.84), (1274.288426, 0.85), (1275.253185, 0.86), (1276.208154, 
    0.87), (1277.153544, 0.88), (1278.089558, 0.89), (1279.016392, 0.9), (
    1279.934237, 0.91), (1280.843278, 0.92), (1281.743693, 0.93), (1282.635656, 
    0.94), (1283.519334, 0.95), (1284.394892, 0.96), (1285.262486, 0.97), (
    1286.12227, 0.98), (1286.974393, 0.99), (1287.819, 1.0), (1288.656231, 
    1.01), (1289.486223, 1.02), (1290.309108, 1.03), (1291.125015, 1.04), (
    1291.93407, 1.05), (1292.736395, 1.06), (1293.532108, 1.07), (1294.321325, 
    1.08), (1295.104159, 1.09), (1295.880718, 1.1), (1296.65111, 1.11), (
    1297.415438, 1.12), (1298.173804, 1.13), (1298.926306, 1.14), (1299.67304, 
    1.15), (1300.414101, 1.16), (1301.14958, 1.17), (1301.879565, 1.18), (
    1302.604145, 1.19), (1303.323403, 1.2), (1304.037423, 1.21), (1304.746286, 
    1.22), (1305.450072, 1.23), (1306.148856, 1.24), (1306.842715, 1.25), (
    1307.531722, 1.26), (1308.215949, 1.27), (1308.895467, 1.28), (1309.570345, 
    1.29), (1310.24065, 1.3), (1310.906447, 1.31), (1311.567801, 1.32), (
    1312.224776, 1.33), (1312.877432, 1.34), (1313.52583, 1.35), (1314.170028, 
    1.36), (1314.810086, 1.37), (1315.446059, 1.38), (1316.078002, 1.39), (
    1316.705971, 1.4), (1317.330017, 1.41), (1317.950193, 1.42), (1318.566551, 
    1.43), (1319.179139, 1.44), (1319.788008, 1.45), (1320.393205, 1.46), (
    1320.994777, 1.47), (1321.59277, 1.48), (1322.187229, 1.49), (1322.7782, 
    1.5), (1323.365725, 1.51), (1323.949847, 1.52), (1324.530608, 1.53), (
    1325.108049, 1.54), (1325.682211, 1.55), (1326.253133, 1.56), (1326.820854, 
    1.57), (1327.385412, 1.58), (1327.946845, 1.59), (1328.505189, 1.6), (
    1329.060481, 1.61), (1329.612756, 1.62), (1330.162049, 1.63), (1330.708393, 
    1.64), (1331.251824, 1.65), (1331.792374, 1.66), (1332.330075, 1.67), (
    1332.864959, 1.68), (1333.397059, 1.69), (1333.926403, 1.7), (1334.453024, 
    1.71), (1334.97695, 1.72), (1335.498211, 1.73), (1336.016837, 1.74), (
    1336.532854, 1.75), (1337.046292, 1.76), (1337.557177, 1.77), (1338.065537, 
    1.78), (1338.571398, 1.79), (1339.074787, 1.8), (1339.575728, 1.81), (
    1340.074248, 1.82), (1340.570371, 1.83), (1341.064122, 1.84), (1341.555525, 
    1.85), (1342.044604, 1.86), (1342.531381, 1.87), (1343.015881, 1.88), (
    1343.498126, 1.89), (1343.978138, 1.9), (1344.455939, 1.91), (1344.931551, 
    1.92), (1345.404995, 1.93), (1345.876293, 1.94), (1346.345465, 1.95), (
    1346.81253, 1.96), (1347.277511, 1.97), (1347.740426, 1.98), (1348.201295, 
    1.99), (1348.660136, 2.0), (1349.116971, 2.01), (1349.571815, 2.02), (
    1350.02469, 2.03), (1350.475611, 2.04), (1350.924598, 2.05), (1351.371669, 
    2.06), (1351.816839, 2.07), (1352.260128, 2.08), (1352.701551, 2.09), (
    1353.141125, 2.1), (1353.578867, 2.11), (1354.014794, 2.12), (1354.44892, 
    2.13), (1354.881263, 2.14), (1355.311837, 2.15), (1355.740659, 2.16), (
    1356.167742, 2.17), (1356.593103, 2.18), (1357.016755, 2.19), (1357.438715, 
    2.2), (1357.858995, 2.21), (1358.277611, 2.22), (1358.694576, 2.23), (
    1359.109904, 2.24), (1359.52361, 2.25), (1359.935705, 2.26), (1360.346205, 
    2.27), (1360.755121, 2.28), (1361.162467, 2.29), (1361.568256, 2.3), (
    1361.972501, 2.31), (1362.375213, 2.32), (1362.776406, 2.33), (1363.176092, 
    2.34), (1363.574282, 2.35), (1363.970989, 2.36), (1364.366224, 2.37), (
    1364.759999, 2.38), (1365.152325, 2.39), (1365.543215, 2.4), (1365.932678, 
    2.41), (1366.320727, 2.42), (1366.707371, 2.43), (1367.092623, 2.44), (
    1367.476492, 2.45), (1367.85899, 2.46), (1368.240126, 2.47), (1368.619911, 
    2.48), (1368.998355, 2.49), (1369.375469, 2.5), (1369.751262, 2.51), (
    1370.125744, 2.52), (1370.498924, 2.53), (1370.870814, 2.54), (1371.241421, 
    2.55), (1371.610756, 2.56), (1371.978827, 2.57), (1372.345645, 2.58), (
    1372.711217, 2.59), (1373.075554, 2.6), (1373.438663, 2.61), (1373.800555, 
    2.62), (1374.161237, 2.63), (1374.520718, 2.64), (1374.879007, 2.65), (
    1375.236111, 2.66), (1375.592041, 2.67), (1375.946802, 2.68), (1376.300405, 
    2.69), (1376.652857, 2.7), (1377.004165, 2.71), (1377.354339, 2.72), (
    1377.703385, 2.73), (1378.051311, 2.74), (1378.398126, 2.75), (1378.743836, 
    2.76), (1379.088449, 2.77), (1379.431973, 2.78), (1379.774414, 2.79), (
    1380.115781, 2.8), (1380.45608, 2.81), (1380.795318, 2.82), (1381.133503, 
    2.83), (1381.470642, 2.84), (1381.806741, 2.85), (1382.141807, 2.86), (
    1382.475847, 2.87), (1382.808868, 2.88), (1383.140876, 2.89), (1383.471878, 
    2.9), (1383.80188, 2.91), (1384.130889, 2.92), (1384.458912, 2.93), (
    1384.785954, 2.94), (1385.112022, 2.95), (1385.437121, 2.96), (1385.761259, 
    2.97), (1386.084441, 2.98), (1386.406673, 2.99), (1386.727962, 3.0)))
mdb.models['CH3'].rootAssembly.regenerate()
mdb.models['CH3'].rootAssembly.generateMesh(regions=(
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'], ))
mdb.models['CH3'].rootAssembly.generateMesh(regions=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#20 ]', ), ))
mdb.models['CH3'].rootAssembly.setMeshControls(algorithm=MEDIAL_AXIS, regions=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#3e ]', ), ))
mdb.models['CH3'].rootAssembly.generateMesh(regions=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#20 ]', ), ))
mdb.models['CH3'].rootAssembly.setMeshControls(algorithm=ADVANCING_FRONT, 
    regions=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#20 ]', ), ))
mdb.models['CH3'].rootAssembly.generateMesh(regions=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#20 ]', ), ))
mdb.models['CH3'].rootAssembly.setSeedConstraints(constraint=FINER, edges=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#0 #1000 ]', ), ))
mdb.models['CH3'].rootAssembly.generateMesh(regions=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#20 ]', ), ))
mdb.models['CH3'].rootAssembly.generateMesh(regions=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH3'].rootAssembly.generateMesh(regions=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ), seedConstraintOverride=ON)
mdb.models['CH3'].rootAssembly.deleteMesh(regions=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH3'].rootAssembly.setSeedConstraints(constraint=FINER, edges=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#0 #400000 ]', ), ))
mdb.models['CH3'].rootAssembly.setSeedConstraints(constraint=FINER, edges=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#0 #100 ]', ), ))
mdb.models['CH3'].rootAssembly.setSeedConstraints(constraint=FINER, edges=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#2000000 ]', ), ))
mdb.models['CH3'].rootAssembly.setSeedConstraints(constraint=FIXED, edges=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#2000000 ]', ), ))
mdb.models['CH3'].rootAssembly.generateMesh(regions=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#20 ]', ), ))
mdb.models['CH3'].rootAssembly.generateMesh(regions=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH3'].rootAssembly.deleteMesh(regions=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH3'].rootAssembly.setMeshControls(algorithm=ADVANCING_FRONT, 
    regions=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH3'].rootAssembly.setSeedConstraints(constraint=FIXED, edges=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#0 #400000 ]', ), ))
mdb.models['CH3'].rootAssembly.generateMesh(regions=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH3'].rootAssembly.generateMesh(regions=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['CH3'].rootAssembly.generateMesh(regions=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#38 ]', ), ), seedConstraintOverride=ON)
mdb.models['CH3'].rootAssembly.generateMesh(regions=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['CH3'].rootAssembly.generateMesh(regions=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#3a ]', ), ), seedConstraintOverride=ON)
mdb.models['CH3'].rootAssembly.generateMesh(regions=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['CH3'].rootAssembly.generateMesh(regions=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ), seedConstraintOverride=ON)
mdb.models['CH3'].rootAssembly.generateMesh(regions=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['CH3'].rootAssembly.generateMesh(regions=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#3e ]', ), ), seedConstraintOverride=ON)
mdb.models['CH3'].rootAssembly.deleteMesh(regions=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#16 ]', ), ))
mdb.models['CH3'].rootAssembly.setMeshControls(algorithm=ADVANCING_FRONT, 
    regions=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#1e ]', ), ))
mdb.models['CH3'].rootAssembly.deleteMesh(regions=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH3'].rootAssembly.setSeedConstraints(constraint=FINER, edges=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#10000000 ]', ), ))
mdb.models['CH3'].rootAssembly.setSeedConstraints(constraint=FIXED, edges=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#2000000 ]', ), ))
mdb.models['CH3'].rootAssembly.generateMesh(regions=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH3'].rootAssembly.generateMesh(regions=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['CH3'].rootAssembly.generateMesh(regions=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['CH3'].rootAssembly.generateMesh(regions=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['CH3'].rootAssembly.deleteMesh(regions=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#6 ]', ), ))
mdb.models['CH3'].rootAssembly.seedEdgeByNumber(constraint=FIXED, edges=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#4 ]', ), ), number=3)
mdb.models['CH3'].rootAssembly.generateMesh(regions=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['CH3'].rootAssembly.generateMesh(regions=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['CH3'].rootAssembly.generateMesh(regions=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['CH3'].rootAssembly.Set(elements=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].elements.getSequenceFromMask(
    mask=('[#8 ]', ), ), name='CrE')
mdb.models['CH3'].rootAssembly.Set(name='Disp', nodes=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].nodes.getSequenceFromMask(
    mask=('[#0:269 #f0000f00 #3ff3fff #0:12 #63c000 #c031bfc0 #3f00', 
    ' #c0000000 #f ]', ), ))
mdb.models['CH3'].rootAssembly.Set(name='Force', nodes=
    mdb.models['CH3'].rootAssembly.instances['Part-1-1'].nodes.getSequenceFromMask(
    mask=('[#0:269 #f0000f00 #3ff3fff #0:12 #63c000 #c031bfc0 #3f00', 
    ' #c0000000 #f ]', ), ))
mdb.models['CH3'].boundaryConditions['Move'].setValues(u2=1.0)
mdb.jobs['CH3'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['CH3']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'D19-0462', 'handle': 0, 'jobName': 'CH3'})
mdb.jobs['CH3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'in keyword *SOLIDSECTION, file "CH3.inp", line 17219: Material with the name "DP1000" has not been defined in the model.', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE INDEPENDENT VARIABLES MUST BE ARRANGED IN ASCENDING ORDER', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THERE IS NO MATERIAL BY THE NAME DP1000', 'jobName': 'CH3'})
mdb.jobs['CH3']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '7565 elements have missing property definitions. The elements have been identified in element set ErrElemMissingSection.', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE OPTION *BOUNDARY,TYPE=DISPLACEMENT HAS BEEN USED; CHECK STATUS FILE BETWEEN STEPS FOR WARNINGS ON ANY JUMPS PRESCRIBED ACROSS THE STEPS IN DISPLACEMENT VALUES OF TRANSLATIONAL DOF. FOR ROTATIONAL DOF MAKE SURE THAT THERE ARE NO SUCH JUMPS. ALL JUMPS IN DISPLACEMENTS ACROSS STEPS ARE IGNORED', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NO SECTION DEFINITIONS FOUND', 'jobName': 'CH3'})
mdb.jobs['CH3']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\liuw7\\OneDrive\\03 Studies\\17 HiBa\\02 CP1000_Macro\\CH3.odb', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'CH3'})
mdb.jobs['CH3']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'CH3'})
mdb.models['CH3'].sections['Section-1'].setValues(material='CP1000', thickness=
    None)
mdb.jobs['CH3'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['CH3']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'D19-0462', 'handle': 0, 'jobName': 'CH3'})
mdb.jobs['CH3']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE INDEPENDENT VARIABLES MUST BE ARRANGED IN ASCENDING ORDER', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE OPTION *BOUNDARY,TYPE=DISPLACEMENT HAS BEEN USED; CHECK STATUS FILE BETWEEN STEPS FOR WARNINGS ON ANY JUMPS PRESCRIBED ACROSS THE STEPS IN DISPLACEMENT VALUES OF TRANSLATIONAL DOF. FOR ROTATIONAL DOF MAKE SURE THAT THERE ARE NO SUCH JUMPS. ALL JUMPS IN DISPLACEMENTS ACROSS STEPS ARE IGNORED', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\liuw7\\OneDrive\\03 Studies\\17 HiBa\\02 CP1000_Macro\\CH3.odb', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'CH3'})
mdb.jobs['CH3']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'CH3'})
del mdb.models['CH3'].materials['CP1000'].plastic
mdb.models['CH3'].materials['CP1000'].Plastic(table=((547.3187706, 0.0), (
    561.3449136, 5e-05), (589.0707033, 7e-05), (616.652144, 0.0001), (
    656.8709159, 0.00012), (683.0123178, 0.00015), (695.9660165, 0.00016), (
    721.2695576, 0.00018), (745.9669958, 0.00021), (757.8497493, 0.00025), (
    781.0406786, 0.00028), (792.1875965, 0.00031), (802.6010531, 0.00033), (
    825.1501316, 0.0004), (836.6886007, 0.0005), (846.5918057, 0.0006), (
    855.2550949, 0.0007), (862.9333441, 0.0008), (869.8042195, 0.0009), (
    875.9986899, 0.001), (915.7895779, 0.002), (936.535345, 0.003), (
    950.0382983, 0.004), (960.1576656, 0.005), (968.3939004, 0.006), (
    975.4212223, 0.007), (981.5897122, 0.008), (987.1062691, 0.009), (
    992.1061142, 0.01), (1026.652879, 0.02), (1048.26802, 0.03), (1064.270724, 
    0.04), (1077.078935, 0.05), (1087.807916, 0.06), (1097.068595, 0.07), (
    1105.233604, 0.08), (1112.547721, 0.09), (1119.180742, 0.1), (1125.25548, 
    0.11), (1130.86376, 0.12), (1136.076106, 0.13), (1140.947913, 0.14), (
    1145.523514, 0.15), (1149.838967, 0.16), (1153.924009, 0.17), (1157.803466, 
    0.18), (1161.498284, 0.19), (1165.026306, 0.2), (1168.402861, 0.21), (
    1171.641219, 0.22), (1174.752949, 0.23), (1177.748195, 0.24), (1180.63591, 
    0.25), (1183.424032, 0.26), (1186.119634, 0.27), (1188.729047, 0.28), (
    1191.257964, 0.29), (1193.711518, 0.3), (1196.094358, 0.31), (1198.410707, 
    0.32), (1200.664415, 0.33), (1202.858998, 0.34), (1204.99768, 0.35), (
    1207.083422, 0.36), (1209.118952, 0.37), (1211.106788, 0.38), (1213.04926, 
    0.39), (1214.948527, 0.4), (1216.806595, 0.41), (1218.625331, 0.42), (
    1220.406474, 0.43), (1222.151649, 0.44), (1223.862376, 0.45), (1225.540078, 
    0.46), (1227.186091, 0.47), (1228.801667, 0.48), (1230.387987, 0.49), (
    1231.946162, 0.5), (1233.477239, 0.51), (1234.982207, 0.52), (1236.462002, 
    0.53), (1237.917506, 0.54), (1239.349559, 0.55), (1240.758953, 0.56), (
    1242.146443, 0.57), (1243.512745, 0.58), (1244.858539, 0.59), (1246.184473, 
    0.6), (1247.491163, 0.61), (1248.779198, 0.62), (1250.049139, 0.63), (
    1251.301521, 0.64), (1252.536856, 0.65), (1253.755632, 0.66), (1254.958318, 
    0.67), (1256.145361, 0.68), (1257.31719, 0.69), (1258.474217, 0.7), (
    1259.616837, 0.71), (1260.745427, 0.72), (1261.860351, 0.73), (1262.961959, 
    0.74), (1264.050587, 0.75), (1265.126557, 0.76), (1266.190181, 0.77), (
    1267.241757, 0.78), (1268.281574, 0.79), (1269.309909, 0.8), (1270.327032, 
    0.81), (1271.3332, 0.82), (1272.328662, 0.83), (1273.31366, 0.84), (
    1274.288426, 0.85), (1275.253185, 0.86), (1276.208154, 0.87), (1277.153544, 
    0.88), (1278.089558, 0.89), (1279.016392, 0.9), (1279.934237, 0.91), (
    1280.843278, 0.92), (1281.743693, 0.93), (1282.635656, 0.94), (1283.519334, 
    0.95), (1284.394892, 0.96), (1285.262486, 0.97), (1286.12227, 0.98), (
    1286.974393, 0.99), (1287.819, 1.0), (1288.656231, 1.01), (1289.486223, 
    1.02), (1290.309108, 1.03), (1291.125015, 1.04), (1291.93407, 1.05), (
    1292.736395, 1.06), (1293.532108, 1.07), (1294.321325, 1.08), (1295.104159, 
    1.09), (1295.880718, 1.1), (1296.65111, 1.11), (1297.415438, 1.12), (
    1298.173804, 1.13), (1298.926306, 1.14), (1299.67304, 1.15), (1300.414101, 
    1.16), (1301.14958, 1.17), (1301.879565, 1.18), (1302.604145, 1.19), (
    1303.323403, 1.2), (1304.037423, 1.21), (1304.746286, 1.22), (1305.450072, 
    1.23), (1306.148856, 1.24), (1306.842715, 1.25), (1307.531722, 1.26), (
    1308.215949, 1.27), (1308.895467, 1.28), (1309.570345, 1.29), (1310.24065, 
    1.3), (1310.906447, 1.31), (1311.567801, 1.32), (1312.224776, 1.33), (
    1312.877432, 1.34), (1313.52583, 1.35), (1314.170028, 1.36), (1314.810086, 
    1.37), (1315.446059, 1.38), (1316.078002, 1.39), (1316.705971, 1.4), (
    1317.330017, 1.41), (1317.950193, 1.42), (1318.566551, 1.43), (1319.179139, 
    1.44), (1319.788008, 1.45), (1320.393205, 1.46), (1320.994777, 1.47), (
    1321.59277, 1.48), (1322.187229, 1.49), (1322.7782, 1.5), (1323.365725, 
    1.51), (1323.949847, 1.52), (1324.530608, 1.53), (1325.108049, 1.54), (
    1325.682211, 1.55), (1326.253133, 1.56), (1326.820854, 1.57), (1327.385412, 
    1.58), (1327.946845, 1.59), (1328.505189, 1.6), (1329.060481, 1.61), (
    1329.612756, 1.62), (1330.162049, 1.63), (1330.708393, 1.64), (1331.251824, 
    1.65), (1331.792374, 1.66), (1332.330075, 1.67), (1332.864959, 1.68), (
    1333.397059, 1.69), (1333.926403, 1.7), (1334.453024, 1.71), (1334.97695, 
    1.72), (1335.498211, 1.73), (1336.016837, 1.74), (1336.532854, 1.75), (
    1337.046292, 1.76), (1337.557177, 1.77), (1338.065537, 1.78), (1338.571398, 
    1.79), (1339.074787, 1.8), (1339.575728, 1.81), (1340.074248, 1.82), (
    1340.570371, 1.83), (1341.064122, 1.84), (1341.555525, 1.85), (1342.044604, 
    1.86), (1342.531381, 1.87), (1343.015881, 1.88), (1343.498126, 1.89), (
    1343.978138, 1.9), (1344.455939, 1.91), (1344.931551, 1.92), (1345.404995, 
    1.93), (1345.876293, 1.94), (1346.345465, 1.95), (1346.81253, 1.96), (
    1347.277511, 1.97), (1347.740426, 1.98), (1348.201295, 1.99), (1348.660136, 
    2.0), (1349.116971, 2.01), (1349.571815, 2.02), (1350.02469, 2.03), (
    1350.475611, 2.04), (1350.924598, 2.05), (1351.371669, 2.06), (1351.816839, 
    2.07), (1352.260128, 2.08), (1352.701551, 2.09), (1353.141125, 2.1), (
    1353.578867, 2.11), (1354.014794, 2.12), (1354.44892, 2.13), (1354.881263, 
    2.14), (1355.311837, 2.15), (1355.740659, 2.16), (1356.167742, 2.17), (
    1356.593103, 2.18), (1357.016755, 2.19), (1357.438715, 2.2), (1357.858995, 
    2.21), (1358.277611, 2.22), (1358.694576, 2.23), (1359.109904, 2.24), (
    1359.52361, 2.25), (1359.935705, 2.26), (1360.346205, 2.27), (1360.755121, 
    2.28), (1361.162467, 2.29), (1361.568256, 2.3), (1361.972501, 2.31), (
    1362.375213, 2.32), (1362.776406, 2.33), (1363.176092, 2.34), (1363.574282, 
    2.35), (1363.970989, 2.36), (1364.366224, 2.37), (1364.759999, 2.38), (
    1365.152325, 2.39), (1365.543215, 2.4), (1365.932678, 2.41), (1366.320727, 
    2.42), (1366.707371, 2.43), (1367.092623, 2.44), (1367.476492, 2.45), (
    1367.85899, 2.46), (1368.240126, 2.47), (1368.619911, 2.48), (1368.998355, 
    2.49), (1369.375469, 2.5), (1369.751262, 2.51), (1370.125744, 2.52), (
    1370.498924, 2.53), (1370.870814, 2.54), (1371.241421, 2.55), (1371.610756, 
    2.56), (1371.978827, 2.57), (1372.345645, 2.58), (1372.711217, 2.59), (
    1373.075554, 2.6), (1373.438663, 2.61), (1373.800555, 2.62), (1374.161237, 
    2.63), (1374.520718, 2.64), (1374.879007, 2.65), (1375.236111, 2.66), (
    1375.592041, 2.67), (1375.946802, 2.68), (1376.300405, 2.69), (1376.652857, 
    2.7), (1377.004165, 2.71), (1377.354339, 2.72), (1377.703385, 2.73), (
    1378.051311, 2.74), (1378.398126, 2.75), (1378.743836, 2.76), (1379.088449, 
    2.77), (1379.431973, 2.78), (1379.774414, 2.79), (1380.115781, 2.8), (
    1380.45608, 2.81), (1380.795318, 2.82), (1381.133503, 2.83), (1381.470642, 
    2.84), (1381.806741, 2.85), (1382.141807, 2.86), (1382.475847, 2.87), (
    1382.808868, 2.88), (1383.140876, 2.89), (1383.471878, 2.9), (1383.80188, 
    2.91), (1384.130889, 2.92), (1384.458912, 2.93), (1384.785954, 2.94), (
    1385.112022, 2.95), (1385.437121, 2.96), (1385.761259, 2.97), (1386.084441, 
    2.98), (1386.406673, 2.99), (1386.727962, 3.0)))
mdb.jobs['CH3'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['CH3']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'D19-0462', 'handle': 0, 'jobName': 'CH3'})
mdb.jobs['CH3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE OPTION *BOUNDARY,TYPE=DISPLACEMENT HAS BEEN USED; CHECK STATUS FILE BETWEEN STEPS FOR WARNINGS ON ANY JUMPS PRESCRIBED ACROSS THE STEPS IN DISPLACEMENT VALUES OF TRANSLATIONAL DOF. FOR ROTATIONAL DOF MAKE SURE THAT THERE ARE NO SUCH JUMPS. ALL JUMPS IN DISPLACEMENTS ACROSS STEPS ARE IGNORED', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'CH3'})
mdb.jobs['CH3']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'D19-0462', 'handle': 27076, 'jobName': 'CH3'})
mdb.jobs['CH3']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 2 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'Failed to regularize material data for material CP1000. Please check your input data to see if they meet both criteria as explained in "MATERIAL DATA DEFINITION" section of Abaqus Analysis User Manual. In general, regularization is more difficult if the smallest interval defined by the user is small compared to the range of the independent variable.', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(ABORTED, {'phase': PACKAGER_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'CH3'})
mdb.jobs['CH3']._Message(ERROR, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'CH3'})
mdb.models['CH3'].materials['CP1000'].plastic.setValues(table=((547.3187706, 
    0.0), (616.652144, 0.0001), (656.8709159, 0.00012), (683.0123178, 0.00015), 
    (695.9660165, 0.00016), (721.2695576, 0.00018), (745.9669958, 0.00021), (
    757.8497493, 0.00025), (781.0406786, 0.00028), (792.1875965, 0.00031), (
    802.6010531, 0.00033), (825.1501316, 0.0004), (836.6886007, 0.0005), (
    846.5918057, 0.0006), (855.2550949, 0.0007), (862.9333441, 0.0008), (
    869.8042195, 0.0009), (875.9986899, 0.001), (915.7895779, 0.002), (
    936.535345, 0.003), (950.0382983, 0.004), (960.1576656, 0.005), (
    968.3939004, 0.006), (975.4212223, 0.007), (981.5897122, 0.008), (
    987.1062691, 0.009), (992.1061142, 0.01), (1026.652879, 0.02), (1048.26802, 
    0.03), (1064.270724, 0.04), (1077.078935, 0.05), (1087.807916, 0.06), (
    1097.068595, 0.07), (1105.233604, 0.08), (1112.547721, 0.09), (1119.180742, 
    0.1), (1125.25548, 0.11), (1130.86376, 0.12), (1136.076106, 0.13), (
    1140.947913, 0.14), (1145.523514, 0.15), (1149.838967, 0.16), (1153.924009, 
    0.17), (1157.803466, 0.18), (1161.498284, 0.19), (1165.026306, 0.2), (
    1168.402861, 0.21), (1171.641219, 0.22), (1174.752949, 0.23), (1177.748195, 
    0.24), (1180.63591, 0.25), (1183.424032, 0.26), (1186.119634, 0.27), (
    1188.729047, 0.28), (1191.257964, 0.29), (1193.711518, 0.3), (1196.094358, 
    0.31), (1198.410707, 0.32), (1200.664415, 0.33), (1202.858998, 0.34), (
    1204.99768, 0.35), (1207.083422, 0.36), (1209.118952, 0.37), (1211.106788, 
    0.38), (1213.04926, 0.39), (1214.948527, 0.4), (1216.806595, 0.41), (
    1218.625331, 0.42), (1220.406474, 0.43), (1222.151649, 0.44), (1223.862376, 
    0.45), (1225.540078, 0.46), (1227.186091, 0.47), (1228.801667, 0.48), (
    1230.387987, 0.49), (1231.946162, 0.5), (1233.477239, 0.51), (1234.982207, 
    0.52), (1236.462002, 0.53), (1237.917506, 0.54), (1239.349559, 0.55), (
    1240.758953, 0.56), (1242.146443, 0.57), (1243.512745, 0.58), (1244.858539, 
    0.59), (1246.184473, 0.6), (1247.491163, 0.61), (1248.779198, 0.62), (
    1250.049139, 0.63), (1251.301521, 0.64), (1252.536856, 0.65), (1253.755632, 
    0.66), (1254.958318, 0.67), (1256.145361, 0.68), (1257.31719, 0.69), (
    1258.474217, 0.7), (1259.616837, 0.71), (1260.745427, 0.72), (1261.860351, 
    0.73), (1262.961959, 0.74), (1264.050587, 0.75), (1265.126557, 0.76), (
    1266.190181, 0.77), (1267.241757, 0.78), (1268.281574, 0.79), (1269.309909, 
    0.8), (1270.327032, 0.81), (1271.3332, 0.82), (1272.328662, 0.83), (
    1273.31366, 0.84), (1274.288426, 0.85), (1275.253185, 0.86), (1276.208154, 
    0.87), (1277.153544, 0.88), (1278.089558, 0.89), (1279.016392, 0.9), (
    1279.934237, 0.91), (1280.843278, 0.92), (1281.743693, 0.93), (1282.635656, 
    0.94), (1283.519334, 0.95), (1284.394892, 0.96), (1285.262486, 0.97), (
    1286.12227, 0.98), (1286.974393, 0.99), (1287.819, 1.0), (1288.656231, 
    1.01), (1289.486223, 1.02), (1290.309108, 1.03), (1291.125015, 1.04), (
    1291.93407, 1.05), (1292.736395, 1.06), (1293.532108, 1.07), (1294.321325, 
    1.08), (1295.104159, 1.09), (1295.880718, 1.1), (1296.65111, 1.11), (
    1297.415438, 1.12), (1298.173804, 1.13), (1298.926306, 1.14), (1299.67304, 
    1.15), (1300.414101, 1.16), (1301.14958, 1.17), (1301.879565, 1.18), (
    1302.604145, 1.19), (1303.323403, 1.2), (1304.037423, 1.21), (1304.746286, 
    1.22), (1305.450072, 1.23), (1306.148856, 1.24), (1306.842715, 1.25), (
    1307.531722, 1.26), (1308.215949, 1.27), (1308.895467, 1.28), (1309.570345, 
    1.29), (1310.24065, 1.3), (1310.906447, 1.31), (1311.567801, 1.32), (
    1312.224776, 1.33), (1312.877432, 1.34), (1313.52583, 1.35), (1314.170028, 
    1.36), (1314.810086, 1.37), (1315.446059, 1.38), (1316.078002, 1.39), (
    1316.705971, 1.4), (1317.330017, 1.41), (1317.950193, 1.42), (1318.566551, 
    1.43), (1319.179139, 1.44), (1319.788008, 1.45), (1320.393205, 1.46), (
    1320.994777, 1.47), (1321.59277, 1.48), (1322.187229, 1.49), (1322.7782, 
    1.5), (1323.365725, 1.51), (1323.949847, 1.52), (1324.530608, 1.53), (
    1325.108049, 1.54), (1325.682211, 1.55), (1326.253133, 1.56), (1326.820854, 
    1.57), (1327.385412, 1.58), (1327.946845, 1.59), (1328.505189, 1.6), (
    1329.060481, 1.61), (1329.612756, 1.62), (1330.162049, 1.63), (1330.708393, 
    1.64), (1331.251824, 1.65), (1331.792374, 1.66), (1332.330075, 1.67), (
    1332.864959, 1.68), (1333.397059, 1.69), (1333.926403, 1.7), (1334.453024, 
    1.71), (1334.97695, 1.72), (1335.498211, 1.73), (1336.016837, 1.74), (
    1336.532854, 1.75), (1337.046292, 1.76), (1337.557177, 1.77), (1338.065537, 
    1.78), (1338.571398, 1.79), (1339.074787, 1.8), (1339.575728, 1.81), (
    1340.074248, 1.82), (1340.570371, 1.83), (1341.064122, 1.84), (1341.555525, 
    1.85), (1342.044604, 1.86), (1342.531381, 1.87), (1343.015881, 1.88), (
    1343.498126, 1.89), (1343.978138, 1.9), (1344.455939, 1.91), (1344.931551, 
    1.92), (1345.404995, 1.93), (1345.876293, 1.94), (1346.345465, 1.95), (
    1346.81253, 1.96), (1347.277511, 1.97), (1347.740426, 1.98), (1348.201295, 
    1.99), (1348.660136, 2.0), (1349.116971, 2.01), (1349.571815, 2.02), (
    1350.02469, 2.03), (1350.475611, 2.04), (1350.924598, 2.05), (1351.371669, 
    2.06), (1351.816839, 2.07), (1352.260128, 2.08), (1352.701551, 2.09), (
    1353.141125, 2.1), (1353.578867, 2.11), (1354.014794, 2.12), (1354.44892, 
    2.13), (1354.881263, 2.14), (1355.311837, 2.15), (1355.740659, 2.16), (
    1356.167742, 2.17), (1356.593103, 2.18), (1357.016755, 2.19), (1357.438715, 
    2.2), (1357.858995, 2.21), (1358.277611, 2.22), (1358.694576, 2.23), (
    1359.109904, 2.24), (1359.52361, 2.25), (1359.935705, 2.26), (1360.346205, 
    2.27), (1360.755121, 2.28), (1361.162467, 2.29), (1361.568256, 2.3), (
    1361.972501, 2.31), (1362.375213, 2.32), (1362.776406, 2.33), (1363.176092, 
    2.34), (1363.574282, 2.35), (1363.970989, 2.36), (1364.366224, 2.37), (
    1364.759999, 2.38), (1365.152325, 2.39), (1365.543215, 2.4), (1365.932678, 
    2.41), (1366.320727, 2.42), (1366.707371, 2.43), (1367.092623, 2.44), (
    1367.476492, 2.45), (1367.85899, 2.46), (1368.240126, 2.47), (1368.619911, 
    2.48), (1368.998355, 2.49), (1369.375469, 2.5), (1369.751262, 2.51), (
    1370.125744, 2.52), (1370.498924, 2.53), (1370.870814, 2.54), (1371.241421, 
    2.55), (1371.610756, 2.56), (1371.978827, 2.57), (1372.345645, 2.58), (
    1372.711217, 2.59), (1373.075554, 2.6), (1373.438663, 2.61), (1373.800555, 
    2.62), (1374.161237, 2.63), (1374.520718, 2.64), (1374.879007, 2.65), (
    1375.236111, 2.66), (1375.592041, 2.67), (1375.946802, 2.68), (1376.300405, 
    2.69), (1376.652857, 2.7), (1377.004165, 2.71), (1377.354339, 2.72), (
    1377.703385, 2.73), (1378.051311, 2.74), (1378.398126, 2.75), (1378.743836, 
    2.76), (1379.088449, 2.77), (1379.431973, 2.78), (1379.774414, 2.79), (
    1380.115781, 2.8), (1380.45608, 2.81), (1380.795318, 2.82), (1381.133503, 
    2.83), (1381.470642, 2.84), (1381.806741, 2.85), (1382.141807, 2.86), (
    1382.475847, 2.87), (1382.808868, 2.88), (1383.140876, 2.89), (1383.471878, 
    2.9), (1383.80188, 2.91), (1384.130889, 2.92), (1384.458912, 2.93), (
    1384.785954, 2.94), (1385.112022, 2.95), (1385.437121, 2.96), (1385.761259, 
    2.97), (1386.084441, 2.98), (1386.406673, 2.99), (1386.727962, 3.0)))
mdb.jobs['CH3'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['CH3']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'D19-0462', 'handle': 0, 'jobName': 'CH3'})
mdb.jobs['CH3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE OPTION *BOUNDARY,TYPE=DISPLACEMENT HAS BEEN USED; CHECK STATUS FILE BETWEEN STEPS FOR WARNINGS ON ANY JUMPS PRESCRIBED ACROSS THE STEPS IN DISPLACEMENT VALUES OF TRANSLATIONAL DOF. FOR ROTATIONAL DOF MAKE SURE THAT THERE ARE NO SUCH JUMPS. ALL JUMPS IN DISPLACEMENTS ACROSS STEPS ARE IGNORED', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'CH3'})
mdb.jobs['CH3']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'D19-0462', 'handle': 5396, 'jobName': 'CH3'})
mdb.jobs['CH3']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 2 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'Failed to regularize material data for material CP1000. Please check your input data to see if they meet both criteria as explained in "MATERIAL DATA DEFINITION" section of Abaqus Analysis User Manual. In general, regularization is more difficult if the smallest interval defined by the user is small compared to the range of the independent variable.', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(ABORTED, {'phase': PACKAGER_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'CH3'})
mdb.jobs['CH3']._Message(ERROR, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'CH3'})
mdb.models['CH3'].materials['CP1000'].plastic.setValues(table=((547.3187706, 
    0.0), (616.652144, 0.0001), (683.0123178, 0.00015), (745.9669958, 0.00021), 
    (757.8497493, 0.00025), (792.1875965, 0.00031), (802.6010531, 0.00033), (
    825.1501316, 0.0004), (836.6886007, 0.0005), (846.5918057, 0.0006), (
    855.2550949, 0.0007), (862.9333441, 0.0008), (869.8042195, 0.0009), (
    875.9986899, 0.001), (915.7895779, 0.002), (936.535345, 0.003), (
    950.0382983, 0.004), (960.1576656, 0.005), (968.3939004, 0.006), (
    975.4212223, 0.007), (981.5897122, 0.008), (987.1062691, 0.009), (
    992.1061142, 0.01), (1026.652879, 0.02), (1048.26802, 0.03), (1064.270724, 
    0.04), (1077.078935, 0.05), (1087.807916, 0.06), (1097.068595, 0.07), (
    1105.233604, 0.08), (1112.547721, 0.09), (1119.180742, 0.1), (1125.25548, 
    0.11), (1130.86376, 0.12), (1136.076106, 0.13), (1140.947913, 0.14), (
    1145.523514, 0.15), (1149.838967, 0.16), (1153.924009, 0.17), (1157.803466, 
    0.18), (1161.498284, 0.19), (1165.026306, 0.2), (1168.402861, 0.21), (
    1171.641219, 0.22), (1174.752949, 0.23), (1177.748195, 0.24), (1180.63591, 
    0.25), (1183.424032, 0.26), (1186.119634, 0.27), (1188.729047, 0.28), (
    1191.257964, 0.29), (1193.711518, 0.3), (1196.094358, 0.31), (1198.410707, 
    0.32), (1200.664415, 0.33), (1202.858998, 0.34), (1204.99768, 0.35), (
    1207.083422, 0.36), (1209.118952, 0.37), (1211.106788, 0.38), (1213.04926, 
    0.39), (1214.948527, 0.4), (1216.806595, 0.41), (1218.625331, 0.42), (
    1220.406474, 0.43), (1222.151649, 0.44), (1223.862376, 0.45), (1225.540078, 
    0.46), (1227.186091, 0.47), (1228.801667, 0.48), (1230.387987, 0.49), (
    1231.946162, 0.5), (1233.477239, 0.51), (1234.982207, 0.52), (1236.462002, 
    0.53), (1237.917506, 0.54), (1239.349559, 0.55), (1240.758953, 0.56), (
    1242.146443, 0.57), (1243.512745, 0.58), (1244.858539, 0.59), (1246.184473, 
    0.6), (1247.491163, 0.61), (1248.779198, 0.62), (1250.049139, 0.63), (
    1251.301521, 0.64), (1252.536856, 0.65), (1253.755632, 0.66), (1254.958318, 
    0.67), (1256.145361, 0.68), (1257.31719, 0.69), (1258.474217, 0.7), (
    1259.616837, 0.71), (1260.745427, 0.72), (1261.860351, 0.73), (1262.961959, 
    0.74), (1264.050587, 0.75), (1265.126557, 0.76), (1266.190181, 0.77), (
    1267.241757, 0.78), (1268.281574, 0.79), (1269.309909, 0.8), (1270.327032, 
    0.81), (1271.3332, 0.82), (1272.328662, 0.83), (1273.31366, 0.84), (
    1274.288426, 0.85), (1275.253185, 0.86), (1276.208154, 0.87), (1277.153544, 
    0.88), (1278.089558, 0.89), (1279.016392, 0.9), (1279.934237, 0.91), (
    1280.843278, 0.92), (1281.743693, 0.93), (1282.635656, 0.94), (1283.519334, 
    0.95), (1284.394892, 0.96), (1285.262486, 0.97), (1286.12227, 0.98), (
    1286.974393, 0.99), (1287.819, 1.0), (1288.656231, 1.01), (1289.486223, 
    1.02), (1290.309108, 1.03), (1291.125015, 1.04), (1291.93407, 1.05), (
    1292.736395, 1.06), (1293.532108, 1.07), (1294.321325, 1.08), (1295.104159, 
    1.09), (1295.880718, 1.1), (1296.65111, 1.11), (1297.415438, 1.12), (
    1298.173804, 1.13), (1298.926306, 1.14), (1299.67304, 1.15), (1300.414101, 
    1.16), (1301.14958, 1.17), (1301.879565, 1.18), (1302.604145, 1.19), (
    1303.323403, 1.2), (1304.037423, 1.21), (1304.746286, 1.22), (1305.450072, 
    1.23), (1306.148856, 1.24), (1306.842715, 1.25), (1307.531722, 1.26), (
    1308.215949, 1.27), (1308.895467, 1.28), (1309.570345, 1.29), (1310.24065, 
    1.3), (1310.906447, 1.31), (1311.567801, 1.32), (1312.224776, 1.33), (
    1312.877432, 1.34), (1313.52583, 1.35), (1314.170028, 1.36), (1314.810086, 
    1.37), (1315.446059, 1.38), (1316.078002, 1.39), (1316.705971, 1.4), (
    1317.330017, 1.41), (1317.950193, 1.42), (1318.566551, 1.43), (1319.179139, 
    1.44), (1319.788008, 1.45), (1320.393205, 1.46), (1320.994777, 1.47), (
    1321.59277, 1.48), (1322.187229, 1.49), (1322.7782, 1.5), (1323.365725, 
    1.51), (1323.949847, 1.52), (1324.530608, 1.53), (1325.108049, 1.54), (
    1325.682211, 1.55), (1326.253133, 1.56), (1326.820854, 1.57), (1327.385412, 
    1.58), (1327.946845, 1.59), (1328.505189, 1.6), (1329.060481, 1.61), (
    1329.612756, 1.62), (1330.162049, 1.63), (1330.708393, 1.64), (1331.251824, 
    1.65), (1331.792374, 1.66), (1332.330075, 1.67), (1332.864959, 1.68), (
    1333.397059, 1.69), (1333.926403, 1.7), (1334.453024, 1.71), (1334.97695, 
    1.72), (1335.498211, 1.73), (1336.016837, 1.74), (1336.532854, 1.75), (
    1337.046292, 1.76), (1337.557177, 1.77), (1338.065537, 1.78), (1338.571398, 
    1.79), (1339.074787, 1.8), (1339.575728, 1.81), (1340.074248, 1.82), (
    1340.570371, 1.83), (1341.064122, 1.84), (1341.555525, 1.85), (1342.044604, 
    1.86), (1342.531381, 1.87), (1343.015881, 1.88), (1343.498126, 1.89), (
    1343.978138, 1.9), (1344.455939, 1.91), (1344.931551, 1.92), (1345.404995, 
    1.93), (1345.876293, 1.94), (1346.345465, 1.95), (1346.81253, 1.96), (
    1347.277511, 1.97), (1347.740426, 1.98), (1348.201295, 1.99), (1348.660136, 
    2.0), (1349.116971, 2.01), (1349.571815, 2.02), (1350.02469, 2.03), (
    1350.475611, 2.04), (1350.924598, 2.05), (1351.371669, 2.06), (1351.816839, 
    2.07), (1352.260128, 2.08), (1352.701551, 2.09), (1353.141125, 2.1), (
    1353.578867, 2.11), (1354.014794, 2.12), (1354.44892, 2.13), (1354.881263, 
    2.14), (1355.311837, 2.15), (1355.740659, 2.16), (1356.167742, 2.17), (
    1356.593103, 2.18), (1357.016755, 2.19), (1357.438715, 2.2), (1357.858995, 
    2.21), (1358.277611, 2.22), (1358.694576, 2.23), (1359.109904, 2.24), (
    1359.52361, 2.25), (1359.935705, 2.26), (1360.346205, 2.27), (1360.755121, 
    2.28), (1361.162467, 2.29), (1361.568256, 2.3), (1361.972501, 2.31), (
    1362.375213, 2.32), (1362.776406, 2.33), (1363.176092, 2.34), (1363.574282, 
    2.35), (1363.970989, 2.36), (1364.366224, 2.37), (1364.759999, 2.38), (
    1365.152325, 2.39), (1365.543215, 2.4), (1365.932678, 2.41), (1366.320727, 
    2.42), (1366.707371, 2.43), (1367.092623, 2.44), (1367.476492, 2.45), (
    1367.85899, 2.46), (1368.240126, 2.47), (1368.619911, 2.48), (1368.998355, 
    2.49), (1369.375469, 2.5), (1369.751262, 2.51), (1370.125744, 2.52), (
    1370.498924, 2.53), (1370.870814, 2.54), (1371.241421, 2.55), (1371.610756, 
    2.56), (1371.978827, 2.57), (1372.345645, 2.58), (1372.711217, 2.59), (
    1373.075554, 2.6), (1373.438663, 2.61), (1373.800555, 2.62), (1374.161237, 
    2.63), (1374.520718, 2.64), (1374.879007, 2.65), (1375.236111, 2.66), (
    1375.592041, 2.67), (1375.946802, 2.68), (1376.300405, 2.69), (1376.652857, 
    2.7), (1377.004165, 2.71), (1377.354339, 2.72), (1377.703385, 2.73), (
    1378.051311, 2.74), (1378.398126, 2.75), (1378.743836, 2.76), (1379.088449, 
    2.77), (1379.431973, 2.78), (1379.774414, 2.79), (1380.115781, 2.8), (
    1380.45608, 2.81), (1380.795318, 2.82), (1381.133503, 2.83), (1381.470642, 
    2.84), (1381.806741, 2.85), (1382.141807, 2.86), (1382.475847, 2.87), (
    1382.808868, 2.88), (1383.140876, 2.89), (1383.471878, 2.9), (1383.80188, 
    2.91), (1384.130889, 2.92), (1384.458912, 2.93), (1384.785954, 2.94), (
    1385.112022, 2.95), (1385.437121, 2.96), (1385.761259, 2.97), (1386.084441, 
    2.98), (1386.406673, 2.99), (1386.727962, 3.0)))
mdb.jobs['CH3'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['CH3']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'D19-0462', 'handle': 0, 'jobName': 'CH3'})
mdb.jobs['CH3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE OPTION *BOUNDARY,TYPE=DISPLACEMENT HAS BEEN USED; CHECK STATUS FILE BETWEEN STEPS FOR WARNINGS ON ANY JUMPS PRESCRIBED ACROSS THE STEPS IN DISPLACEMENT VALUES OF TRANSLATIONAL DOF. FOR ROTATIONAL DOF MAKE SURE THAT THERE ARE NO SUCH JUMPS. ALL JUMPS IN DISPLACEMENTS ACROSS STEPS ARE IGNORED', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'CH3'})
mdb.jobs['CH3']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'D19-0462', 'handle': 27288, 'jobName': 'CH3'})
mdb.jobs['CH3']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 2 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'Failed to regularize material data for material CP1000. Please check your input data to see if they meet both criteria as explained in "MATERIAL DATA DEFINITION" section of Abaqus Analysis User Manual. In general, regularization is more difficult if the smallest interval defined by the user is small compared to the range of the independent variable.', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(ABORTED, {'phase': PACKAGER_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'CH3'})
mdb.jobs['CH3']._Message(ERROR, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'CH3'})
mdb.models['CH3'].materials['CP1000'].plastic.setValues(table=((547.3187706, 
    0.0), (616.652144, 0.0001), (683.0123178, 0.00015), (745.9669958, 0.00021), 
    (757.8497493, 0.00025), (792.1875965, 0.00031), (825.1501316, 0.0004), (
    836.6886007, 0.0005), (846.5918057, 0.0006), (855.2550949, 0.0007), (
    862.9333441, 0.0008), (869.8042195, 0.0009), (875.9986899, 0.001), (
    915.7895779, 0.002), (936.535345, 0.003), (950.0382983, 0.004), (
    960.1576656, 0.005), (968.3939004, 0.006), (975.4212223, 0.007), (
    981.5897122, 0.008), (987.1062691, 0.009), (992.1061142, 0.01), (
    1026.652879, 0.02), (1048.26802, 0.03), (1064.270724, 0.04), (1077.078935, 
    0.05), (1087.807916, 0.06), (1097.068595, 0.07), (1105.233604, 0.08), (
    1112.547721, 0.09), (1119.180742, 0.1), (1125.25548, 0.11), (1130.86376, 
    0.12), (1136.076106, 0.13), (1140.947913, 0.14), (1145.523514, 0.15), (
    1149.838967, 0.16), (1153.924009, 0.17), (1157.803466, 0.18), (1161.498284, 
    0.19), (1165.026306, 0.2), (1168.402861, 0.21), (1171.641219, 0.22), (
    1174.752949, 0.23), (1177.748195, 0.24), (1180.63591, 0.25), (1183.424032, 
    0.26), (1186.119634, 0.27), (1188.729047, 0.28), (1191.257964, 0.29), (
    1193.711518, 0.3), (1196.094358, 0.31), (1198.410707, 0.32), (1200.664415, 
    0.33), (1202.858998, 0.34), (1204.99768, 0.35), (1207.083422, 0.36), (
    1209.118952, 0.37), (1211.106788, 0.38), (1213.04926, 0.39), (1214.948527, 
    0.4), (1216.806595, 0.41), (1218.625331, 0.42), (1220.406474, 0.43), (
    1222.151649, 0.44), (1223.862376, 0.45), (1225.540078, 0.46), (1227.186091, 
    0.47), (1228.801667, 0.48), (1230.387987, 0.49), (1231.946162, 0.5), (
    1233.477239, 0.51), (1234.982207, 0.52), (1236.462002, 0.53), (1237.917506, 
    0.54), (1239.349559, 0.55), (1240.758953, 0.56), (1242.146443, 0.57), (
    1243.512745, 0.58), (1244.858539, 0.59), (1246.184473, 0.6), (1247.491163, 
    0.61), (1248.779198, 0.62), (1250.049139, 0.63), (1251.301521, 0.64), (
    1252.536856, 0.65), (1253.755632, 0.66), (1254.958318, 0.67), (1256.145361, 
    0.68), (1257.31719, 0.69), (1258.474217, 0.7), (1259.616837, 0.71), (
    1260.745427, 0.72), (1261.860351, 0.73), (1262.961959, 0.74), (1264.050587, 
    0.75), (1265.126557, 0.76), (1266.190181, 0.77), (1267.241757, 0.78), (
    1268.281574, 0.79), (1269.309909, 0.8), (1270.327032, 0.81), (1271.3332, 
    0.82), (1272.328662, 0.83), (1273.31366, 0.84), (1274.288426, 0.85), (
    1275.253185, 0.86), (1276.208154, 0.87), (1277.153544, 0.88), (1278.089558, 
    0.89), (1279.016392, 0.9), (1279.934237, 0.91), (1280.843278, 0.92), (
    1281.743693, 0.93), (1282.635656, 0.94), (1283.519334, 0.95), (1284.394892, 
    0.96), (1285.262486, 0.97), (1286.12227, 0.98), (1286.974393, 0.99), (
    1287.819, 1.0), (1288.656231, 1.01), (1289.486223, 1.02), (1290.309108, 
    1.03), (1291.125015, 1.04), (1291.93407, 1.05), (1292.736395, 1.06), (
    1293.532108, 1.07), (1294.321325, 1.08), (1295.104159, 1.09), (1295.880718, 
    1.1), (1296.65111, 1.11), (1297.415438, 1.12), (1298.173804, 1.13), (
    1298.926306, 1.14), (1299.67304, 1.15), (1300.414101, 1.16), (1301.14958, 
    1.17), (1301.879565, 1.18), (1302.604145, 1.19), (1303.323403, 1.2), (
    1304.037423, 1.21), (1304.746286, 1.22), (1305.450072, 1.23), (1306.148856, 
    1.24), (1306.842715, 1.25), (1307.531722, 1.26), (1308.215949, 1.27), (
    1308.895467, 1.28), (1309.570345, 1.29), (1310.24065, 1.3), (1310.906447, 
    1.31), (1311.567801, 1.32), (1312.224776, 1.33), (1312.877432, 1.34), (
    1313.52583, 1.35), (1314.170028, 1.36), (1314.810086, 1.37), (1315.446059, 
    1.38), (1316.078002, 1.39), (1316.705971, 1.4), (1317.330017, 1.41), (
    1317.950193, 1.42), (1318.566551, 1.43), (1319.179139, 1.44), (1319.788008, 
    1.45), (1320.393205, 1.46), (1320.994777, 1.47), (1321.59277, 1.48), (
    1322.187229, 1.49), (1322.7782, 1.5), (1323.365725, 1.51), (1323.949847, 
    1.52), (1324.530608, 1.53), (1325.108049, 1.54), (1325.682211, 1.55), (
    1326.253133, 1.56), (1326.820854, 1.57), (1327.385412, 1.58), (1327.946845, 
    1.59), (1328.505189, 1.6), (1329.060481, 1.61), (1329.612756, 1.62), (
    1330.162049, 1.63), (1330.708393, 1.64), (1331.251824, 1.65), (1331.792374, 
    1.66), (1332.330075, 1.67), (1332.864959, 1.68), (1333.397059, 1.69), (
    1333.926403, 1.7), (1334.453024, 1.71), (1334.97695, 1.72), (1335.498211, 
    1.73), (1336.016837, 1.74), (1336.532854, 1.75), (1337.046292, 1.76), (
    1337.557177, 1.77), (1338.065537, 1.78), (1338.571398, 1.79), (1339.074787, 
    1.8), (1339.575728, 1.81), (1340.074248, 1.82), (1340.570371, 1.83), (
    1341.064122, 1.84), (1341.555525, 1.85), (1342.044604, 1.86), (1342.531381, 
    1.87), (1343.015881, 1.88), (1343.498126, 1.89), (1343.978138, 1.9), (
    1344.455939, 1.91), (1344.931551, 1.92), (1345.404995, 1.93), (1345.876293, 
    1.94), (1346.345465, 1.95), (1346.81253, 1.96), (1347.277511, 1.97), (
    1347.740426, 1.98), (1348.201295, 1.99), (1348.660136, 2.0), (1349.116971, 
    2.01), (1349.571815, 2.02), (1350.02469, 2.03), (1350.475611, 2.04), (
    1350.924598, 2.05), (1351.371669, 2.06), (1351.816839, 2.07), (1352.260128, 
    2.08), (1352.701551, 2.09), (1353.141125, 2.1), (1353.578867, 2.11), (
    1354.014794, 2.12), (1354.44892, 2.13), (1354.881263, 2.14), (1355.311837, 
    2.15), (1355.740659, 2.16), (1356.167742, 2.17), (1356.593103, 2.18), (
    1357.016755, 2.19), (1357.438715, 2.2), (1357.858995, 2.21), (1358.277611, 
    2.22), (1358.694576, 2.23), (1359.109904, 2.24), (1359.52361, 2.25), (
    1359.935705, 2.26), (1360.346205, 2.27), (1360.755121, 2.28), (1361.162467, 
    2.29), (1361.568256, 2.3), (1361.972501, 2.31), (1362.375213, 2.32), (
    1362.776406, 2.33), (1363.176092, 2.34), (1363.574282, 2.35), (1363.970989, 
    2.36), (1364.366224, 2.37), (1364.759999, 2.38), (1365.152325, 2.39), (
    1365.543215, 2.4), (1365.932678, 2.41), (1366.320727, 2.42), (1366.707371, 
    2.43), (1367.092623, 2.44), (1367.476492, 2.45), (1367.85899, 2.46), (
    1368.240126, 2.47), (1368.619911, 2.48), (1368.998355, 2.49), (1369.375469, 
    2.5), (1369.751262, 2.51), (1370.125744, 2.52), (1370.498924, 2.53), (
    1370.870814, 2.54), (1371.241421, 2.55), (1371.610756, 2.56), (1371.978827, 
    2.57), (1372.345645, 2.58), (1372.711217, 2.59), (1373.075554, 2.6), (
    1373.438663, 2.61), (1373.800555, 2.62), (1374.161237, 2.63), (1374.520718, 
    2.64), (1374.879007, 2.65), (1375.236111, 2.66), (1375.592041, 2.67), (
    1375.946802, 2.68), (1376.300405, 2.69), (1376.652857, 2.7), (1377.004165, 
    2.71), (1377.354339, 2.72), (1377.703385, 2.73), (1378.051311, 2.74), (
    1378.398126, 2.75), (1378.743836, 2.76), (1379.088449, 2.77), (1379.431973, 
    2.78), (1379.774414, 2.79), (1380.115781, 2.8), (1380.45608, 2.81), (
    1380.795318, 2.82), (1381.133503, 2.83), (1381.470642, 2.84), (1381.806741, 
    2.85), (1382.141807, 2.86), (1382.475847, 2.87), (1382.808868, 2.88), (
    1383.140876, 2.89), (1383.471878, 2.9), (1383.80188, 2.91), (1384.130889, 
    2.92), (1384.458912, 2.93), (1384.785954, 2.94), (1385.112022, 2.95), (
    1385.437121, 2.96), (1385.761259, 2.97), (1386.084441, 2.98), (1386.406673, 
    2.99), (1386.727962, 3.0)))
mdb.jobs['CH3'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['CH3']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'D19-0462', 'handle': 0, 'jobName': 'CH3'})
mdb.jobs['CH3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE OPTION *BOUNDARY,TYPE=DISPLACEMENT HAS BEEN USED; CHECK STATUS FILE BETWEEN STEPS FOR WARNINGS ON ANY JUMPS PRESCRIBED ACROSS THE STEPS IN DISPLACEMENT VALUES OF TRANSLATIONAL DOF. FOR ROTATIONAL DOF MAKE SURE THAT THERE ARE NO SUCH JUMPS. ALL JUMPS IN DISPLACEMENTS ACROSS STEPS ARE IGNORED', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'CH3'})
mdb.jobs['CH3']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'D19-0462', 'handle': 27604, 'jobName': 'CH3'})
mdb.jobs['CH3']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 2 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'Failed to regularize material data for material CP1000. Please check your input data to see if they meet both criteria as explained in "MATERIAL DATA DEFINITION" section of Abaqus Analysis User Manual. In general, regularization is more difficult if the smallest interval defined by the user is small compared to the range of the independent variable.', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(ABORTED, {'phase': PACKAGER_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'CH3'})
mdb.jobs['CH3']._Message(ERROR, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'CH3'})
mdb.models['CH3'].materials['CP1000'].plastic.setValues(table=((547.3187706, 
    0.0), (616.652144, 0.0001), (745.9669958, 0.00021), (792.1875965, 0.00031), 
    (825.1501316, 0.0004), (836.6886007, 0.0005), (846.5918057, 0.0006), (
    855.2550949, 0.0007), (862.9333441, 0.0008), (869.8042195, 0.0009), (
    875.9986899, 0.001), (915.7895779, 0.002), (936.535345, 0.003), (
    950.0382983, 0.004), (960.1576656, 0.005), (968.3939004, 0.006), (
    975.4212223, 0.007), (981.5897122, 0.008), (987.1062691, 0.009), (
    992.1061142, 0.01), (1026.652879, 0.02), (1048.26802, 0.03), (1064.270724, 
    0.04), (1077.078935, 0.05), (1087.807916, 0.06), (1097.068595, 0.07), (
    1105.233604, 0.08), (1112.547721, 0.09), (1119.180742, 0.1), (1125.25548, 
    0.11), (1130.86376, 0.12), (1136.076106, 0.13), (1140.947913, 0.14), (
    1145.523514, 0.15), (1149.838967, 0.16), (1153.924009, 0.17), (1157.803466, 
    0.18), (1161.498284, 0.19), (1165.026306, 0.2), (1168.402861, 0.21), (
    1171.641219, 0.22), (1174.752949, 0.23), (1177.748195, 0.24), (1180.63591, 
    0.25), (1183.424032, 0.26), (1186.119634, 0.27), (1188.729047, 0.28), (
    1191.257964, 0.29), (1193.711518, 0.3), (1196.094358, 0.31), (1198.410707, 
    0.32), (1200.664415, 0.33), (1202.858998, 0.34), (1204.99768, 0.35), (
    1207.083422, 0.36), (1209.118952, 0.37), (1211.106788, 0.38), (1213.04926, 
    0.39), (1214.948527, 0.4), (1216.806595, 0.41), (1218.625331, 0.42), (
    1220.406474, 0.43), (1222.151649, 0.44), (1223.862376, 0.45), (1225.540078, 
    0.46), (1227.186091, 0.47), (1228.801667, 0.48), (1230.387987, 0.49), (
    1231.946162, 0.5), (1233.477239, 0.51), (1234.982207, 0.52), (1236.462002, 
    0.53), (1237.917506, 0.54), (1239.349559, 0.55), (1240.758953, 0.56), (
    1242.146443, 0.57), (1243.512745, 0.58), (1244.858539, 0.59), (1246.184473, 
    0.6), (1247.491163, 0.61), (1248.779198, 0.62), (1250.049139, 0.63), (
    1251.301521, 0.64), (1252.536856, 0.65), (1253.755632, 0.66), (1254.958318, 
    0.67), (1256.145361, 0.68), (1257.31719, 0.69), (1258.474217, 0.7), (
    1259.616837, 0.71), (1260.745427, 0.72), (1261.860351, 0.73), (1262.961959, 
    0.74), (1264.050587, 0.75), (1265.126557, 0.76), (1266.190181, 0.77), (
    1267.241757, 0.78), (1268.281574, 0.79), (1269.309909, 0.8), (1270.327032, 
    0.81), (1271.3332, 0.82), (1272.328662, 0.83), (1273.31366, 0.84), (
    1274.288426, 0.85), (1275.253185, 0.86), (1276.208154, 0.87), (1277.153544, 
    0.88), (1278.089558, 0.89), (1279.016392, 0.9), (1279.934237, 0.91), (
    1280.843278, 0.92), (1281.743693, 0.93), (1282.635656, 0.94), (1283.519334, 
    0.95), (1284.394892, 0.96), (1285.262486, 0.97), (1286.12227, 0.98), (
    1286.974393, 0.99), (1287.819, 1.0), (1288.656231, 1.01), (1289.486223, 
    1.02), (1290.309108, 1.03), (1291.125015, 1.04), (1291.93407, 1.05), (
    1292.736395, 1.06), (1293.532108, 1.07), (1294.321325, 1.08), (1295.104159, 
    1.09), (1295.880718, 1.1), (1296.65111, 1.11), (1297.415438, 1.12), (
    1298.173804, 1.13), (1298.926306, 1.14), (1299.67304, 1.15), (1300.414101, 
    1.16), (1301.14958, 1.17), (1301.879565, 1.18), (1302.604145, 1.19), (
    1303.323403, 1.2), (1304.037423, 1.21), (1304.746286, 1.22), (1305.450072, 
    1.23), (1306.148856, 1.24), (1306.842715, 1.25), (1307.531722, 1.26), (
    1308.215949, 1.27), (1308.895467, 1.28), (1309.570345, 1.29), (1310.24065, 
    1.3), (1310.906447, 1.31), (1311.567801, 1.32), (1312.224776, 1.33), (
    1312.877432, 1.34), (1313.52583, 1.35), (1314.170028, 1.36), (1314.810086, 
    1.37), (1315.446059, 1.38), (1316.078002, 1.39), (1316.705971, 1.4), (
    1317.330017, 1.41), (1317.950193, 1.42), (1318.566551, 1.43), (1319.179139, 
    1.44), (1319.788008, 1.45), (1320.393205, 1.46), (1320.994777, 1.47), (
    1321.59277, 1.48), (1322.187229, 1.49), (1322.7782, 1.5), (1323.365725, 
    1.51), (1323.949847, 1.52), (1324.530608, 1.53), (1325.108049, 1.54), (
    1325.682211, 1.55), (1326.253133, 1.56), (1326.820854, 1.57), (1327.385412, 
    1.58), (1327.946845, 1.59), (1328.505189, 1.6), (1329.060481, 1.61), (
    1329.612756, 1.62), (1330.162049, 1.63), (1330.708393, 1.64), (1331.251824, 
    1.65), (1331.792374, 1.66), (1332.330075, 1.67), (1332.864959, 1.68), (
    1333.397059, 1.69), (1333.926403, 1.7), (1334.453024, 1.71), (1334.97695, 
    1.72), (1335.498211, 1.73), (1336.016837, 1.74), (1336.532854, 1.75), (
    1337.046292, 1.76), (1337.557177, 1.77), (1338.065537, 1.78), (1338.571398, 
    1.79), (1339.074787, 1.8), (1339.575728, 1.81), (1340.074248, 1.82), (
    1340.570371, 1.83), (1341.064122, 1.84), (1341.555525, 1.85), (1342.044604, 
    1.86), (1342.531381, 1.87), (1343.015881, 1.88), (1343.498126, 1.89), (
    1343.978138, 1.9), (1344.455939, 1.91), (1344.931551, 1.92), (1345.404995, 
    1.93), (1345.876293, 1.94), (1346.345465, 1.95), (1346.81253, 1.96), (
    1347.277511, 1.97), (1347.740426, 1.98), (1348.201295, 1.99), (1348.660136, 
    2.0), (1349.116971, 2.01), (1349.571815, 2.02), (1350.02469, 2.03), (
    1350.475611, 2.04), (1350.924598, 2.05), (1351.371669, 2.06), (1351.816839, 
    2.07), (1352.260128, 2.08), (1352.701551, 2.09), (1353.141125, 2.1), (
    1353.578867, 2.11), (1354.014794, 2.12), (1354.44892, 2.13), (1354.881263, 
    2.14), (1355.311837, 2.15), (1355.740659, 2.16), (1356.167742, 2.17), (
    1356.593103, 2.18), (1357.016755, 2.19), (1357.438715, 2.2), (1357.858995, 
    2.21), (1358.277611, 2.22), (1358.694576, 2.23), (1359.109904, 2.24), (
    1359.52361, 2.25), (1359.935705, 2.26), (1360.346205, 2.27), (1360.755121, 
    2.28), (1361.162467, 2.29), (1361.568256, 2.3), (1361.972501, 2.31), (
    1362.375213, 2.32), (1362.776406, 2.33), (1363.176092, 2.34), (1363.574282, 
    2.35), (1363.970989, 2.36), (1364.366224, 2.37), (1364.759999, 2.38), (
    1365.152325, 2.39), (1365.543215, 2.4), (1365.932678, 2.41), (1366.320727, 
    2.42), (1366.707371, 2.43), (1367.092623, 2.44), (1367.476492, 2.45), (
    1367.85899, 2.46), (1368.240126, 2.47), (1368.619911, 2.48), (1368.998355, 
    2.49), (1369.375469, 2.5), (1369.751262, 2.51), (1370.125744, 2.52), (
    1370.498924, 2.53), (1370.870814, 2.54), (1371.241421, 2.55), (1371.610756, 
    2.56), (1371.978827, 2.57), (1372.345645, 2.58), (1372.711217, 2.59), (
    1373.075554, 2.6), (1373.438663, 2.61), (1373.800555, 2.62), (1374.161237, 
    2.63), (1374.520718, 2.64), (1374.879007, 2.65), (1375.236111, 2.66), (
    1375.592041, 2.67), (1375.946802, 2.68), (1376.300405, 2.69), (1376.652857, 
    2.7), (1377.004165, 2.71), (1377.354339, 2.72), (1377.703385, 2.73), (
    1378.051311, 2.74), (1378.398126, 2.75), (1378.743836, 2.76), (1379.088449, 
    2.77), (1379.431973, 2.78), (1379.774414, 2.79), (1380.115781, 2.8), (
    1380.45608, 2.81), (1380.795318, 2.82), (1381.133503, 2.83), (1381.470642, 
    2.84), (1381.806741, 2.85), (1382.141807, 2.86), (1382.475847, 2.87), (
    1382.808868, 2.88), (1383.140876, 2.89), (1383.471878, 2.9), (1383.80188, 
    2.91), (1384.130889, 2.92), (1384.458912, 2.93), (1384.785954, 2.94), (
    1385.112022, 2.95), (1385.437121, 2.96), (1385.761259, 2.97), (1386.084441, 
    2.98), (1386.406673, 2.99), (1386.727962, 3.0)))
mdb.jobs['CH3'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['CH3']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'D19-0462', 'handle': 0, 'jobName': 'CH3'})
mdb.jobs['CH3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE OPTION *BOUNDARY,TYPE=DISPLACEMENT HAS BEEN USED; CHECK STATUS FILE BETWEEN STEPS FOR WARNINGS ON ANY JUMPS PRESCRIBED ACROSS THE STEPS IN DISPLACEMENT VALUES OF TRANSLATIONAL DOF. FOR ROTATIONAL DOF MAKE SURE THAT THERE ARE NO SUCH JUMPS. ALL JUMPS IN DISPLACEMENTS ACROSS STEPS ARE IGNORED', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'CH3'})
mdb.jobs['CH3']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'D19-0462', 'handle': 27640, 'jobName': 'CH3'})
mdb.jobs['CH3']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 2 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'Failed to regularize material data for material CP1000. Please check your input data to see if they meet both criteria as explained in "MATERIAL DATA DEFINITION" section of Abaqus Analysis User Manual. In general, regularization is more difficult if the smallest interval defined by the user is small compared to the range of the independent variable.', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(ABORTED, {'phase': PACKAGER_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'CH3'})
mdb.jobs['CH3']._Message(ERROR, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'CH3'})
mdb.models['CH3'].materials['CP1000'].plastic.setValues(table=((547.3187706, 
    0.0), (616.652144, 0.0001), (745.9669958, 0.0002), (792.1875965, 0.0003), (
    825.1501316, 0.0004), (836.6886007, 0.0005), (846.5918057, 0.0006), (
    855.2550949, 0.0007), (862.9333441, 0.0008), (869.8042195, 0.0009), (
    875.9986899, 0.001), (915.7895779, 0.002), (936.535345, 0.003), (
    950.0382983, 0.004), (960.1576656, 0.005), (968.3939004, 0.006), (
    975.4212223, 0.007), (981.5897122, 0.008), (987.1062691, 0.009), (
    992.1061142, 0.01), (1026.652879, 0.02), (1048.26802, 0.03), (1064.270724, 
    0.04), (1077.078935, 0.05), (1087.807916, 0.06), (1097.068595, 0.07), (
    1105.233604, 0.08), (1112.547721, 0.09), (1119.180742, 0.1), (1125.25548, 
    0.11), (1130.86376, 0.12), (1136.076106, 0.13), (1140.947913, 0.14), (
    1145.523514, 0.15), (1149.838967, 0.16), (1153.924009, 0.17), (1157.803466, 
    0.18), (1161.498284, 0.19), (1165.026306, 0.2), (1168.402861, 0.21), (
    1171.641219, 0.22), (1174.752949, 0.23), (1177.748195, 0.24), (1180.63591, 
    0.25), (1183.424032, 0.26), (1186.119634, 0.27), (1188.729047, 0.28), (
    1191.257964, 0.29), (1193.711518, 0.3), (1196.094358, 0.31), (1198.410707, 
    0.32), (1200.664415, 0.33), (1202.858998, 0.34), (1204.99768, 0.35), (
    1207.083422, 0.36), (1209.118952, 0.37), (1211.106788, 0.38), (1213.04926, 
    0.39), (1214.948527, 0.4), (1216.806595, 0.41), (1218.625331, 0.42), (
    1220.406474, 0.43), (1222.151649, 0.44), (1223.862376, 0.45), (1225.540078, 
    0.46), (1227.186091, 0.47), (1228.801667, 0.48), (1230.387987, 0.49), (
    1231.946162, 0.5), (1233.477239, 0.51), (1234.982207, 0.52), (1236.462002, 
    0.53), (1237.917506, 0.54), (1239.349559, 0.55), (1240.758953, 0.56), (
    1242.146443, 0.57), (1243.512745, 0.58), (1244.858539, 0.59), (1246.184473, 
    0.6), (1247.491163, 0.61), (1248.779198, 0.62), (1250.049139, 0.63), (
    1251.301521, 0.64), (1252.536856, 0.65), (1253.755632, 0.66), (1254.958318, 
    0.67), (1256.145361, 0.68), (1257.31719, 0.69), (1258.474217, 0.7), (
    1259.616837, 0.71), (1260.745427, 0.72), (1261.860351, 0.73), (1262.961959, 
    0.74), (1264.050587, 0.75), (1265.126557, 0.76), (1266.190181, 0.77), (
    1267.241757, 0.78), (1268.281574, 0.79), (1269.309909, 0.8), (1270.327032, 
    0.81), (1271.3332, 0.82), (1272.328662, 0.83), (1273.31366, 0.84), (
    1274.288426, 0.85), (1275.253185, 0.86), (1276.208154, 0.87), (1277.153544, 
    0.88), (1278.089558, 0.89), (1279.016392, 0.9), (1279.934237, 0.91), (
    1280.843278, 0.92), (1281.743693, 0.93), (1282.635656, 0.94), (1283.519334, 
    0.95), (1284.394892, 0.96), (1285.262486, 0.97), (1286.12227, 0.98), (
    1286.974393, 0.99), (1287.819, 1.0), (1288.656231, 1.01), (1289.486223, 
    1.02), (1290.309108, 1.03), (1291.125015, 1.04), (1291.93407, 1.05), (
    1292.736395, 1.06), (1293.532108, 1.07), (1294.321325, 1.08), (1295.104159, 
    1.09), (1295.880718, 1.1), (1296.65111, 1.11), (1297.415438, 1.12), (
    1298.173804, 1.13), (1298.926306, 1.14), (1299.67304, 1.15), (1300.414101, 
    1.16), (1301.14958, 1.17), (1301.879565, 1.18), (1302.604145, 1.19), (
    1303.323403, 1.2), (1304.037423, 1.21), (1304.746286, 1.22), (1305.450072, 
    1.23), (1306.148856, 1.24), (1306.842715, 1.25), (1307.531722, 1.26), (
    1308.215949, 1.27), (1308.895467, 1.28), (1309.570345, 1.29), (1310.24065, 
    1.3), (1310.906447, 1.31), (1311.567801, 1.32), (1312.224776, 1.33), (
    1312.877432, 1.34), (1313.52583, 1.35), (1314.170028, 1.36), (1314.810086, 
    1.37), (1315.446059, 1.38), (1316.078002, 1.39), (1316.705971, 1.4), (
    1317.330017, 1.41), (1317.950193, 1.42), (1318.566551, 1.43), (1319.179139, 
    1.44), (1319.788008, 1.45), (1320.393205, 1.46), (1320.994777, 1.47), (
    1321.59277, 1.48), (1322.187229, 1.49), (1322.7782, 1.5), (1323.365725, 
    1.51), (1323.949847, 1.52), (1324.530608, 1.53), (1325.108049, 1.54), (
    1325.682211, 1.55), (1326.253133, 1.56), (1326.820854, 1.57), (1327.385412, 
    1.58), (1327.946845, 1.59), (1328.505189, 1.6), (1329.060481, 1.61), (
    1329.612756, 1.62), (1330.162049, 1.63), (1330.708393, 1.64), (1331.251824, 
    1.65), (1331.792374, 1.66), (1332.330075, 1.67), (1332.864959, 1.68), (
    1333.397059, 1.69), (1333.926403, 1.7), (1334.453024, 1.71), (1334.97695, 
    1.72), (1335.498211, 1.73), (1336.016837, 1.74), (1336.532854, 1.75), (
    1337.046292, 1.76), (1337.557177, 1.77), (1338.065537, 1.78), (1338.571398, 
    1.79), (1339.074787, 1.8), (1339.575728, 1.81), (1340.074248, 1.82), (
    1340.570371, 1.83), (1341.064122, 1.84), (1341.555525, 1.85), (1342.044604, 
    1.86), (1342.531381, 1.87), (1343.015881, 1.88), (1343.498126, 1.89), (
    1343.978138, 1.9), (1344.455939, 1.91), (1344.931551, 1.92), (1345.404995, 
    1.93), (1345.876293, 1.94), (1346.345465, 1.95), (1346.81253, 1.96), (
    1347.277511, 1.97), (1347.740426, 1.98), (1348.201295, 1.99), (1348.660136, 
    2.0), (1349.116971, 2.01), (1349.571815, 2.02), (1350.02469, 2.03), (
    1350.475611, 2.04), (1350.924598, 2.05), (1351.371669, 2.06), (1351.816839, 
    2.07), (1352.260128, 2.08), (1352.701551, 2.09), (1353.141125, 2.1), (
    1353.578867, 2.11), (1354.014794, 2.12), (1354.44892, 2.13), (1354.881263, 
    2.14), (1355.311837, 2.15), (1355.740659, 2.16), (1356.167742, 2.17), (
    1356.593103, 2.18), (1357.016755, 2.19), (1357.438715, 2.2), (1357.858995, 
    2.21), (1358.277611, 2.22), (1358.694576, 2.23), (1359.109904, 2.24), (
    1359.52361, 2.25), (1359.935705, 2.26), (1360.346205, 2.27), (1360.755121, 
    2.28), (1361.162467, 2.29), (1361.568256, 2.3), (1361.972501, 2.31), (
    1362.375213, 2.32), (1362.776406, 2.33), (1363.176092, 2.34), (1363.574282, 
    2.35), (1363.970989, 2.36), (1364.366224, 2.37), (1364.759999, 2.38), (
    1365.152325, 2.39), (1365.543215, 2.4), (1365.932678, 2.41), (1366.320727, 
    2.42), (1366.707371, 2.43), (1367.092623, 2.44), (1367.476492, 2.45), (
    1367.85899, 2.46), (1368.240126, 2.47), (1368.619911, 2.48), (1368.998355, 
    2.49), (1369.375469, 2.5), (1369.751262, 2.51), (1370.125744, 2.52), (
    1370.498924, 2.53), (1370.870814, 2.54), (1371.241421, 2.55), (1371.610756, 
    2.56), (1371.978827, 2.57), (1372.345645, 2.58), (1372.711217, 2.59), (
    1373.075554, 2.6), (1373.438663, 2.61), (1373.800555, 2.62), (1374.161237, 
    2.63), (1374.520718, 2.64), (1374.879007, 2.65), (1375.236111, 2.66), (
    1375.592041, 2.67), (1375.946802, 2.68), (1376.300405, 2.69), (1376.652857, 
    2.7), (1377.004165, 2.71), (1377.354339, 2.72), (1377.703385, 2.73), (
    1378.051311, 2.74), (1378.398126, 2.75), (1378.743836, 2.76), (1379.088449, 
    2.77), (1379.431973, 2.78), (1379.774414, 2.79), (1380.115781, 2.8), (
    1380.45608, 2.81), (1380.795318, 2.82), (1381.133503, 2.83), (1381.470642, 
    2.84), (1381.806741, 2.85), (1382.141807, 2.86), (1382.475847, 2.87), (
    1382.808868, 2.88), (1383.140876, 2.89), (1383.471878, 2.9), (1383.80188, 
    2.91), (1384.130889, 2.92), (1384.458912, 2.93), (1384.785954, 2.94), (
    1385.112022, 2.95), (1385.437121, 2.96), (1385.761259, 2.97), (1386.084441, 
    2.98), (1386.406673, 2.99), (1386.727962, 3.0)))
mdb.jobs['CH3'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['CH3']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'D19-0462', 'handle': 0, 'jobName': 'CH3'})
mdb.jobs['CH3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE OPTION *BOUNDARY,TYPE=DISPLACEMENT HAS BEEN USED; CHECK STATUS FILE BETWEEN STEPS FOR WARNINGS ON ANY JUMPS PRESCRIBED ACROSS THE STEPS IN DISPLACEMENT VALUES OF TRANSLATIONAL DOF. FOR ROTATIONAL DOF MAKE SURE THAT THERE ARE NO SUCH JUMPS. ALL JUMPS IN DISPLACEMENTS ACROSS STEPS ARE IGNORED', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'CH3'})
mdb.jobs['CH3']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'D19-0462', 'handle': 26680, 'jobName': 'CH3'})
mdb.jobs['CH3']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 2 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'Failed to regularize material data for material CP1000. Please check your input data to see if they meet both criteria as explained in "MATERIAL DATA DEFINITION" section of Abaqus Analysis User Manual. In general, regularization is more difficult if the smallest interval defined by the user is small compared to the range of the independent variable.', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(ABORTED, {'phase': PACKAGER_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'CH3'})
mdb.jobs['CH3']._Message(ERROR, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'CH3'})
mdb.models['CH3'].materials['CP1000'].plastic.setValues(table=((547.3187706, 
    0.0), (745.9669958, 0.0002), (825.1501316, 0.0004), (846.5918057, 0.0006), 
    (862.9333441, 0.0008), (875.9986899, 0.001), (915.7895779, 0.002), (
    936.535345, 0.003), (950.0382983, 0.004), (960.1576656, 0.005), (
    968.3939004, 0.006), (975.4212223, 0.007), (981.5897122, 0.008), (
    987.1062691, 0.009), (992.1061142, 0.01), (1026.652879, 0.02), (1048.26802, 
    0.03), (1064.270724, 0.04), (1077.078935, 0.05), (1087.807916, 0.06), (
    1097.068595, 0.07), (1105.233604, 0.08), (1112.547721, 0.09), (1119.180742, 
    0.1), (1125.25548, 0.11), (1130.86376, 0.12), (1136.076106, 0.13), (
    1140.947913, 0.14), (1145.523514, 0.15), (1149.838967, 0.16), (1153.924009, 
    0.17), (1157.803466, 0.18), (1161.498284, 0.19), (1165.026306, 0.2), (
    1168.402861, 0.21), (1171.641219, 0.22), (1174.752949, 0.23), (1177.748195, 
    0.24), (1180.63591, 0.25), (1183.424032, 0.26), (1186.119634, 0.27), (
    1188.729047, 0.28), (1191.257964, 0.29), (1193.711518, 0.3), (1196.094358, 
    0.31), (1198.410707, 0.32), (1200.664415, 0.33), (1202.858998, 0.34), (
    1204.99768, 0.35), (1207.083422, 0.36), (1209.118952, 0.37), (1211.106788, 
    0.38), (1213.04926, 0.39), (1214.948527, 0.4), (1216.806595, 0.41), (
    1218.625331, 0.42), (1220.406474, 0.43), (1222.151649, 0.44), (1223.862376, 
    0.45), (1225.540078, 0.46), (1227.186091, 0.47), (1228.801667, 0.48), (
    1230.387987, 0.49), (1231.946162, 0.5), (1233.477239, 0.51), (1234.982207, 
    0.52), (1236.462002, 0.53), (1237.917506, 0.54), (1239.349559, 0.55), (
    1240.758953, 0.56), (1242.146443, 0.57), (1243.512745, 0.58), (1244.858539, 
    0.59), (1246.184473, 0.6), (1247.491163, 0.61), (1248.779198, 0.62), (
    1250.049139, 0.63), (1251.301521, 0.64), (1252.536856, 0.65), (1253.755632, 
    0.66), (1254.958318, 0.67), (1256.145361, 0.68), (1257.31719, 0.69), (
    1258.474217, 0.7), (1259.616837, 0.71), (1260.745427, 0.72), (1261.860351, 
    0.73), (1262.961959, 0.74), (1264.050587, 0.75), (1265.126557, 0.76), (
    1266.190181, 0.77), (1267.241757, 0.78), (1268.281574, 0.79), (1269.309909, 
    0.8), (1270.327032, 0.81), (1271.3332, 0.82), (1272.328662, 0.83), (
    1273.31366, 0.84), (1274.288426, 0.85), (1275.253185, 0.86), (1276.208154, 
    0.87), (1277.153544, 0.88), (1278.089558, 0.89), (1279.016392, 0.9), (
    1279.934237, 0.91), (1280.843278, 0.92), (1281.743693, 0.93), (1282.635656, 
    0.94), (1283.519334, 0.95), (1284.394892, 0.96), (1285.262486, 0.97), (
    1286.12227, 0.98), (1286.974393, 0.99), (1287.819, 1.0), (1288.656231, 
    1.01), (1289.486223, 1.02), (1290.309108, 1.03), (1291.125015, 1.04), (
    1291.93407, 1.05), (1292.736395, 1.06), (1293.532108, 1.07), (1294.321325, 
    1.08), (1295.104159, 1.09), (1295.880718, 1.1), (1296.65111, 1.11), (
    1297.415438, 1.12), (1298.173804, 1.13), (1298.926306, 1.14), (1299.67304, 
    1.15), (1300.414101, 1.16), (1301.14958, 1.17), (1301.879565, 1.18), (
    1302.604145, 1.19), (1303.323403, 1.2), (1304.037423, 1.21), (1304.746286, 
    1.22), (1305.450072, 1.23), (1306.148856, 1.24), (1306.842715, 1.25), (
    1307.531722, 1.26), (1308.215949, 1.27), (1308.895467, 1.28), (1309.570345, 
    1.29), (1310.24065, 1.3), (1310.906447, 1.31), (1311.567801, 1.32), (
    1312.224776, 1.33), (1312.877432, 1.34), (1313.52583, 1.35), (1314.170028, 
    1.36), (1314.810086, 1.37), (1315.446059, 1.38), (1316.078002, 1.39), (
    1316.705971, 1.4), (1317.330017, 1.41), (1317.950193, 1.42), (1318.566551, 
    1.43), (1319.179139, 1.44), (1319.788008, 1.45), (1320.393205, 1.46), (
    1320.994777, 1.47), (1321.59277, 1.48), (1322.187229, 1.49), (1322.7782, 
    1.5), (1323.365725, 1.51), (1323.949847, 1.52), (1324.530608, 1.53), (
    1325.108049, 1.54), (1325.682211, 1.55), (1326.253133, 1.56), (1326.820854, 
    1.57), (1327.385412, 1.58), (1327.946845, 1.59), (1328.505189, 1.6), (
    1329.060481, 1.61), (1329.612756, 1.62), (1330.162049, 1.63), (1330.708393, 
    1.64), (1331.251824, 1.65), (1331.792374, 1.66), (1332.330075, 1.67), (
    1332.864959, 1.68), (1333.397059, 1.69), (1333.926403, 1.7), (1334.453024, 
    1.71), (1334.97695, 1.72), (1335.498211, 1.73), (1336.016837, 1.74), (
    1336.532854, 1.75), (1337.046292, 1.76), (1337.557177, 1.77), (1338.065537, 
    1.78), (1338.571398, 1.79), (1339.074787, 1.8), (1339.575728, 1.81), (
    1340.074248, 1.82), (1340.570371, 1.83), (1341.064122, 1.84), (1341.555525, 
    1.85), (1342.044604, 1.86), (1342.531381, 1.87), (1343.015881, 1.88), (
    1343.498126, 1.89), (1343.978138, 1.9), (1344.455939, 1.91), (1344.931551, 
    1.92), (1345.404995, 1.93), (1345.876293, 1.94), (1346.345465, 1.95), (
    1346.81253, 1.96), (1347.277511, 1.97), (1347.740426, 1.98), (1348.201295, 
    1.99), (1348.660136, 2.0), (1349.116971, 2.01), (1349.571815, 2.02), (
    1350.02469, 2.03), (1350.475611, 2.04), (1350.924598, 2.05), (1351.371669, 
    2.06), (1351.816839, 2.07), (1352.260128, 2.08), (1352.701551, 2.09), (
    1353.141125, 2.1), (1353.578867, 2.11), (1354.014794, 2.12), (1354.44892, 
    2.13), (1354.881263, 2.14), (1355.311837, 2.15), (1355.740659, 2.16), (
    1356.167742, 2.17), (1356.593103, 2.18), (1357.016755, 2.19), (1357.438715, 
    2.2), (1357.858995, 2.21), (1358.277611, 2.22), (1358.694576, 2.23), (
    1359.109904, 2.24), (1359.52361, 2.25), (1359.935705, 2.26), (1360.346205, 
    2.27), (1360.755121, 2.28), (1361.162467, 2.29), (1361.568256, 2.3), (
    1361.972501, 2.31), (1362.375213, 2.32), (1362.776406, 2.33), (1363.176092, 
    2.34), (1363.574282, 2.35), (1363.970989, 2.36), (1364.366224, 2.37), (
    1364.759999, 2.38), (1365.152325, 2.39), (1365.543215, 2.4), (1365.932678, 
    2.41), (1366.320727, 2.42), (1366.707371, 2.43), (1367.092623, 2.44), (
    1367.476492, 2.45), (1367.85899, 2.46), (1368.240126, 2.47), (1368.619911, 
    2.48), (1368.998355, 2.49), (1369.375469, 2.5), (1369.751262, 2.51), (
    1370.125744, 2.52), (1370.498924, 2.53), (1370.870814, 2.54), (1371.241421, 
    2.55), (1371.610756, 2.56), (1371.978827, 2.57), (1372.345645, 2.58), (
    1372.711217, 2.59), (1373.075554, 2.6), (1373.438663, 2.61), (1373.800555, 
    2.62), (1374.161237, 2.63), (1374.520718, 2.64), (1374.879007, 2.65), (
    1375.236111, 2.66), (1375.592041, 2.67), (1375.946802, 2.68), (1376.300405, 
    2.69), (1376.652857, 2.7), (1377.004165, 2.71), (1377.354339, 2.72), (
    1377.703385, 2.73), (1378.051311, 2.74), (1378.398126, 2.75), (1378.743836, 
    2.76), (1379.088449, 2.77), (1379.431973, 2.78), (1379.774414, 2.79), (
    1380.115781, 2.8), (1380.45608, 2.81), (1380.795318, 2.82), (1381.133503, 
    2.83), (1381.470642, 2.84), (1381.806741, 2.85), (1382.141807, 2.86), (
    1382.475847, 2.87), (1382.808868, 2.88), (1383.140876, 2.89), (1383.471878, 
    2.9), (1383.80188, 2.91), (1384.130889, 2.92), (1384.458912, 2.93), (
    1384.785954, 2.94), (1385.112022, 2.95), (1385.437121, 2.96), (1385.761259, 
    2.97), (1386.084441, 2.98), (1386.406673, 2.99), (1386.727962, 3.0)))
mdb.jobs['CH3'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['CH3']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'D19-0462', 'handle': 0, 'jobName': 'CH3'})
mdb.jobs['CH3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE OPTION *BOUNDARY,TYPE=DISPLACEMENT HAS BEEN USED; CHECK STATUS FILE BETWEEN STEPS FOR WARNINGS ON ANY JUMPS PRESCRIBED ACROSS THE STEPS IN DISPLACEMENT VALUES OF TRANSLATIONAL DOF. FOR ROTATIONAL DOF MAKE SURE THAT THERE ARE NO SUCH JUMPS. ALL JUMPS IN DISPLACEMENTS ACROSS STEPS ARE IGNORED', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'CH3'})
mdb.jobs['CH3']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'D19-0462', 'handle': 27464, 'jobName': 'CH3'})
mdb.jobs['CH3']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 2 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'Failed to regularize material data for material CP1000. Please check your input data to see if they meet both criteria as explained in "MATERIAL DATA DEFINITION" section of Abaqus Analysis User Manual. In general, regularization is more difficult if the smallest interval defined by the user is small compared to the range of the independent variable.', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(ABORTED, {'phase': PACKAGER_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'CH3'})
mdb.jobs['CH3']._Message(ERROR, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'CH3'})
mdb.models['CH3'].materials['CP1000'].plastic.setValues(table=((547.3187706, 
    0.0), (875.9986899, 0.001), (915.7895779, 0.002), (936.535345, 0.003), (
    950.0382983, 0.004), (960.1576656, 0.005), (968.3939004, 0.006), (
    975.4212223, 0.007), (981.5897122, 0.008), (987.1062691, 0.009), (
    992.1061142, 0.01), (1026.652879, 0.02), (1048.26802, 0.03), (1064.270724, 
    0.04), (1077.078935, 0.05), (1087.807916, 0.06), (1097.068595, 0.07), (
    1105.233604, 0.08), (1112.547721, 0.09), (1119.180742, 0.1), (1125.25548, 
    0.11), (1130.86376, 0.12), (1136.076106, 0.13), (1140.947913, 0.14), (
    1145.523514, 0.15), (1149.838967, 0.16), (1153.924009, 0.17), (1157.803466, 
    0.18), (1161.498284, 0.19), (1165.026306, 0.2), (1168.402861, 0.21), (
    1171.641219, 0.22), (1174.752949, 0.23), (1177.748195, 0.24), (1180.63591, 
    0.25), (1183.424032, 0.26), (1186.119634, 0.27), (1188.729047, 0.28), (
    1191.257964, 0.29), (1193.711518, 0.3), (1196.094358, 0.31), (1198.410707, 
    0.32), (1200.664415, 0.33), (1202.858998, 0.34), (1204.99768, 0.35), (
    1207.083422, 0.36), (1209.118952, 0.37), (1211.106788, 0.38), (1213.04926, 
    0.39), (1214.948527, 0.4), (1216.806595, 0.41), (1218.625331, 0.42), (
    1220.406474, 0.43), (1222.151649, 0.44), (1223.862376, 0.45), (1225.540078, 
    0.46), (1227.186091, 0.47), (1228.801667, 0.48), (1230.387987, 0.49), (
    1231.946162, 0.5), (1233.477239, 0.51), (1234.982207, 0.52), (1236.462002, 
    0.53), (1237.917506, 0.54), (1239.349559, 0.55), (1240.758953, 0.56), (
    1242.146443, 0.57), (1243.512745, 0.58), (1244.858539, 0.59), (1246.184473, 
    0.6), (1247.491163, 0.61), (1248.779198, 0.62), (1250.049139, 0.63), (
    1251.301521, 0.64), (1252.536856, 0.65), (1253.755632, 0.66), (1254.958318, 
    0.67), (1256.145361, 0.68), (1257.31719, 0.69), (1258.474217, 0.7), (
    1259.616837, 0.71), (1260.745427, 0.72), (1261.860351, 0.73), (1262.961959, 
    0.74), (1264.050587, 0.75), (1265.126557, 0.76), (1266.190181, 0.77), (
    1267.241757, 0.78), (1268.281574, 0.79), (1269.309909, 0.8), (1270.327032, 
    0.81), (1271.3332, 0.82), (1272.328662, 0.83), (1273.31366, 0.84), (
    1274.288426, 0.85), (1275.253185, 0.86), (1276.208154, 0.87), (1277.153544, 
    0.88), (1278.089558, 0.89), (1279.016392, 0.9), (1279.934237, 0.91), (
    1280.843278, 0.92), (1281.743693, 0.93), (1282.635656, 0.94), (1283.519334, 
    0.95), (1284.394892, 0.96), (1285.262486, 0.97), (1286.12227, 0.98), (
    1286.974393, 0.99), (1287.819, 1.0), (1288.656231, 1.01), (1289.486223, 
    1.02), (1290.309108, 1.03), (1291.125015, 1.04), (1291.93407, 1.05), (
    1292.736395, 1.06), (1293.532108, 1.07), (1294.321325, 1.08), (1295.104159, 
    1.09), (1295.880718, 1.1), (1296.65111, 1.11), (1297.415438, 1.12), (
    1298.173804, 1.13), (1298.926306, 1.14), (1299.67304, 1.15), (1300.414101, 
    1.16), (1301.14958, 1.17), (1301.879565, 1.18), (1302.604145, 1.19), (
    1303.323403, 1.2), (1304.037423, 1.21), (1304.746286, 1.22), (1305.450072, 
    1.23), (1306.148856, 1.24), (1306.842715, 1.25), (1307.531722, 1.26), (
    1308.215949, 1.27), (1308.895467, 1.28), (1309.570345, 1.29), (1310.24065, 
    1.3), (1310.906447, 1.31), (1311.567801, 1.32), (1312.224776, 1.33), (
    1312.877432, 1.34), (1313.52583, 1.35), (1314.170028, 1.36), (1314.810086, 
    1.37), (1315.446059, 1.38), (1316.078002, 1.39), (1316.705971, 1.4), (
    1317.330017, 1.41), (1317.950193, 1.42), (1318.566551, 1.43), (1319.179139, 
    1.44), (1319.788008, 1.45), (1320.393205, 1.46), (1320.994777, 1.47), (
    1321.59277, 1.48), (1322.187229, 1.49), (1322.7782, 1.5), (1323.365725, 
    1.51), (1323.949847, 1.52), (1324.530608, 1.53), (1325.108049, 1.54), (
    1325.682211, 1.55), (1326.253133, 1.56), (1326.820854, 1.57), (1327.385412, 
    1.58), (1327.946845, 1.59), (1328.505189, 1.6), (1329.060481, 1.61), (
    1329.612756, 1.62), (1330.162049, 1.63), (1330.708393, 1.64), (1331.251824, 
    1.65), (1331.792374, 1.66), (1332.330075, 1.67), (1332.864959, 1.68), (
    1333.397059, 1.69), (1333.926403, 1.7), (1334.453024, 1.71), (1334.97695, 
    1.72), (1335.498211, 1.73), (1336.016837, 1.74), (1336.532854, 1.75), (
    1337.046292, 1.76), (1337.557177, 1.77), (1338.065537, 1.78), (1338.571398, 
    1.79), (1339.074787, 1.8), (1339.575728, 1.81), (1340.074248, 1.82), (
    1340.570371, 1.83), (1341.064122, 1.84), (1341.555525, 1.85), (1342.044604, 
    1.86), (1342.531381, 1.87), (1343.015881, 1.88), (1343.498126, 1.89), (
    1343.978138, 1.9), (1344.455939, 1.91), (1344.931551, 1.92), (1345.404995, 
    1.93), (1345.876293, 1.94), (1346.345465, 1.95), (1346.81253, 1.96), (
    1347.277511, 1.97), (1347.740426, 1.98), (1348.201295, 1.99), (1348.660136, 
    2.0), (1349.116971, 2.01), (1349.571815, 2.02), (1350.02469, 2.03), (
    1350.475611, 2.04), (1350.924598, 2.05), (1351.371669, 2.06), (1351.816839, 
    2.07), (1352.260128, 2.08), (1352.701551, 2.09), (1353.141125, 2.1), (
    1353.578867, 2.11), (1354.014794, 2.12), (1354.44892, 2.13), (1354.881263, 
    2.14), (1355.311837, 2.15), (1355.740659, 2.16), (1356.167742, 2.17), (
    1356.593103, 2.18), (1357.016755, 2.19), (1357.438715, 2.2), (1357.858995, 
    2.21), (1358.277611, 2.22), (1358.694576, 2.23), (1359.109904, 2.24), (
    1359.52361, 2.25), (1359.935705, 2.26), (1360.346205, 2.27), (1360.755121, 
    2.28), (1361.162467, 2.29), (1361.568256, 2.3), (1361.972501, 2.31), (
    1362.375213, 2.32), (1362.776406, 2.33), (1363.176092, 2.34), (1363.574282, 
    2.35), (1363.970989, 2.36), (1364.366224, 2.37), (1364.759999, 2.38), (
    1365.152325, 2.39), (1365.543215, 2.4), (1365.932678, 2.41), (1366.320727, 
    2.42), (1366.707371, 2.43), (1367.092623, 2.44), (1367.476492, 2.45), (
    1367.85899, 2.46), (1368.240126, 2.47), (1368.619911, 2.48), (1368.998355, 
    2.49), (1369.375469, 2.5), (1369.751262, 2.51), (1370.125744, 2.52), (
    1370.498924, 2.53), (1370.870814, 2.54), (1371.241421, 2.55), (1371.610756, 
    2.56), (1371.978827, 2.57), (1372.345645, 2.58), (1372.711217, 2.59), (
    1373.075554, 2.6), (1373.438663, 2.61), (1373.800555, 2.62), (1374.161237, 
    2.63), (1374.520718, 2.64), (1374.879007, 2.65), (1375.236111, 2.66), (
    1375.592041, 2.67), (1375.946802, 2.68), (1376.300405, 2.69), (1376.652857, 
    2.7), (1377.004165, 2.71), (1377.354339, 2.72), (1377.703385, 2.73), (
    1378.051311, 2.74), (1378.398126, 2.75), (1378.743836, 2.76), (1379.088449, 
    2.77), (1379.431973, 2.78), (1379.774414, 2.79), (1380.115781, 2.8), (
    1380.45608, 2.81), (1380.795318, 2.82), (1381.133503, 2.83), (1381.470642, 
    2.84), (1381.806741, 2.85), (1382.141807, 2.86), (1382.475847, 2.87), (
    1382.808868, 2.88), (1383.140876, 2.89), (1383.471878, 2.9), (1383.80188, 
    2.91), (1384.130889, 2.92), (1384.458912, 2.93), (1384.785954, 2.94), (
    1385.112022, 2.95), (1385.437121, 2.96), (1385.761259, 2.97), (1386.084441, 
    2.98), (1386.406673, 2.99), (1386.727962, 3.0)))
mdb.jobs['CH3'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['CH3']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'D19-0462', 'handle': 0, 'jobName': 'CH3'})
mdb.jobs['CH3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE OPTION *BOUNDARY,TYPE=DISPLACEMENT HAS BEEN USED; CHECK STATUS FILE BETWEEN STEPS FOR WARNINGS ON ANY JUMPS PRESCRIBED ACROSS THE STEPS IN DISPLACEMENT VALUES OF TRANSLATIONAL DOF. FOR ROTATIONAL DOF MAKE SURE THAT THERE ARE NO SUCH JUMPS. ALL JUMPS IN DISPLACEMENTS ACROSS STEPS ARE IGNORED', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'CH3'})
mdb.jobs['CH3']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'D19-0462', 'handle': 9220, 'jobName': 'CH3'})
mdb.jobs['CH3']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 2 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'CH3'})
mdb.jobs['CH3']._Message(COMPLETED, {'phase': PACKAGER_PHASE, 
    'message': 'Phase complete', 'jobName': 'CH3'})
mdb.jobs['CH3']._Message(STARTED, {'phase': EXPLICIT_PHASE, 
    'clientHost': 'D19-0462', 'handle': 26800, 'jobName': 'CH3'})
mdb.jobs['CH3']._Message(STATUS, {'totalTime': 0.0, 
    'stableTimeIncrement': 5.6283191440798e-09, 'stepTime': 0.0, 
    'totalEnergy': 5.54765611013863e-05, 'cpuTime': 0.0, 'jobName': 'CH3', 
    'step': 1, 'increment': 0, 'phase': EXPLICIT_PHASE, 
    'kineticEnergy': 5.54765611013863e-05})
mdb.jobs['CH3']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'CH3'})
mdb.jobs['CH3']._Message(COMPLETED, {'phase': EXPLICIT_PHASE, 
    'message': 'Phase complete', 'jobName': 'CH3'})
mdb.jobs['CH3']._Message(JOB_COMPLETED, {'time': 'Fri Feb 19 23:43:42 2021', 
    'jobName': 'CH3'})
mdb.models['CH2'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['CH2'].parts['Part-1'].features['Solid extrude-1'].sketch)
mdb.models['CH2'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['CH2'].sketches['__edit__'], upToFeature=
    mdb.models['CH2'].parts['Part-1'].features['Solid extrude-1'])
mdb.models['CH2'].sketches['__edit__'].dimensions[0].setValues(value=7.5)
mdb.models['CH2'].sketches['__edit__'].dimensions[1].setValues(value=15)
mdb.models['CH2'].parts['Part-1'].features['Solid extrude-1'].setValues(sketch=
    mdb.models['CH2'].sketches['__edit__'])
del mdb.models['CH2'].sketches['__edit__']
mdb.models['CH2'].parts['Part-1'].features['Solid extrude-1'].setValues(depth=
    0.5)
mdb.models['CH2'].parts['Part-1'].regenerate()
mdb.models['CH2'].parts['Part-1'].regenerate()
mdb.models['CH2'].materials.changeKey(fromName='DP1000', toName='CP1000')
mdb.models['CH2'].sections['Section-1'].setValues(material='CP1000', thickness=
    None)
mdb.models['CH2'].materials['CP1000'].Plastic(table=((547.3187706, 0.0), (
    875.9986899, 0.001), (915.7895779, 0.002), (936.535345, 0.003), (
    950.0382983, 0.004), (960.1576656, 0.005), (968.3939004, 0.006), (
    975.4212223, 0.007), (981.5897122, 0.008), (987.1062691, 0.009), (
    992.1061142, 0.01), (1026.652879, 0.02), (1048.26802, 0.03), (1064.270724, 
    0.04), (1077.078935, 0.05), (1087.807916, 0.06), (1097.068595, 0.07), (
    1105.233604, 0.08), (1112.547721, 0.09), (1119.180742, 0.1), (1125.25548, 
    0.11), (1130.86376, 0.12), (1136.076106, 0.13), (1140.947913, 0.14), (
    1145.523514, 0.15), (1149.838967, 0.16), (1153.924009, 0.17), (1157.803466, 
    0.18), (1161.498284, 0.19), (1165.026306, 0.2), (1168.402861, 0.21), (
    1171.641219, 0.22), (1174.752949, 0.23), (1177.748195, 0.24), (1180.63591, 
    0.25), (1183.424032, 0.26), (1186.119634, 0.27), (1188.729047, 0.28), (
    1191.257964, 0.29), (1193.711518, 0.3), (1196.094358, 0.31), (1198.410707, 
    0.32), (1200.664415, 0.33), (1202.858998, 0.34), (1204.99768, 0.35), (
    1207.083422, 0.36), (1209.118952, 0.37), (1211.106788, 0.38), (1213.04926, 
    0.39), (1214.948527, 0.4), (1216.806595, 0.41), (1218.625331, 0.42), (
    1220.406474, 0.43), (1222.151649, 0.44), (1223.862376, 0.45), (1225.540078, 
    0.46), (1227.186091, 0.47), (1228.801667, 0.48), (1230.387987, 0.49), (
    1231.946162, 0.5), (1233.477239, 0.51), (1234.982207, 0.52), (1236.462002, 
    0.53), (1237.917506, 0.54), (1239.349559, 0.55), (1240.758953, 0.56), (
    1242.146443, 0.57), (1243.512745, 0.58), (1244.858539, 0.59), (1246.184473, 
    0.6), (1247.491163, 0.61), (1248.779198, 0.62), (1250.049139, 0.63), (
    1251.301521, 0.64), (1252.536856, 0.65), (1253.755632, 0.66), (1254.958318, 
    0.67), (1256.145361, 0.68), (1257.31719, 0.69), (1258.474217, 0.7), (
    1259.616837, 0.71), (1260.745427, 0.72), (1261.860351, 0.73), (1262.961959, 
    0.74), (1264.050587, 0.75), (1265.126557, 0.76), (1266.190181, 0.77), (
    1267.241757, 0.78), (1268.281574, 0.79), (1269.309909, 0.8), (1270.327032, 
    0.81), (1271.3332, 0.82), (1272.328662, 0.83), (1273.31366, 0.84), (
    1274.288426, 0.85), (1275.253185, 0.86), (1276.208154, 0.87), (1277.153544, 
    0.88), (1278.089558, 0.89), (1279.016392, 0.9), (1279.934237, 0.91), (
    1280.843278, 0.92), (1281.743693, 0.93), (1282.635656, 0.94), (1283.519334, 
    0.95), (1284.394892, 0.96), (1285.262486, 0.97), (1286.12227, 0.98), (
    1286.974393, 0.99), (1287.819, 1.0), (1288.656231, 1.01), (1289.486223, 
    1.02), (1290.309108, 1.03), (1291.125015, 1.04), (1291.93407, 1.05), (
    1292.736395, 1.06), (1293.532108, 1.07), (1294.321325, 1.08), (1295.104159, 
    1.09), (1295.880718, 1.1), (1296.65111, 1.11), (1297.415438, 1.12), (
    1298.173804, 1.13), (1298.926306, 1.14), (1299.67304, 1.15), (1300.414101, 
    1.16), (1301.14958, 1.17), (1301.879565, 1.18), (1302.604145, 1.19), (
    1303.323403, 1.2), (1304.037423, 1.21), (1304.746286, 1.22), (1305.450072, 
    1.23), (1306.148856, 1.24), (1306.842715, 1.25), (1307.531722, 1.26), (
    1308.215949, 1.27), (1308.895467, 1.28), (1309.570345, 1.29), (1310.24065, 
    1.3), (1310.906447, 1.31), (1311.567801, 1.32), (1312.224776, 1.33), (
    1312.877432, 1.34), (1313.52583, 1.35), (1314.170028, 1.36), (1314.810086, 
    1.37), (1315.446059, 1.38), (1316.078002, 1.39), (1316.705971, 1.4), (
    1317.330017, 1.41), (1317.950193, 1.42), (1318.566551, 1.43), (1319.179139, 
    1.44), (1319.788008, 1.45), (1320.393205, 1.46), (1320.994777, 1.47), (
    1321.59277, 1.48), (1322.187229, 1.49), (1322.7782, 1.5), (1323.365725, 
    1.51), (1323.949847, 1.52), (1324.530608, 1.53), (1325.108049, 1.54), (
    1325.682211, 1.55), (1326.253133, 1.56), (1326.820854, 1.57), (1327.385412, 
    1.58), (1327.946845, 1.59), (1328.505189, 1.6), (1329.060481, 1.61), (
    1329.612756, 1.62), (1330.162049, 1.63), (1330.708393, 1.64), (1331.251824, 
    1.65), (1331.792374, 1.66), (1332.330075, 1.67), (1332.864959, 1.68), (
    1333.397059, 1.69), (1333.926403, 1.7), (1334.453024, 1.71), (1334.97695, 
    1.72), (1335.498211, 1.73), (1336.016837, 1.74), (1336.532854, 1.75), (
    1337.046292, 1.76), (1337.557177, 1.77), (1338.065537, 1.78), (1338.571398, 
    1.79), (1339.074787, 1.8), (1339.575728, 1.81), (1340.074248, 1.82), (
    1340.570371, 1.83), (1341.064122, 1.84), (1341.555525, 1.85), (1342.044604, 
    1.86), (1342.531381, 1.87), (1343.015881, 1.88), (1343.498126, 1.89), (
    1343.978138, 1.9), (1344.455939, 1.91), (1344.931551, 1.92), (1345.404995, 
    1.93), (1345.876293, 1.94), (1346.345465, 1.95), (1346.81253, 1.96), (
    1347.277511, 1.97), (1347.740426, 1.98), (1348.201295, 1.99), (1348.660136, 
    2.0), (1349.116971, 2.01), (1349.571815, 2.02), (1350.02469, 2.03), (
    1350.475611, 2.04), (1350.924598, 2.05), (1351.371669, 2.06), (1351.816839, 
    2.07), (1352.260128, 2.08), (1352.701551, 2.09), (1353.141125, 2.1), (
    1353.578867, 2.11), (1354.014794, 2.12), (1354.44892, 2.13), (1354.881263, 
    2.14), (1355.311837, 2.15), (1355.740659, 2.16), (1356.167742, 2.17), (
    1356.593103, 2.18), (1357.016755, 2.19), (1357.438715, 2.2), (1357.858995, 
    2.21), (1358.277611, 2.22), (1358.694576, 2.23), (1359.109904, 2.24), (
    1359.52361, 2.25), (1359.935705, 2.26), (1360.346205, 2.27), (1360.755121, 
    2.28), (1361.162467, 2.29), (1361.568256, 2.3), (1361.972501, 2.31), (
    1362.375213, 2.32), (1362.776406, 2.33), (1363.176092, 2.34), (1363.574282, 
    2.35), (1363.970989, 2.36), (1364.366224, 2.37), (1364.759999, 2.38), (
    1365.152325, 2.39), (1365.543215, 2.4), (1365.932678, 2.41), (1366.320727, 
    2.42), (1366.707371, 2.43), (1367.092623, 2.44), (1367.476492, 2.45), (
    1367.85899, 2.46), (1368.240126, 2.47), (1368.619911, 2.48), (1368.998355, 
    2.49), (1369.375469, 2.5), (1369.751262, 2.51), (1370.125744, 2.52), (
    1370.498924, 2.53), (1370.870814, 2.54), (1371.241421, 2.55), (1371.610756, 
    2.56), (1371.978827, 2.57), (1372.345645, 2.58), (1372.711217, 2.59), (
    1373.075554, 2.6), (1373.438663, 2.61), (1373.800555, 2.62), (1374.161237, 
    2.63), (1374.520718, 2.64), (1374.879007, 2.65), (1375.236111, 2.66), (
    1375.592041, 2.67), (1375.946802, 2.68), (1376.300405, 2.69), (1376.652857, 
    2.7), (1377.004165, 2.71), (1377.354339, 2.72), (1377.703385, 2.73), (
    1378.051311, 2.74), (1378.398126, 2.75), (1378.743836, 2.76), (1379.088449, 
    2.77), (1379.431973, 2.78), (1379.774414, 2.79), (1380.115781, 2.8), (
    1380.45608, 2.81), (1380.795318, 2.82), (1381.133503, 2.83), (1381.470642, 
    2.84), (1381.806741, 2.85), (1382.141807, 2.86), (1382.475847, 2.87), (
    1382.808868, 2.88), (1383.140876, 2.89), (1383.471878, 2.9), (1383.80188, 
    2.91), (1384.130889, 2.92), (1384.458912, 2.93), (1384.785954, 2.94), (
    1385.112022, 2.95), (1385.437121, 2.96), (1385.761259, 2.97), (1386.084441, 
    2.98), (1386.406673, 2.99), (1386.727962, 3.0)))
mdb.models['CH2'].rootAssembly.regenerate()
mdb.models['CH2'].rootAssembly.generateMesh(regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#20 ]', ), ))
mdb.models['CH2'].rootAssembly.generateMesh(regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#20 ]', ), ), seedConstraintOverride=ON)
mdb.models['CH2'].rootAssembly.generateMesh(regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH2'].rootAssembly.generateMesh(regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['CH2'].rootAssembly.generateMesh(regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['CH2'].rootAssembly.generateMesh(regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['CH2'].rootAssembly.generateMesh(regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['CH2'].rootAssembly.deleteMesh(regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#20 ]', ), ))
mdb.models['CH2'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#0 #1000 ]', ), ), size=0.1)
mdb.models['CH2'].rootAssembly.generateMesh(regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#20 ]', ), ))
mdb.models['CH2'].rootAssembly.Set(elements=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].elements.getSequenceFromMask(
    mask=('[#0:123 #2 ]', ), ), name='CrE')
mdb.models['CH2'].rootAssembly.Set(name='Disp', nodes=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].nodes.getSequenceFromMask(
    mask=('[#0:134 #8000000 #0 #80000000 #22045921 #c0810420 #36000600', 
    ' #40012828 #a014000 #8000003 ]', ), ))
mdb.models['CH2'].rootAssembly.Set(name='Force', nodes=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].nodes.getSequenceFromMask(
    mask=('[#0:134 #8000000 #0 #80000000 #22045921 #c0810420 #36000600', 
    ' #40012828 #a014000 #8000003 ]', ), ))
mdb.models['CH2'].boundaryConditions['Move'].setValues(u2=1.0)
mdb.jobs['CH2'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['CH2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'D19-0462', 'handle': 0, 'jobName': 'CH2'})
mdb.jobs['CH2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '15 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'CH2'})
mdb.jobs['CH2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE OPTION *BOUNDARY,TYPE=DISPLACEMENT HAS BEEN USED; CHECK STATUS FILE BETWEEN STEPS FOR WARNINGS ON ANY JUMPS PRESCRIBED ACROSS THE STEPS IN DISPLACEMENT VALUES OF TRANSLATIONAL DOF. FOR ROTATIONAL DOF MAKE SURE THAT THERE ARE NO SUCH JUMPS. ALL JUMPS IN DISPLACEMENTS ACROSS STEPS ARE IGNORED', 
    'jobName': 'CH2'})
mdb.jobs['CH2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'CH2'})
mdb.jobs['CH2']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'D19-0462', 'handle': 11440, 'jobName': 'CH2'})
mdb.jobs['CH2']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 2 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'CH2'})
mdb.jobs['CH2']._Message(COMPLETED, {'phase': PACKAGER_PHASE, 
    'message': 'Phase complete', 'jobName': 'CH2'})
mdb.jobs['CH2']._Message(STARTED, {'phase': EXPLICIT_PHASE, 
    'clientHost': 'D19-0462', 'handle': 26972, 'jobName': 'CH2'})
mdb.jobs['CH2']._Message(STATUS, {'totalTime': 0.0, 
    'stableTimeIncrement': 5.5712869873048e-09, 'stepTime': 0.0, 
    'totalEnergy': 7.39687457098626e-05, 'cpuTime': 0.0, 'jobName': 'CH2', 
    'step': 1, 'increment': 0, 'phase': EXPLICIT_PHASE, 
    'kineticEnergy': 7.39687457098626e-05})
mdb.jobs['CH2']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'CH2'})
mdb.jobs['CH2']._Message(COMPLETED, {'phase': EXPLICIT_PHASE, 
    'message': 'Phase complete', 'jobName': 'CH2'})
mdb.jobs['CH2']._Message(JOB_COMPLETED, {'time': 'Fri Feb 19 23:47:48 2021', 
    'jobName': 'CH2'})
mdb.models['CH4'].materials['DP1000'].Plastic(table=((547.3187706, 0.0), (
    875.9986899, 0.001), (915.7895779, 0.002), (936.535345, 0.003), (
    950.0382983, 0.004), (960.1576656, 0.005), (968.3939004, 0.006), (
    975.4212223, 0.007), (981.5897122, 0.008), (987.1062691, 0.009), (
    992.1061142, 0.01), (1026.652879, 0.02), (1048.26802, 0.03), (1064.270724, 
    0.04), (1077.078935, 0.05), (1087.807916, 0.06), (1097.068595, 0.07), (
    1105.233604, 0.08), (1112.547721, 0.09), (1119.180742, 0.1), (1125.25548, 
    0.11), (1130.86376, 0.12), (1136.076106, 0.13), (1140.947913, 0.14), (
    1145.523514, 0.15), (1149.838967, 0.16), (1153.924009, 0.17), (1157.803466, 
    0.18), (1161.498284, 0.19), (1165.026306, 0.2), (1168.402861, 0.21), (
    1171.641219, 0.22), (1174.752949, 0.23), (1177.748195, 0.24), (1180.63591, 
    0.25), (1183.424032, 0.26), (1186.119634, 0.27), (1188.729047, 0.28), (
    1191.257964, 0.29), (1193.711518, 0.3), (1196.094358, 0.31), (1198.410707, 
    0.32), (1200.664415, 0.33), (1202.858998, 0.34), (1204.99768, 0.35), (
    1207.083422, 0.36), (1209.118952, 0.37), (1211.106788, 0.38), (1213.04926, 
    0.39), (1214.948527, 0.4), (1216.806595, 0.41), (1218.625331, 0.42), (
    1220.406474, 0.43), (1222.151649, 0.44), (1223.862376, 0.45), (1225.540078, 
    0.46), (1227.186091, 0.47), (1228.801667, 0.48), (1230.387987, 0.49), (
    1231.946162, 0.5), (1233.477239, 0.51), (1234.982207, 0.52), (1236.462002, 
    0.53), (1237.917506, 0.54), (1239.349559, 0.55), (1240.758953, 0.56), (
    1242.146443, 0.57), (1243.512745, 0.58), (1244.858539, 0.59), (1246.184473, 
    0.6), (1247.491163, 0.61), (1248.779198, 0.62), (1250.049139, 0.63), (
    1251.301521, 0.64), (1252.536856, 0.65), (1253.755632, 0.66), (1254.958318, 
    0.67), (1256.145361, 0.68), (1257.31719, 0.69), (1258.474217, 0.7), (
    1259.616837, 0.71), (1260.745427, 0.72), (1261.860351, 0.73), (1262.961959, 
    0.74), (1264.050587, 0.75), (1265.126557, 0.76), (1266.190181, 0.77), (
    1267.241757, 0.78), (1268.281574, 0.79), (1269.309909, 0.8), (1270.327032, 
    0.81), (1271.3332, 0.82), (1272.328662, 0.83), (1273.31366, 0.84), (
    1274.288426, 0.85), (1275.253185, 0.86), (1276.208154, 0.87), (1277.153544, 
    0.88), (1278.089558, 0.89), (1279.016392, 0.9), (1279.934237, 0.91), (
    1280.843278, 0.92), (1281.743693, 0.93), (1282.635656, 0.94), (1283.519334, 
    0.95), (1284.394892, 0.96), (1285.262486, 0.97), (1286.12227, 0.98), (
    1286.974393, 0.99), (1287.819, 1.0), (1288.656231, 1.01), (1289.486223, 
    1.02), (1290.309108, 1.03), (1291.125015, 1.04), (1291.93407, 1.05), (
    1292.736395, 1.06), (1293.532108, 1.07), (1294.321325, 1.08), (1295.104159, 
    1.09), (1295.880718, 1.1), (1296.65111, 1.11), (1297.415438, 1.12), (
    1298.173804, 1.13), (1298.926306, 1.14), (1299.67304, 1.15), (1300.414101, 
    1.16), (1301.14958, 1.17), (1301.879565, 1.18), (1302.604145, 1.19), (
    1303.323403, 1.2), (1304.037423, 1.21), (1304.746286, 1.22), (1305.450072, 
    1.23), (1306.148856, 1.24), (1306.842715, 1.25), (1307.531722, 1.26), (
    1308.215949, 1.27), (1308.895467, 1.28), (1309.570345, 1.29), (1310.24065, 
    1.3), (1310.906447, 1.31), (1311.567801, 1.32), (1312.224776, 1.33), (
    1312.877432, 1.34), (1313.52583, 1.35), (1314.170028, 1.36), (1314.810086, 
    1.37), (1315.446059, 1.38), (1316.078002, 1.39), (1316.705971, 1.4), (
    1317.330017, 1.41), (1317.950193, 1.42), (1318.566551, 1.43), (1319.179139, 
    1.44), (1319.788008, 1.45), (1320.393205, 1.46), (1320.994777, 1.47), (
    1321.59277, 1.48), (1322.187229, 1.49), (1322.7782, 1.5), (1323.365725, 
    1.51), (1323.949847, 1.52), (1324.530608, 1.53), (1325.108049, 1.54), (
    1325.682211, 1.55), (1326.253133, 1.56), (1326.820854, 1.57), (1327.385412, 
    1.58), (1327.946845, 1.59), (1328.505189, 1.6), (1329.060481, 1.61), (
    1329.612756, 1.62), (1330.162049, 1.63), (1330.708393, 1.64), (1331.251824, 
    1.65), (1331.792374, 1.66), (1332.330075, 1.67), (1332.864959, 1.68), (
    1333.397059, 1.69), (1333.926403, 1.7), (1334.453024, 1.71), (1334.97695, 
    1.72), (1335.498211, 1.73), (1336.016837, 1.74), (1336.532854, 1.75), (
    1337.046292, 1.76), (1337.557177, 1.77), (1338.065537, 1.78), (1338.571398, 
    1.79), (1339.074787, 1.8), (1339.575728, 1.81), (1340.074248, 1.82), (
    1340.570371, 1.83), (1341.064122, 1.84), (1341.555525, 1.85), (1342.044604, 
    1.86), (1342.531381, 1.87), (1343.015881, 1.88), (1343.498126, 1.89), (
    1343.978138, 1.9), (1344.455939, 1.91), (1344.931551, 1.92), (1345.404995, 
    1.93), (1345.876293, 1.94), (1346.345465, 1.95), (1346.81253, 1.96), (
    1347.277511, 1.97), (1347.740426, 1.98), (1348.201295, 1.99), (1348.660136, 
    2.0), (1349.116971, 2.01), (1349.571815, 2.02), (1350.02469, 2.03), (
    1350.475611, 2.04), (1350.924598, 2.05), (1351.371669, 2.06), (1351.816839, 
    2.07), (1352.260128, 2.08), (1352.701551, 2.09), (1353.141125, 2.1), (
    1353.578867, 2.11), (1354.014794, 2.12), (1354.44892, 2.13), (1354.881263, 
    2.14), (1355.311837, 2.15), (1355.740659, 2.16), (1356.167742, 2.17), (
    1356.593103, 2.18), (1357.016755, 2.19), (1357.438715, 2.2), (1357.858995, 
    2.21), (1358.277611, 2.22), (1358.694576, 2.23), (1359.109904, 2.24), (
    1359.52361, 2.25), (1359.935705, 2.26), (1360.346205, 2.27), (1360.755121, 
    2.28), (1361.162467, 2.29), (1361.568256, 2.3), (1361.972501, 2.31), (
    1362.375213, 2.32), (1362.776406, 2.33), (1363.176092, 2.34), (1363.574282, 
    2.35), (1363.970989, 2.36), (1364.366224, 2.37), (1364.759999, 2.38), (
    1365.152325, 2.39), (1365.543215, 2.4), (1365.932678, 2.41), (1366.320727, 
    2.42), (1366.707371, 2.43), (1367.092623, 2.44), (1367.476492, 2.45), (
    1367.85899, 2.46), (1368.240126, 2.47), (1368.619911, 2.48), (1368.998355, 
    2.49), (1369.375469, 2.5), (1369.751262, 2.51), (1370.125744, 2.52), (
    1370.498924, 2.53), (1370.870814, 2.54), (1371.241421, 2.55), (1371.610756, 
    2.56), (1371.978827, 2.57), (1372.345645, 2.58), (1372.711217, 2.59), (
    1373.075554, 2.6), (1373.438663, 2.61), (1373.800555, 2.62), (1374.161237, 
    2.63), (1374.520718, 2.64), (1374.879007, 2.65), (1375.236111, 2.66), (
    1375.592041, 2.67), (1375.946802, 2.68), (1376.300405, 2.69), (1376.652857, 
    2.7), (1377.004165, 2.71), (1377.354339, 2.72), (1377.703385, 2.73), (
    1378.051311, 2.74), (1378.398126, 2.75), (1378.743836, 2.76), (1379.088449, 
    2.77), (1379.431973, 2.78), (1379.774414, 2.79), (1380.115781, 2.8), (
    1380.45608, 2.81), (1380.795318, 2.82), (1381.133503, 2.83), (1381.470642, 
    2.84), (1381.806741, 2.85), (1382.141807, 2.86), (1382.475847, 2.87), (
    1382.808868, 2.88), (1383.140876, 2.89), (1383.471878, 2.9), (1383.80188, 
    2.91), (1384.130889, 2.92), (1384.458912, 2.93), (1384.785954, 2.94), (
    1385.112022, 2.95), (1385.437121, 2.96), (1385.761259, 2.97), (1386.084441, 
    2.98), (1386.406673, 2.99), (1386.727962, 3.0)))
mdb.models['CH4'].materials.changeKey(fromName='DP1000', toName='CP1000')
mdb.models['CH6'].materials['DP1000'].Plastic(table=((547.3187706, 0.0), (
    875.9986899, 0.001), (915.7895779, 0.002), (936.535345, 0.003), (
    950.0382983, 0.004), (960.1576656, 0.005), (968.3939004, 0.006), (
    975.4212223, 0.007), (981.5897122, 0.008), (987.1062691, 0.009), (
    992.1061142, 0.01), (1026.652879, 0.02), (1048.26802, 0.03), (1064.270724, 
    0.04), (1077.078935, 0.05), (1087.807916, 0.06), (1097.068595, 0.07), (
    1105.233604, 0.08), (1112.547721, 0.09), (1119.180742, 0.1), (1125.25548, 
    0.11), (1130.86376, 0.12), (1136.076106, 0.13), (1140.947913, 0.14), (
    1145.523514, 0.15), (1149.838967, 0.16), (1153.924009, 0.17), (1157.803466, 
    0.18), (1161.498284, 0.19), (1165.026306, 0.2), (1168.402861, 0.21), (
    1171.641219, 0.22), (1174.752949, 0.23), (1177.748195, 0.24), (1180.63591, 
    0.25), (1183.424032, 0.26), (1186.119634, 0.27), (1188.729047, 0.28), (
    1191.257964, 0.29), (1193.711518, 0.3), (1196.094358, 0.31), (1198.410707, 
    0.32), (1200.664415, 0.33), (1202.858998, 0.34), (1204.99768, 0.35), (
    1207.083422, 0.36), (1209.118952, 0.37), (1211.106788, 0.38), (1213.04926, 
    0.39), (1214.948527, 0.4), (1216.806595, 0.41), (1218.625331, 0.42), (
    1220.406474, 0.43), (1222.151649, 0.44), (1223.862376, 0.45), (1225.540078, 
    0.46), (1227.186091, 0.47), (1228.801667, 0.48), (1230.387987, 0.49), (
    1231.946162, 0.5), (1233.477239, 0.51), (1234.982207, 0.52), (1236.462002, 
    0.53), (1237.917506, 0.54), (1239.349559, 0.55), (1240.758953, 0.56), (
    1242.146443, 0.57), (1243.512745, 0.58), (1244.858539, 0.59), (1246.184473, 
    0.6), (1247.491163, 0.61), (1248.779198, 0.62), (1250.049139, 0.63), (
    1251.301521, 0.64), (1252.536856, 0.65), (1253.755632, 0.66), (1254.958318, 
    0.67), (1256.145361, 0.68), (1257.31719, 0.69), (1258.474217, 0.7), (
    1259.616837, 0.71), (1260.745427, 0.72), (1261.860351, 0.73), (1262.961959, 
    0.74), (1264.050587, 0.75), (1265.126557, 0.76), (1266.190181, 0.77), (
    1267.241757, 0.78), (1268.281574, 0.79), (1269.309909, 0.8), (1270.327032, 
    0.81), (1271.3332, 0.82), (1272.328662, 0.83), (1273.31366, 0.84), (
    1274.288426, 0.85), (1275.253185, 0.86), (1276.208154, 0.87), (1277.153544, 
    0.88), (1278.089558, 0.89), (1279.016392, 0.9), (1279.934237, 0.91), (
    1280.843278, 0.92), (1281.743693, 0.93), (1282.635656, 0.94), (1283.519334, 
    0.95), (1284.394892, 0.96), (1285.262486, 0.97), (1286.12227, 0.98), (
    1286.974393, 0.99), (1287.819, 1.0), (1288.656231, 1.01), (1289.486223, 
    1.02), (1290.309108, 1.03), (1291.125015, 1.04), (1291.93407, 1.05), (
    1292.736395, 1.06), (1293.532108, 1.07), (1294.321325, 1.08), (1295.104159, 
    1.09), (1295.880718, 1.1), (1296.65111, 1.11), (1297.415438, 1.12), (
    1298.173804, 1.13), (1298.926306, 1.14), (1299.67304, 1.15), (1300.414101, 
    1.16), (1301.14958, 1.17), (1301.879565, 1.18), (1302.604145, 1.19), (
    1303.323403, 1.2), (1304.037423, 1.21), (1304.746286, 1.22), (1305.450072, 
    1.23), (1306.148856, 1.24), (1306.842715, 1.25), (1307.531722, 1.26), (
    1308.215949, 1.27), (1308.895467, 1.28), (1309.570345, 1.29), (1310.24065, 
    1.3), (1310.906447, 1.31), (1311.567801, 1.32), (1312.224776, 1.33), (
    1312.877432, 1.34), (1313.52583, 1.35), (1314.170028, 1.36), (1314.810086, 
    1.37), (1315.446059, 1.38), (1316.078002, 1.39), (1316.705971, 1.4), (
    1317.330017, 1.41), (1317.950193, 1.42), (1318.566551, 1.43), (1319.179139, 
    1.44), (1319.788008, 1.45), (1320.393205, 1.46), (1320.994777, 1.47), (
    1321.59277, 1.48), (1322.187229, 1.49), (1322.7782, 1.5), (1323.365725, 
    1.51), (1323.949847, 1.52), (1324.530608, 1.53), (1325.108049, 1.54), (
    1325.682211, 1.55), (1326.253133, 1.56), (1326.820854, 1.57), (1327.385412, 
    1.58), (1327.946845, 1.59), (1328.505189, 1.6), (1329.060481, 1.61), (
    1329.612756, 1.62), (1330.162049, 1.63), (1330.708393, 1.64), (1331.251824, 
    1.65), (1331.792374, 1.66), (1332.330075, 1.67), (1332.864959, 1.68), (
    1333.397059, 1.69), (1333.926403, 1.7), (1334.453024, 1.71), (1334.97695, 
    1.72), (1335.498211, 1.73), (1336.016837, 1.74), (1336.532854, 1.75), (
    1337.046292, 1.76), (1337.557177, 1.77), (1338.065537, 1.78), (1338.571398, 
    1.79), (1339.074787, 1.8), (1339.575728, 1.81), (1340.074248, 1.82), (
    1340.570371, 1.83), (1341.064122, 1.84), (1341.555525, 1.85), (1342.044604, 
    1.86), (1342.531381, 1.87), (1343.015881, 1.88), (1343.498126, 1.89), (
    1343.978138, 1.9), (1344.455939, 1.91), (1344.931551, 1.92), (1345.404995, 
    1.93), (1345.876293, 1.94), (1346.345465, 1.95), (1346.81253, 1.96), (
    1347.277511, 1.97), (1347.740426, 1.98), (1348.201295, 1.99), (1348.660136, 
    2.0), (1349.116971, 2.01), (1349.571815, 2.02), (1350.02469, 2.03), (
    1350.475611, 2.04), (1350.924598, 2.05), (1351.371669, 2.06), (1351.816839, 
    2.07), (1352.260128, 2.08), (1352.701551, 2.09), (1353.141125, 2.1), (
    1353.578867, 2.11), (1354.014794, 2.12), (1354.44892, 2.13), (1354.881263, 
    2.14), (1355.311837, 2.15), (1355.740659, 2.16), (1356.167742, 2.17), (
    1356.593103, 2.18), (1357.016755, 2.19), (1357.438715, 2.2), (1357.858995, 
    2.21), (1358.277611, 2.22), (1358.694576, 2.23), (1359.109904, 2.24), (
    1359.52361, 2.25), (1359.935705, 2.26), (1360.346205, 2.27), (1360.755121, 
    2.28), (1361.162467, 2.29), (1361.568256, 2.3), (1361.972501, 2.31), (
    1362.375213, 2.32), (1362.776406, 2.33), (1363.176092, 2.34), (1363.574282, 
    2.35), (1363.970989, 2.36), (1364.366224, 2.37), (1364.759999, 2.38), (
    1365.152325, 2.39), (1365.543215, 2.4), (1365.932678, 2.41), (1366.320727, 
    2.42), (1366.707371, 2.43), (1367.092623, 2.44), (1367.476492, 2.45), (
    1367.85899, 2.46), (1368.240126, 2.47), (1368.619911, 2.48), (1368.998355, 
    2.49), (1369.375469, 2.5), (1369.751262, 2.51), (1370.125744, 2.52), (
    1370.498924, 2.53), (1370.870814, 2.54), (1371.241421, 2.55), (1371.610756, 
    2.56), (1371.978827, 2.57), (1372.345645, 2.58), (1372.711217, 2.59), (
    1373.075554, 2.6), (1373.438663, 2.61), (1373.800555, 2.62), (1374.161237, 
    2.63), (1374.520718, 2.64), (1374.879007, 2.65), (1375.236111, 2.66), (
    1375.592041, 2.67), (1375.946802, 2.68), (1376.300405, 2.69), (1376.652857, 
    2.7), (1377.004165, 2.71), (1377.354339, 2.72), (1377.703385, 2.73), (
    1378.051311, 2.74), (1378.398126, 2.75), (1378.743836, 2.76), (1379.088449, 
    2.77), (1379.431973, 2.78), (1379.774414, 2.79), (1380.115781, 2.8), (
    1380.45608, 2.81), (1380.795318, 2.82), (1381.133503, 2.83), (1381.470642, 
    2.84), (1381.806741, 2.85), (1382.141807, 2.86), (1382.475847, 2.87), (
    1382.808868, 2.88), (1383.140876, 2.89), (1383.471878, 2.9), (1383.80188, 
    2.91), (1384.130889, 2.92), (1384.458912, 2.93), (1384.785954, 2.94), (
    1385.112022, 2.95), (1385.437121, 2.96), (1385.761259, 2.97), (1386.084441, 
    2.98), (1386.406673, 2.99), (1386.727962, 3.0)))
mdb.models['CH6'].materials.changeKey(fromName='DP1000', toName='CP1000')
mdb.models['CH4'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['CH4'].parts['Part-1'].features['Solid extrude-1'].sketch)
mdb.models['CH4'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['CH4'].sketches['__edit__'], upToFeature=
    mdb.models['CH4'].parts['Part-1'].features['Solid extrude-1'])
del mdb.models['CH4'].sketches['__edit__']
mdb.models['CH4'].parts['Part-1'].regenerate()
mdb.models['CH3'].parts['Part-1'].regenerate()
mdb.models['CH2'].parts['Part-1'].regenerate()
mdb.models['CH4'].sections['Section-1'].setValues(material='CP1000', thickness=
    None)
mdb.models['CH4'].rootAssembly.regenerate()
mdb.models['CH4'].rootAssembly.generateMesh(regions=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['CH4'].rootAssembly.generateMesh(regions=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#10 ]', ), ), seedConstraintOverride=ON)
mdb.models['CH4'].rootAssembly.generateMesh(regions=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['CH4'].rootAssembly.generateMesh(regions=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH4'].rootAssembly.generateMesh(regions=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['CH4'].rootAssembly.generateMesh(regions=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['CH4'].rootAssembly.Set(name='Disp', nodes=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].nodes.getSequenceFromMask(
    mask=('[#0:327 #39fe00 #200848 #40004000 #103c0080 #400051 #200402', 
    ' #10220200 #400 #100 ]', ), ))
mdb.models['CH4'].rootAssembly.Set(name='Force', nodes=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].nodes.getSequenceFromMask(
    mask=('[#0:327 #39fe00 #200848 #40004000 #103c0080 #400051 #200402', 
    ' #10220200 #400 #100 ]', ), ))
mdb.models['CH4'].rootAssembly.Set(elements=
    mdb.models['CH4'].rootAssembly.instances['Part-1-1'].elements.getSequenceFromMask(
    mask=('[#0:110 #80000 ]', ), ), name='CrE')
mdb.models['CH4'].boundaryConditions['Move'].setValues(u2=1.0)
mdb.jobs['CH4'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['CH4']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'D19-0462', 'handle': 0, 'jobName': 'CH4'})
del mdb.jobs['CH12']
mdb.jobs['CH4']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE OPTION *BOUNDARY,TYPE=DISPLACEMENT HAS BEEN USED; CHECK STATUS FILE BETWEEN STEPS FOR WARNINGS ON ANY JUMPS PRESCRIBED ACROSS THE STEPS IN DISPLACEMENT VALUES OF TRANSLATIONAL DOF. FOR ROTATIONAL DOF MAKE SURE THAT THERE ARE NO SUCH JUMPS. ALL JUMPS IN DISPLACEMENTS ACROSS STEPS ARE IGNORED', 
    'jobName': 'CH4'})
mdb.jobs['CH4']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'CH4'})
mdb.jobs['CH4']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'D19-0462', 'handle': 26728, 'jobName': 'CH4'})
mdb.jobs['CH4']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 1 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'CH4'})
mdb.jobs['CH4']._Message(COMPLETED, {'phase': PACKAGER_PHASE, 
    'message': 'Phase complete', 'jobName': 'CH4'})
mdb.jobs['CH4']._Message(STARTED, {'phase': EXPLICIT_PHASE, 
    'clientHost': 'D19-0462', 'handle': 10040, 'jobName': 'CH4'})
mdb.jobs['CH4']._Message(STATUS, {'totalTime': 0.0, 
    'stableTimeIncrement': 6.09186168176734e-09, 'stepTime': 0.0, 
    'totalEnergy': 7.66585144447163e-05, 'cpuTime': 0.0, 'jobName': 'CH4', 
    'step': 1, 'increment': 0, 'phase': EXPLICIT_PHASE, 
    'kineticEnergy': 7.66585144447163e-05})
mdb.jobs['CH4']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'CH4'})
mdb.jobs['CH4']._Message(COMPLETED, {'phase': EXPLICIT_PHASE, 
    'message': 'Phase complete', 'jobName': 'CH4'})
mdb.jobs['CH4']._Message(JOB_COMPLETED, {'time': 'Fri Feb 19 23:52:07 2021', 
    'jobName': 'CH4'})
mdb.models['CH6'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['CH6'].parts['Part-1'].features['Solid extrude-1'].sketch)
mdb.models['CH6'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['CH6'].sketches['__edit__'], upToFeature=
    mdb.models['CH6'].parts['Part-1'].features['Solid extrude-1'])
mdb.models['CH6'].sketches['__edit__'].dimensions[0].setValues(value=7.5)
mdb.models['CH6'].sketches['__edit__'].dimensions[1].setValues(value=15)
mdb.models['CH6'].parts['Part-1'].features['Solid extrude-1'].setValues(sketch=
    mdb.models['CH6'].sketches['__edit__'])
del mdb.models['CH6'].sketches['__edit__']
mdb.models['CH6'].parts['Part-1'].features['Solid extrude-1'].setValues(depth=
    0.5)
mdb.models['CH6'].parts['Part-1'].regenerate()
mdb.models['CH6'].parts['Part-1'].regenerate()
mdb.models['CH6'].sections['Section-1'].setValues(material='CP1000', thickness=
    None)
mdb.models['CH6'].rootAssembly.regenerate()
mdb.models['CH6'].rootAssembly.generateMesh(regions=
    mdb.models['CH6'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['CH6'].rootAssembly.generateMesh(regions=
    mdb.models['CH6'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['CH6'].rootAssembly.generateMesh(regions=
    mdb.models['CH6'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['CH6'].rootAssembly.generateMesh(regions=
    mdb.models['CH6'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['CH6'].rootAssembly.generateMesh(regions=
    mdb.models['CH6'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH6'].rootAssembly.Set(name='Disp', nodes=
    mdb.models['CH6'].rootAssembly.instances['Part-1-1'].nodes.getSequenceFromMask(
    mask=(
    '[#0:419 #14000000 #84016500 #82015000 #82010500 #20840080 #1000a204', 
    ' #6004 #8161 ]', ), ))
mdb.models['CH6'].rootAssembly.Set(name='Force', nodes=
    mdb.models['CH6'].rootAssembly.instances['Part-1-1'].nodes.getSequenceFromMask(
    mask=(
    '[#0:419 #14000000 #84016500 #82015000 #82010500 #20840080 #1000a204', 
    ' #6004 #8161 ]', ), ))
mdb.models['CH6'].rootAssembly.Set(elements=
    mdb.models['CH6'].rootAssembly.instances['Part-1-1'].elements.getSequenceFromMask(
    mask=('[#0:171 #10000000 ]', ), ), name='CrE')
mdb.models['CH6'].boundaryConditions['Move'].setValues(u2=1.0)
mdb.jobs['CH6'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['CH6']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'D19-0462', 'handle': 0, 'jobName': 'CH6'})
mdb.jobs['CH6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE OPTION *BOUNDARY,TYPE=DISPLACEMENT HAS BEEN USED; CHECK STATUS FILE BETWEEN STEPS FOR WARNINGS ON ANY JUMPS PRESCRIBED ACROSS THE STEPS IN DISPLACEMENT VALUES OF TRANSLATIONAL DOF. FOR ROTATIONAL DOF MAKE SURE THAT THERE ARE NO SUCH JUMPS. ALL JUMPS IN DISPLACEMENTS ACROSS STEPS ARE IGNORED', 
    'jobName': 'CH6'})
mdb.jobs['CH6']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'CH6'})
mdb.jobs['CH6']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'D19-0462', 'handle': 25016, 'jobName': 'CH6'})
mdb.jobs['CH6']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 1 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'CH6'})
mdb.jobs['CH6']._Message(COMPLETED, {'phase': PACKAGER_PHASE, 
    'message': 'Phase complete', 'jobName': 'CH6'})
mdb.jobs['CH6']._Message(STARTED, {'phase': EXPLICIT_PHASE, 
    'clientHost': 'D19-0462', 'handle': 14180, 'jobName': 'CH6'})
mdb.jobs['CH6']._Message(STATUS, {'totalTime': 0.0, 
    'stableTimeIncrement': 5.4009920980036e-09, 'stepTime': 0.0, 
    'totalEnergy': 7.12789769750088e-05, 'cpuTime': 0.100000001490116, 
    'jobName': 'CH6', 'step': 1, 'increment': 0, 'phase': EXPLICIT_PHASE, 
    'kineticEnergy': 7.12789769750088e-05})
mdb.jobs['CH6']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'CH6'})
mdb.jobs['CH6']._Message(COMPLETED, {'phase': EXPLICIT_PHASE, 
    'message': 'Phase complete', 'jobName': 'CH6'})
mdb.jobs['CH6']._Message(JOB_COMPLETED, {'time': 'Fri Feb 19 23:59:16 2021', 
    'jobName': 'CH6'})
# Save by liuw7 on 2021_02_20-00.00.24; build 2017 2016_09_28-00.54.59 126836
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(name='CH2_fine', objectToCopy=mdb.models['CH2'])
mdb.models['CH2_fine'].rootAssembly.deleteMesh(regions=
    mdb.models['CH2_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#38 ]', ), ))
mdb.models['CH2_fine'].rootAssembly.seedEdgeBySize(constraint=AS_IS, 
    deviationFactor=0.1, edges=
    mdb.models['CH2_fine'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#10000000 #1403400 ]', ), ), size=0.02)
mdb.models['CH2_fine'].rootAssembly.deleteMesh(regions=
    mdb.models['CH2_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#6 ]', ), ))
mdb.models['CH2_fine'].rootAssembly.seedEdgeBySize(deviationFactor=0.1, edges=
    mdb.models['CH2_fine'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#2000000 ]', ), ), size=0.2)
mdb.models['CH2_fine'].rootAssembly.generateMesh(regions=
    mdb.models['CH2_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#20 ]', ), ))
mdb.models['CH2_fine'].rootAssembly.generateMesh(regions=
    mdb.models['CH2_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#20 ]', ), ), seedConstraintOverride=ON)
mdb.models['CH2_fine'].rootAssembly.generateMesh(regions=
    mdb.models['CH2_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH2_fine'].rootAssembly.deleteMesh(regions=
    mdb.models['CH2_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#28 ]', ), ))
mdb.models['CH2_fine'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH2_fine'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#0 #80000 ]', ), ), size=0.02)
mdb.models['CH2_fine'].rootAssembly.generateMesh(regions=
    mdb.models['CH2_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#20 ]', ), ))
mdb.models['CH2_fine'].rootAssembly.generateMesh(regions=
    mdb.models['CH2_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH2_fine'].rootAssembly.generateMesh(regions=
    mdb.models['CH2_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#28 ]', ), ), seedConstraintOverride=ON)
mdb.models['CH2_fine'].rootAssembly.deleteMesh(regions=
    mdb.models['CH2_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#28 ]', ), ))
mdb.models['CH2_fine'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH2_fine'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#0 #1 ]', ), ), size=0.02)
mdb.models['CH2_fine'].rootAssembly.generateMesh(regions=
    mdb.models['CH2_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#20 ]', ), ))
mdb.models['CH2_fine'].rootAssembly.generateMesh(regions=
    mdb.models['CH2_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH2_fine'].rootAssembly.generateMesh(regions=
    mdb.models['CH2_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['CH2_fine'].rootAssembly.generateMesh(regions=
    mdb.models['CH2_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['CH2_fine'].rootAssembly.generateMesh(regions=
    mdb.models['CH2_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['CH2_fine'].rootAssembly.deleteMesh(regions=
    mdb.models['CH2_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#18 ]', ), ))
mdb.models['CH2_fine'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH2_fine'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#0 #2 ]', ), ), size=0.05)
mdb.models['CH2_fine'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH2_fine'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#0 #2 ]', ), ), size=0.1)
mdb.models['CH2_fine'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH2_fine'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#0 #20 ]', ), ), size=0.05)
mdb.models['CH2_fine'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH2_fine'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#0 #40 ]', ), ), size=0.05)
mdb.models['CH2_fine'].rootAssembly.generateMesh(regions=
    mdb.models['CH2_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH2_fine'].rootAssembly.generateMesh(regions=
    mdb.models['CH2_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['CH2'].parts['Part-1'].features['Datum plane-1'].setValues(offset=
    0.5)
mdb.models['CH2'].parts['Part-1'].regenerate()
mdb.models['CH2'].parts['Part-1'].regenerate()
mdb.models['CH2'].rootAssembly.regenerate()
mdb.models['CH2'].rootAssembly.generateMesh(regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#20 ]', ), ))
mdb.models['CH2'].parts['Part-1'].features['Datum plane-1'].setValues(offset=
    0.6)
mdb.models['CH2'].parts['Part-1'].regenerate()
mdb.models['CH2'].parts['Part-1'].regenerate()
mdb.models['CH2'].rootAssembly.regenerate()
mdb.models['CH2'].rootAssembly.generateMesh(regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#20 ]', ), ))
mdb.models['CH2'].rootAssembly.generateMesh(regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#20 ]', ), ), seedConstraintOverride=ON)
mdb.models['CH2'].rootAssembly.generateMesh(regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH2'].rootAssembly.generateMesh(regions=
    mdb.models['CH2'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['CH2_fine'].parts['Part-1'].features['Datum plane-1'].setValues(
    offset=0.5)
mdb.models['CH2_fine'].parts['Part-1'].regenerate()
mdb.models['CH2_fine'].parts['Part-1'].regenerate()
mdb.models['CH2_fine'].rootAssembly.regenerate()
mdb.models['CH2_fine'].rootAssembly.generateMesh(regions=
    mdb.models['CH2_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#20 ]', ), ))
mdb.models['CH2_fine'].rootAssembly.generateMesh(regions=
    mdb.models['CH2_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#20 ]', ), ))
mdb.models['CH2_fine'].rootAssembly.generateMesh(regions=
    mdb.models['CH2_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#20 ]', ), ), seedConstraintOverride=ON)
mdb.models['CH2_fine'].rootAssembly.generateMesh(regions=
    mdb.models['CH2_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH2_fine'].parts['Part-1'].regenerate()
mdb.models['CH2_fine'].parts['Part-1'].regenerate()
mdb.models['CH2_fine'].rootAssembly.deleteMesh(regions=
    mdb.models['CH2_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#20 ]', ), ))
mdb.models['CH2_fine'].rootAssembly.setSeedConstraints(constraint=FIXED, edges=
    mdb.models['CH2_fine'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#0 #2000 ]', ), ))
mdb.models['CH2_fine'].rootAssembly.deleteMesh(regions=
    mdb.models['CH2_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH2_fine'].rootAssembly.setSeedConstraints(constraint=FREE, edges=
    mdb.models['CH2_fine'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#0 #400 ]', ), ))
mdb.models['CH2_fine'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['CH2_fine'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#0 #800 ]', ), ), size=0.02)
mdb.models['CH2_fine'].rootAssembly.generateMesh(regions=
    mdb.models['CH2_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#20 ]', ), ))
mdb.models['CH2_fine'].rootAssembly.generateMesh(regions=
    mdb.models['CH2_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
# Save by liuw7 on 2021_02_22-19.16.43; build 2017 2016_09_28-00.54.59 126836
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(name='CH4_fine', objectToCopy=mdb.models['CH4'])
mdb.models['CH4_fine'].parts['Part-1'].features['Datum plane-2'].setValues(
    offset=0.8)
mdb.models['CH4_fine'].parts['Part-1'].regenerate()
mdb.models['CH4_fine'].parts['Part-1'].regenerate()
mdb.models['CH4_fine'].parts['Part-1'].features['Datum plane-2'].setValues(
    offset=0.6)
mdb.models['CH4_fine'].parts['Part-1'].regenerate()
mdb.models['CH4_fine'].parts['Part-1'].regenerate()
mdb.models['CH4_fine'].rootAssembly.regenerate()
mdb.models['CH4_fine'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#0 #20 ]', ), ), size=0.02)
mdb.models['CH4_fine'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#0 #10 ]', ), ), size=0.02)
mdb.models['CH4_fine'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#0 #400 ]', ), ), size=0.02)
mdb.models['CH4_fine'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#0 #40 ]', ), ), size=0.02)
mdb.models['CH4_fine'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#0 #8 ]', ), ), size=0.02)
mdb.models['CH4_fine'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#0 #4000 ]', ), ), size=0.1)
mdb.models['CH4_fine'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#0 #1 ]', ), ), size=0.1)
mdb.models['CH4_fine'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#0 #10000 ]', ), ), size=0.1)
mdb.models['CH4_fine'].rootAssembly.generateMesh(regions=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['CH4_fine'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#0 #2000 ]', ), ), size=0.1)
mdb.models['CH4_fine'].rootAssembly.generateMesh(regions=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['CH4_fine'].rootAssembly.generateMesh(regions=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#10 ]', ), ), seedConstraintOverride=ON)
mdb.models['CH4_fine'].rootAssembly.generateMesh(regions=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['CH4_fine'].rootAssembly.generateMesh(regions=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#1f ]', ), ), seedConstraintOverride=ON)
mdb.models['CH4_fine'].rootAssembly.deleteMesh(regions=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#1d ]', ), ))
mdb.models['CH4_fine'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#1000000 ]', ), ), size=0.02)
mdb.models['CH4_fine'].rootAssembly.generateMesh(regions=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['CH4_fine'].rootAssembly.generateMesh(regions=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['CH4_fine'].rootAssembly.generateMesh(regions=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH4_fine'].rootAssembly.generateMesh(regions=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['CH4_fine'].rootAssembly.deleteMesh(regions=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#c ]', ), ))
mdb.models['CH4_fine'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#80000 ]', ), ), size=0.2)
mdb.models['CH4_fine'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#0 #1 ]', ), ), size=0.2)
mdb.models['CH4_fine'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#0 #6000 ]', ), ), size=0.2)
mdb.models['CH4_fine'].rootAssembly.generateMesh(regions=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['CH4_fine'].rootAssembly.generateMesh(regions=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH4_fine'].rootAssembly.deleteMesh(regions=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['CH4_fine'].rootAssembly.setSeedConstraints(constraint=FIXED, edges=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#0 #6000 ]', ), ))
mdb.models['CH4_fine'].rootAssembly.generateMesh(regions=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['CH4_fine'].rootAssembly.deleteMesh(regions=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH4_fine'].rootAssembly.setSweepPath(edge=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].edges[19], 
    region=mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].cells[3], 
    sense=REVERSE)
mdb.models['CH4_fine'].rootAssembly.deleteMesh(regions=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['CH4_fine'].rootAssembly.setSweepPath(edge=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].edges[13], 
    region=mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].cells[0], 
    sense=FORWARD)
mdb.models['CH4_fine'].rootAssembly.deleteMesh(regions=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['CH4_fine'].rootAssembly.seedEdgeByNumber(constraint=FIXED, edges=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#2000 ]', ), ), number=3)
mdb.models['CH4_fine'].rootAssembly.deleteMesh(regions=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['CH4_fine'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#8000 ]', ), ), size=0.2)
mdb.models['CH4_fine'].rootAssembly.generateMesh(regions=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['CH4_fine'].rootAssembly.generateMesh(regions=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH4_fine'].rootAssembly.generateMesh(regions=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['CH4_fine'].rootAssembly.generateMesh(regions=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['CH4_fine'].rootAssembly.deleteMesh(regions=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#d ]', ), ))
mdb.models['CH4_fine'].rootAssembly.seedEdgeBySize(constraint=FIXED, 
    deviationFactor=0.1, edges=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#80000 ]', ), ), size=0.5)
mdb.models['CH4_fine'].rootAssembly.generateMesh(regions=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['CH4_fine'].rootAssembly.generateMesh(regions=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH4_fine'].rootAssembly.generateMesh(regions=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['CH4_fine'].rootAssembly.generateMesh(regions=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), seedConstraintOverride=ON)
mdb.models['CH4_fine'].rootAssembly.generateMesh(regions=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['CH4_fine'].rootAssembly.generateMesh(regions=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['CH4_fine'].rootAssembly.Set(name='Force', nodes=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].nodes.getSequenceFromMask(
    mask=('[#0:10955 #f00000 #c000000 #30000 #0:3 #f0000000 #f0fffff ]', ), ))
mdb.models['CH4_fine'].rootAssembly.Set(name='Disp', nodes=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].nodes.getSequenceFromMask(
    mask=('[#0:10955 #f00000 #c000000 #30000 #0:3 #f0000000 #f0fffff ]', ), ))
mdb.models['CH4_fine'].rootAssembly.Set(elements=
    mdb.models['CH4_fine'].rootAssembly.instances['Part-1-1'].elements.getSequenceFromMask(
    mask=('[#0:6562 #8000 ]', ), ), name='CrE')
mdb.models['CH2_fine'].rootAssembly.Set(name='Force', nodes=
    mdb.models['CH2_fine'].rootAssembly.instances['Part-1-1'].nodes.getSequenceFromMask(
    mask=('[#0 #800 #0 #59218000 #4202204 #600c081 #28283600', 
    ' #40004001 #30a01 #800 ]', ), ))
mdb.models['CH2_fine'].rootAssembly.Set(name='Disp', nodes=
    mdb.models['CH2_fine'].rootAssembly.instances['Part-1-1'].nodes.getSequenceFromMask(
    mask=('[#0 #800 #0 #59218000 #4202204 #600c081 #28283600', 
    ' #40004001 #30a01 #800 ]', ), ))
mdb.models['CH2_fine'].rootAssembly.Set(elements=
    mdb.models['CH2_fine'].rootAssembly.instances['Part-1-1'].elements.getSequenceFromMask(
    mask=('[#0:401 #2 ]', ), ), name='CrE')
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='CH4_fine', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='CH4F', nodalOutputPrecision=SINGLE, 
    numCpus=1, numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='CH2_fine', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='CH2F', nodalOutputPrecision=SINGLE, 
    numCpus=1, numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['CH2F'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['CH4F'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['CH2F']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'D19-0462', 'handle': 0, 'jobName': 'CH2F'})
mdb.jobs['CH4F']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'D19-0462', 'handle': 0, 'jobName': 'CH4F'})
mdb.jobs['CH2F']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '25 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'CH2F'})
mdb.jobs['CH2F']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE OPTION *BOUNDARY,TYPE=DISPLACEMENT HAS BEEN USED; CHECK STATUS FILE BETWEEN STEPS FOR WARNINGS ON ANY JUMPS PRESCRIBED ACROSS THE STEPS IN DISPLACEMENT VALUES OF TRANSLATIONAL DOF. FOR ROTATIONAL DOF MAKE SURE THAT THERE ARE NO SUCH JUMPS. ALL JUMPS IN DISPLACEMENTS ACROSS STEPS ARE IGNORED', 
    'jobName': 'CH2F'})
mdb.jobs['CH2F']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'CH2F'})
mdb.jobs['CH2F']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'D19-0462', 'handle': 24344, 'jobName': 'CH2F'})
mdb.jobs['CH2F']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 2 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'CH2F'})
mdb.jobs['CH2F']._Message(COMPLETED, {'phase': PACKAGER_PHASE, 
    'message': 'Phase complete', 'jobName': 'CH2F'})
mdb.jobs['CH4F']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'CH4F'})
mdb.jobs['CH4F']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE OPTION *BOUNDARY,TYPE=DISPLACEMENT HAS BEEN USED; CHECK STATUS FILE BETWEEN STEPS FOR WARNINGS ON ANY JUMPS PRESCRIBED ACROSS THE STEPS IN DISPLACEMENT VALUES OF TRANSLATIONAL DOF. FOR ROTATIONAL DOF MAKE SURE THAT THERE ARE NO SUCH JUMPS. ALL JUMPS IN DISPLACEMENTS ACROSS STEPS ARE IGNORED', 
    'jobName': 'CH4F'})
mdb.jobs['CH4F']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'CH4F'})
mdb.jobs['CH2F']._Message(STARTED, {'phase': EXPLICIT_PHASE, 
    'clientHost': 'D19-0462', 'handle': 9260, 'jobName': 'CH2F'})
mdb.jobs['CH2F']._Message(STATUS, {'totalTime': 0.0, 
    'stableTimeIncrement': 1.28950039535169e-09, 'stepTime': 0.0, 
    'totalEnergy': 7.39687457098626e-05, 'cpuTime': 1.09999990463257, 
    'jobName': 'CH2F', 'step': 1, 'increment': 0, 'phase': EXPLICIT_PHASE, 
    'kineticEnergy': 7.39687457098626e-05})
mdb.jobs['CH2F']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'CH2F'})
mdb.jobs['CH2F']._Message(COMPLETED, {'phase': EXPLICIT_PHASE, 
    'message': 'Phase complete', 'jobName': 'CH2F'})
mdb.jobs['CH4F']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'D19-0462', 'handle': 7968, 'jobName': 'CH4F'})
mdb.jobs['CH4F']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 2 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'CH4F'})
mdb.jobs['CH2F']._Message(JOB_COMPLETED, {'time': 'Mon Feb 22 19:29:22 2021', 
    'jobName': 'CH2F'})
mdb.jobs['CH4F']._Message(COMPLETED, {'phase': PACKAGER_PHASE, 
    'message': 'Phase complete', 'jobName': 'CH4F'})
mdb.jobs['CH4F']._Message(STARTED, {'phase': EXPLICIT_PHASE, 
    'clientHost': 'D19-0462', 'handle': 27132, 'jobName': 'CH4F'})
mdb.jobs['CH4F']._Message(STATUS, {'totalTime': 0.0, 
    'stableTimeIncrement': 1.33306321536963e-09, 'stepTime': 0.0, 
    'totalEnergy': 7.66585144447163e-05, 'cpuTime': 1.29999995231628, 
    'jobName': 'CH4F', 'step': 1, 'increment': 0, 'phase': EXPLICIT_PHASE, 
    'kineticEnergy': 7.66585144447163e-05})
mdb.jobs['CH4F']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'CH4F'})
mdb.jobs['CH4F']._Message(COMPLETED, {'phase': EXPLICIT_PHASE, 
    'message': 'Phase complete', 'jobName': 'CH4F'})
mdb.jobs['CH4F']._Message(JOB_COMPLETED, {'time': 'Mon Feb 22 19:29:35 2021', 
    'jobName': 'CH4F'})
# Save by liuw7 on 2021_02_22-21.47.49; build 2017 2016_09_28-00.54.59 126836
