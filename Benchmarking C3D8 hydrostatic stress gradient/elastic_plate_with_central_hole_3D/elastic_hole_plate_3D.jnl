from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models.changeKey(fromName='Model-1', toName='Model-2D')
mdb.Model(modelType=STANDARD_EXPLICIT, name='Model-3D')
mdb.models['Model-3D'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-3D'].sketches['__profile__'].rectangle(point1=(0.0, 0.0), 
    point2=(0.053, 0.06))
del mdb.models['Model-3D'].sketches['__profile__']
mdb.models['Model-3D'].ConstrainedSketch(name='__profile__', sheetSize=0.2)
mdb.models['Model-3D'].sketches['__profile__'].sketchOptions.setValues(
    decimalPlaces=3)
mdb.models['Model-3D'].sketches['__profile__'].rectangle(point1=(0.0, 0.0), 
    point2=(0.053, 0.06))
mdb.models['Model-3D'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.0, 0.0), point1=(0.004, 0.0))
mdb.models['Model-3D'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-3D'].sketches['__profile__'].geometry[6], point1=(
    0.00129977334290743, -0.0038936510682106))
mdb.models['Model-3D'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-3D'].sketches['__profile__'].geometry[2], point1=(
    -6.12055882811546e-05, 0.00184944737702608))
mdb.models['Model-3D'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-3D'].sketches['__profile__'].geometry[5], point1=(
    0.00245136860758066, -3.01133841276169e-05))
mdb.models['Model-3D'].Part(dimensionality=THREE_D, name='Part-1', type=
    DEFORMABLE_BODY)
mdb.models['Model-3D'].parts['Part-1'].BaseSolidExtrude(depth=0.002, sketch=
    mdb.models['Model-3D'].sketches['__profile__'])
del mdb.models['Model-3D'].sketches['__profile__']
mdb.models['Model-3D'].ConstrainedSketch(gridSpacing=0.004, name='__profile__', 
    sheetSize=0.16, transform=
    mdb.models['Model-3D'].parts['Part-1'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-3D'].parts['Part-1'].faces[5], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-3D'].parts['Part-1'].edges[4], 
    sketchOrientation=RIGHT, origin=(0.026598, 0.030112, 0.002)))
mdb.models['Model-3D'].sketches['__profile__'].sketchOptions.setValues(
    decimalPlaces=3)
mdb.models['Model-3D'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-3D'].sketches['__profile__'])
mdb.models['Model-3D'].sketches['__profile__'].Line(point1=(-0.026598, -0.012), 
    point2=(-0.00799999995715916, -0.012))
mdb.models['Model-3D'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-3D'].sketches['__profile__'].geometry[7])
mdb.models['Model-3D'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-3D'].sketches['__profile__'].geometry[6], entity2=
    mdb.models['Model-3D'].sketches['__profile__'].geometry[7])
mdb.models['Model-3D'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-3D'].sketches['__profile__'].vertices[6], entity2=
    mdb.models['Model-3D'].sketches['__profile__'].geometry[6])
mdb.models['Model-3D'].sketches['__profile__'].Line(point1=(
    -0.00799999995715916, -0.012), point2=(-0.00799999995715916, 
    -0.0301119999747202))
mdb.models['Model-3D'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-3D'].sketches['__profile__'].geometry[8])
mdb.models['Model-3D'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-3D'].sketches['__profile__'].geometry[7], entity2=
    mdb.models['Model-3D'].sketches['__profile__'].geometry[8])
mdb.models['Model-3D'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-3D'].sketches['__profile__'].vertices[8], entity2=
    mdb.models['Model-3D'].sketches['__profile__'].geometry[4])
mdb.models['Model-3D'].parts['Part-1'].PartitionFaceBySketch(faces=
    mdb.models['Model-3D'].parts['Part-1'].faces.getSequenceFromMask(('[#20 ]', 
    ), ), sketch=mdb.models['Model-3D'].sketches['__profile__'], sketchUpEdge=
    mdb.models['Model-3D'].parts['Part-1'].edges[4])
del mdb.models['Model-3D'].sketches['__profile__']
mdb.models['Model-3D'].parts['Part-1'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-3D'].parts['Part-1'].cells.getSequenceFromMask(('[#1 ]', 
    ), ), edges=(mdb.models['Model-3D'].parts['Part-1'].edges[0], 
    mdb.models['Model-3D'].parts['Part-1'].edges[1]), line=
    mdb.models['Model-3D'].parts['Part-1'].edges[9], sense=REVERSE)
# Save by nguyenb5 on 2024_06_28-17.53.13; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].Material(name='Material-1')
mdb.models['Model-3D'].materials['Material-1'].Density(table=((1.0, ), ))
mdb.models['Model-3D'].materials['Material-1'].Depvar(n=6)
mdb.models['Model-3D'].materials['Material-1'].UserMaterial(
    mechanicalConstants=(200000000000.0, 0.3, 2.0), thermalConstants=(
    8.31446261815324, 293.0, 2e-06, 3.8e-11), type=THERMOMECHANICAL)
# Save by nguyenb5 on 2024_06_28-17.54.34; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].HomogeneousSolidSection(material='Material-1', name=
    'Section-1', thickness=None)
mdb.models['Model-3D'].parts['Part-1'].Set(cells=
    mdb.models['Model-3D'].parts['Part-1'].cells.getSequenceFromMask(('[#3 ]', 
    ), ), name='Set-1')
mdb.models['Model-3D'].parts['Part-1'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-3D'].parts['Part-1'].sets['Set-1'], sectionName=
    'Section-1', thicknessAssignment=FROM_SECTION)
mdb.models['Model-3D'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model-3D'].rootAssembly.Instance(dependent=ON, name='Part-1-1', 
    part=mdb.models['Model-3D'].parts['Part-1'])
mdb.models['Model-3D'].parts.changeKey(fromName='Part-1', toName=
    'elastic-hold-plate')
mdb.models['Model-3D'].rootAssembly.regenerate()
del mdb.models['Model-3D'].rootAssembly.features['Part-1-1']
mdb.models['Model-3D'].rootAssembly.Instance(dependent=ON, name=
    'elastic-hold-plate-1', part=
    mdb.models['Model-3D'].parts['elastic-hold-plate'])
mdb.models['Model-3D'].CoupledTempDisplacementStep(cetol=None, 
    creepIntegration=None, deltmx=1.0, initialInc=500.0, maxInc=1000.0, 
    maxNumInc=10000, minInc=100.0, name='Step-1', nlgeom=ON, previous='Initial'
    , timePeriod=1000000.0)
mdb.models['Model-3D'].fieldOutputRequests['F-Output-1'].setValues(variables=(
    'COORD', 'NT', 'S', 'SDV'))
mdb.models['Model-3D'].rootAssembly.Set(cells=
    mdb.models['Model-3D'].rootAssembly.instances['elastic-hold-plate-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), edges=
    mdb.models['Model-3D'].rootAssembly.instances['elastic-hold-plate-1'].edges.getSequenceFromMask(
    ('[#3ffffff ]', ), ), faces=
    mdb.models['Model-3D'].rootAssembly.instances['elastic-hold-plate-1'].faces.getSequenceFromMask(
    ('[#1fff ]', ), ), name='Set-1', vertices=
    mdb.models['Model-3D'].rootAssembly.instances['elastic-hold-plate-1'].vertices.getSequenceFromMask(
    ('[#efff ]', ), ))
mdb.models['Model-3D'].Temperature(createStepName='Initial', 
    crossSectionDistribution=CONSTANT_THROUGH_THICKNESS, distributionType=
    UNIFORM, magnitudes=(20.0, ), name='Cbar_L', region=
    mdb.models['Model-3D'].rootAssembly.sets['Set-1'])
mdb.models['Model-3D'].rootAssembly.Set(faces=
    mdb.models['Model-3D'].rootAssembly.instances['elastic-hold-plate-1'].faces.getSequenceFromMask(
    ('[#410 ]', ), ), name='Set-2')
mdb.models['Model-3D'].XsymmBC(createStepName='Initial', localCsys=None, name=
    'XSYMM', region=mdb.models['Model-3D'].rootAssembly.sets['Set-2'])
mdb.models['Model-3D'].rootAssembly.Set(faces=
    mdb.models['Model-3D'].rootAssembly.instances['elastic-hold-plate-1'].faces.getSequenceFromMask(
    ('[#108 ]', ), ), name='Set-3')
mdb.models['Model-3D'].YsymmBC(createStepName='Initial', localCsys=None, name=
    'YSYMM', region=mdb.models['Model-3D'].rootAssembly.sets['Set-3'])
mdb.models['Model-3D'].rootAssembly.Surface(name='Surf-1', side1Faces=
    mdb.models['Model-3D'].rootAssembly.instances['elastic-hold-plate-1'].faces.getSequenceFromMask(
    ('[#40 ]', ), ))
mdb.models['Model-3D'].Pressure(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, field='', magnitude=-10000000000.0, name='Load-1'
    , region=mdb.models['Model-3D'].rootAssembly.surfaces['Surf-1'])
# Save by nguyenb5 on 2024_06_28-17.58.34; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
# Save by nguyenb5 on 2024_06_28-17.59.05; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#3ffffff ]', ), ), size=0.001)
mdb.models['Model-3D'].parts['elastic-hold-plate'].setMeshControls(algorithm=
    MEDIAL_AXIS, regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#2 ]', ), ), technique=SWEEP)
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#3002835 ]', ), ), size=0.0005)
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#a00000 ]', ), ), size=0.0001)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#a00000 ]', ), ), size=0.0002)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].setElementType(elemTypes=(
    ElemType(elemCode=C3D8T, elemLibrary=STANDARD), ElemType(elemCode=C3D6T, 
    elemLibrary=STANDARD, secondOrderAccuracy=OFF, distortionControl=DEFAULT), 
    ElemType(elemCode=C3D4T, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT)), regions=(
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), ))
# Save by nguyenb5 on 2024_06_28-18.01.52; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
# Save by nguyenb5 on 2024_06_28-18.01.58; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
# Save by nguyenb5 on 2024_06_28-18.02.26; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
# Save by nguyenb5 on 2024_06_28-18.02.38; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].rootAssembly.regenerate()
# Save by nguyenb5 on 2024_06_28-18.02.44; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#74780 ]', ), ), size=0.005)
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#74780 ]', ), ), size=0.004)
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#74780 ]', ), ), size=0.002)
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#3002835 ]', ), ), size=0.001)
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#a00000 ]', ), ), size=0.0005)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
# Save by nguyenb5 on 2024_06_28-21.15.15; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].materials['Material-1'].userMaterial.setValues(
    mechanicalConstants=(200000000000.0, 0.3))
# Save by nguyenb5 on 2024_06_28-21.17.46; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].rootAssembly.regenerate()
del mdb.jobs['Job-1']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-3D', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-1', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
# Save by nguyenb5 on 2024_06_28-21.18.15; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
# Save by nguyenb5 on 2024_06_28-22.08.59; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].fieldOutputRequests['F-Output-1'].setValues(variables=(
    'S', 'TRIAX', 'LODE', 'NT', 'COORD', 'SDV'))
mdb.models['Model-3D'].loads['Load-1'].setValues(magnitude=-100000000.0)
# Save by nguyenb5 on 2024_06_29-12.29.02; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].boundaryConditions['XSYMM'].suppress()
mdb.models['Model-3D'].boundaryConditions['YSYMM'].suppress()
mdb.models['Model-3D'].boundaryConditions.delete(('XSYMM', 'YSYMM'))
mdb.models['Model-3D'].rootAssembly.Set(faces=
    mdb.models['Model-3D'].rootAssembly.instances['elastic-hold-plate-1'].faces.getSequenceFromMask(
    ('[#410 ]', ), ), name='Set-4')
mdb.models['Model-3D'].XsymmBC(createStepName='Initial', localCsys=None, name=
    'Xsymm', region=mdb.models['Model-3D'].rootAssembly.sets['Set-4'])
mdb.models['Model-3D'].rootAssembly.Set(faces=
    mdb.models['Model-3D'].rootAssembly.instances['elastic-hold-plate-1'].faces.getSequenceFromMask(
    ('[#108 ]', ), ), name='Set-5')
mdb.models['Model-3D'].YsymmBC(createStepName='Step-1', localCsys=None, name=
    'Ysymm', region=mdb.models['Model-3D'].rootAssembly.sets['Set-5'])
del mdb.models['Model-3D'].boundaryConditions['Xsymm']
mdb.models['Model-3D'].rootAssembly.Set(faces=
    mdb.models['Model-3D'].rootAssembly.instances['elastic-hold-plate-1'].faces.getSequenceFromMask(
    ('[#410 ]', ), ), name='Set-6')
mdb.models['Model-3D'].XsymmBC(createStepName='Step-1', localCsys=None, name=
    'Xsymm', region=mdb.models['Model-3D'].rootAssembly.sets['Set-6'])
mdb.models['Model-3D'].rootAssembly.Set(faces=
    mdb.models['Model-3D'].rootAssembly.instances['elastic-hold-plate-1'].faces.getSequenceFromMask(
    ('[#1004 ]', ), ), name='Set-7')
mdb.models['Model-3D'].ZsymmBC(createStepName='Step-1', localCsys=None, name=
    'Zsymm', region=mdb.models['Model-3D'].rootAssembly.sets['Set-7'])
# Save by nguyenb5 on 2024_06_29-12.50.36; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].parts['elastic-hold-plate'].setElementType(elemTypes=(
    ElemType(elemCode=C3D8T, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6T, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT), ElemType(
    elemCode=C3D4T, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT)), regions=(
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), ))
# Save by nguyenb5 on 2024_06_29-12.51.33; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].rootAssembly.Set(cells=
    mdb.models['Model-3D'].rootAssembly.instances['elastic-hold-plate-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), name='Set-8')
mdb.models['Model-3D'].Stress(distributionType=UNIFORM, name=
    'Predefined Field-2', region=
    mdb.models['Model-3D'].rootAssembly.sets['Set-8'], sigma11=0.0, sigma12=0.0
    , sigma13=0.0, sigma22=100000000.0, sigma23=0.0, sigma33=0.0)
mdb.models['Model-3D'].loads['Load-1'].suppress()
mdb.models['Model-3D'].predefinedFields.changeKey(fromName='Predefined Field-2'
    , toName='stress')
mdb.models['Model-3D'].boundaryConditions['Zsymm'].suppress()
# Save by nguyenb5 on 2024_06_29-13.28.26; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['Model-3D'].predefinedFields['stress']
mdb.models['Model-3D'].rootAssembly.Set(cells=
    mdb.models['Model-3D'].rootAssembly.instances['elastic-hold-plate-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), name='Set-9')
mdb.models['Model-3D'].Stress(distributionType=UNIFORM, name=
    'Predefined Field-2', region=
    mdb.models['Model-3D'].rootAssembly.sets['Set-9'], sigma11=0.0, sigma12=0.0
    , sigma13=0.0, sigma22=100000000.0, sigma23=0.0, sigma33=0.0)
mdb.models['Model-3D'].predefinedFields.changeKey(fromName='Predefined Field-2'
    , toName='stress')
mdb.models['Model-3D'].predefinedFields['stress'].setValues(sigma11=0.0, 
    sigma12=0.0, sigma13=0.0, sigma22=100000000.0, sigma23=0.0, sigma33=0.0)
# Save by nguyenb5 on 2024_06_29-13.34.09; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].predefinedFields['stress'].setValues(sigma11=0.0, 
    sigma12=0.0, sigma13=0.0, sigma22=100000000.0, sigma23=0.0, sigma33=0.0)
# Save by nguyenb5 on 2024_06_29-13.34.46; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].predefinedFields['stress'].suppress()
mdb.models['Model-3D'].loads['Load-1'].resume()
mdb.models['Model-3D'].loads['Load-1'].suppress()
mdb.models['Model-3D'].loads['Load-1'].suppress()
mdb.models['Model-3D'].loads['Load-1'].resume()
mdb.models['Model-3D'].steps['Step-1'].setValues(nlgeom=OFF)
# Save by nguyenb5 on 2024_06_29-13.53.25; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].boundaryConditions['Zsymm'].suppress()
mdb.models['Model-3D'].boundaryConditions['Zsymm'].resume()
mdb.models['Model-3D'].boundaryConditions.changeKey(fromName='Zsymm', toName=
    'Zsymm_side2')
mdb.models['Model-3D'].rootAssembly.Set(faces=
    mdb.models['Model-3D'].rootAssembly.instances['elastic-hold-plate-1'].faces.getSequenceFromMask(
    ('[#820 ]', ), ), name='Set-10')
mdb.models['Model-3D'].ZsymmBC(createStepName='Step-1', localCsys=None, name=
    'Zsymm_side1', region=mdb.models['Model-3D'].rootAssembly.sets['Set-10'])
# Save by nguyenb5 on 2024_06_29-14.41.21; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
# Save by nguyenb5 on 2024_06_29-14.49.37; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-2D'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-2D'].parts['elastic_hole_plate'].features['Shell planar-1'].sketch)
mdb.models['Model-2D'].parts['elastic_hole_plate'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=mdb.models['Model-2D'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-2D'].parts['elastic_hole_plate'].features['Shell planar-1'])
del mdb.models['Model-2D'].sketches['__edit__']
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.2)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].boundaryConditions['Zsymm_side1'].suppress()
mdb.models['Model-3D'].boundaryConditions['Zsymm_side2'].suppress()
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#58904a ]', ), ), size=0.01)
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#58904a ]', ), ), size=0.005)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#74000 ]', ), ), size=0.0025)
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#2000824 ]', ), ), size=0.0015)
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#200000 ]', ), ), size=0.00075)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#58904a ]', ), ), size=0.01)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
# Save by nguyenb5 on 2024_06_29-16.30.05; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].rootAssembly.regenerate()
# Save by nguyenb5 on 2024_06_29-16.30.36; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.002)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.01)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#58904a ]', ), ), size=0.0025)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].rootAssembly.regenerate()
# Save by nguyenb5 on 2024_06_29-16.59.28; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.02)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.2)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=2.0)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByNumber(constraint=
    FINER, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#58904a ]', ), ), number=10)
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByNumber(constraint=
    FINER, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#58904a ]', ), ), number=50)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.02)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByNumber(constraint=
    FINER, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#58904a ]', ), ), number=5)
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByNumber(constraint=
    FINER, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#58904a ]', ), ), number=6)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
# Save by nguyenb5 on 2024_06_29-17.14.03; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#74000 ]', ), ), size=0.002)
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#2000824 ]', ), ), size=0.001)
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#200000 ]', ), ), size=0.0005)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#200000 ]', ), ), size=0.00025)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].setMeshControls(algorithm=
    ADVANCING_FRONT, regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
# Save by nguyenb5 on 2024_06_29-17.19.07; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.04)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByNumber(constraint=
    FINER, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#589042 ]', ), ), number=12)
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByNumber(constraint=
    FINER, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#589042 ]', ), ), number=10)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#74000 ]', ), ), size=0.0015)
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#2000824 ]', ), ), size=0.0075)
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#2000824 ]', ), ), size=0.00075)
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#200000 ]', ), ), size=0.0001)
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#2000824 ]', ), ), size=0.0005)
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#74000 ]', ), ), size=0.001)
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#74000 ]', ), ), size=0.0015)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#2000824 ]', ), ), size=0.00075)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#200000 ]', ), ), size=0.0002)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByNumber(constraint=
    FINER, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#58904a ]', ), ), number=12)
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByNumber(constraint=
    FINER, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#58904a ]', ), ), number=18)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].rootAssembly.regenerate()
# Save by nguyenb5 on 2024_06_29-17.28.06; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.1)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByNumber(constraint=
    FINER, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#58904a ]', ), ), number=24)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#74000 ]', ), ), size=0.0012)
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#2000824 ]', ), ), size=0.0005)
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#200000 ]', ), ), size=0.0001)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#2000800 ]', ), ), size=0.00025)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#24 ]', ), ), size=0.0004)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#2000824 ]', ), ), size=0.002)
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#2000824 ]', ), ), size=0.0002)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#2000824 ]', ), ), size=0.0005)
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#200000 ]', ), ), size=0.0002)
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#74000 ]', ), ), size=0.0015)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#2000824 ]', ), ), size=0.00075)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
# Save by nguyenb5 on 2024_06_29-17.38.05; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.2)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByNumber(constraint=
    FINER, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#58904a ]', ), ), number=48)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.05)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByNumber(constraint=
    FINER, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#258904a ]', ), ), number=12)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
# Save by nguyenb5 on 2024_06_29-17.59.31; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.0025)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.025)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByNumber(constraint=
    FINER, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#58904a ]', ), ), number=6)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.01)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
# Save by nguyenb5 on 2024_06_29-18.07.36; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.005)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.03)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByNumber(constraint=
    FINER, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#58904a ]', ), ), number=12)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
# Save by nguyenb5 on 2024_06_29-18.13.58; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#74000 ]', ), ), size=0.001)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#74000 ]', ), ), size=0.0012)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#2000824 ]', ), ), size=0.0005)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#2000824 ]', ), ), size=0.0006)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#200000 ]', ), ), size=0.00015)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByNumber(constraint=
    FINER, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#58904a ]', ), ), number=15)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByNumber(constraint=
    FINER, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#58904a ]', ), ), number=12)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
# Save by nguyenb5 on 2024_06_29-18.17.47; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByBias(biasMethod=
    SINGLE, constraint=FINER, end1Edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#40000 ]', ), ), end2Edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#20000 ]', ), ), maxSize=0.002, minSize=0.001)
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByBias(biasMethod=
    SINGLE, constraint=FINER, end2Edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#10000 ]', ), ), maxSize=0.001, minSize=0.0005)
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByBias(biasMethod=
    SINGLE, constraint=FINER, end1Edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#4000 ]', ), ), maxSize=0.001, minSize=0.0005)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#2000824 ]', ), ), size=0.0005)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#200000 ]', ), ), size=0.0001)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByBias(biasMethod=
    SINGLE, constraint=FINER, end1Edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#2000000 ]', ), ), end2Edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#800 ]', ), ), maxSize=0.0005, minSize=0.0001)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#200000 ]', ), ), size=0.00012)
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByBias(biasMethod=
    SINGLE, constraint=FINER, end1Edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#2000000 ]', ), ), end2Edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#800 ]', ), ), maxSize=0.0005, minSize=0.00012)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByNumber(constraint=
    FINER, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#58904a ]', ), ), number=8)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
# Save by nguyenb5 on 2024_06_29-18.26.15; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#200000 ]', ), ), size=0.0001)
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#24 ]', ), ), size=0.0004)
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByBias(biasMethod=
    SINGLE, constraint=FINER, end2Edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#2000000 ]', ), ), maxSize=0.0004, minSize=0.0001)
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByBias(biasMethod=
    SINGLE, constraint=FINER, end2Edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#800 ]', ), ), maxSize=0.0004, minSize=0.0001)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByBias(biasMethod=
    SINGLE, constraint=FINER, end1Edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#2000000 ]', ), ), maxSize=0.0004, minSize=0.0001)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByBias(biasMethod=
    SINGLE, constraint=FINER, end1Edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#4 ]', ), ), end2Edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#20 ]', ), ), maxSize=0.0006, minSize=0.0004)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
# Save by nguyenb5 on 2024_06_29-18.31.30; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].boundaryConditions['Zsymm_side1'].resume()
mdb.models['Model-3D'].boundaryConditions['Zsymm_side2'].resume()
mdb.models['Model-3D'].boundaryConditions['Zsymm_side1'].suppress()
mdb.models['Model-3D'].boundaryConditions['Zsymm_side2'].suppress()
mdb.models['Model-3D'].boundaryConditions['Zsymm_side1'].resume()
mdb.models['Model-3D'].boundaryConditions['Zsymm_side2'].resume()
# Save by nguyenb5 on 2024_06_29-19.14.54; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByNumber(constraint=
    FINER, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#58904a ]', ), ), number=12)
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByNumber(constraint=
    FINER, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#58904a ]', ), ), number=16)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.01)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByNumber(constraint=
    FINER, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#58904a ]', ), ), number=4)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByNumber(constraint=
    FINER, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#58904a ]', ), ), number=6)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByNumber(constraint=
    FINER, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#58904a ]', ), ), number=8)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.002)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.001)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.0005)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.001)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.0005)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByNumber(constraint=
    FINER, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#58904a ]', ), ), number=4)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByNumber(constraint=
    FINER, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#401000 ]', ), ), number=3)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByNumber(constraint=
    FINER, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#80000 ]', ), ), number=2)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.001)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByNumber(constraint=
    FIXED, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#58904a ]', ), ), number=2)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
# Save by nguyenb5 on 2024_06_29-22.07.41; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].rootAssembly.regenerate()
# Save by nguyenb5 on 2024_06_30-11.40.39; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].steps['Step-1'].setValues(nlgeom=ON)
# Save by nguyenb5 on 2024_07_01-11.51.30; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].steps['Step-1'].setValues(amplitude=RAMP)
mdb.models['Model-3D'].steps['Step-1'].setValues(maxNumInc=10000000)
# Save by nguyenb5 on 2024_07_01-12.12.44; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
# Save by nguyenb5 on 2024_07_01-13.32.53; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].steps['Step-1'].setValues(amplitude=STEP)
# Save by nguyenb5 on 2024_07_01-13.33.29; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
# Save by nguyenb5 on 2024_07_01-13.34.00; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].materials['Material-1'].userMaterial.setValues(
    thermalConstants=(8.31446261815324, 300.0, 2e-06, 3.8e-11))
# Save by nguyenb5 on 2024_07_01-18.28.59; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['Model-3D'].predefinedFields['stress']
# Save by nguyenb5 on 2024_07_01-18.29.55; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].steps['Step-1'].setValues(nlgeom=OFF)
# Save by nguyenb5 on 2024_07_01-19.12.17; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.002)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.01)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByNumber(constraint=
    FIXED, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#58904a ]', ), ), number=8)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
# Save by nguyenb5 on 2024_07_01-19.13.59; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.005)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByNumber(constraint=
    FIXED, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#58904a ]', ), ), number=5)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
# Save by nguyenb5 on 2024_07_01-19.15.23; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#200000 ]', ), ), size=0.0002)
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#2000824 ]', ), ), size=0.0005)
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#74000 ]', ), ), size=0.002)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#200000 ]', ), ), size=0.0005)
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#2000824 ]', ), ), size=0.001)
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#74000 ]', ), ), size=0.004)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.02)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.03)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.02)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByNumber(constraint=
    FIXED, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#188000 ]', ), ), number=10)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh(
    seedConstraintOverride=ON)
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].steps['Step-1'].setValues(nlgeom=ON)
mdb.models['Model-3D'].steps['Step-1'].setValues(initialInc=50000.0, maxInc=
    100000.0, minInc=10000.0, timePeriod=100000000.0)
# Save by nguyenb5 on 2024_07_01-19.29.45; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].steps['Step-1'].setValues(nlgeom=OFF)
# Save by nguyenb5 on 2024_07_01-19.30.54; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].boundaryConditions['Zsymm_side1'].suppress()
mdb.models['Model-3D'].boundaryConditions['Zsymm_side2'].suppress()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#200000 ]', ), ), size=0.0002)
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#74000 ]', ), ), size=0.002)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByNumber(constraint=
    FIXED, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#88000 ]', ), ), number=16)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
# Save by nguyenb5 on 2024_07_01-19.42.44; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].boundaryConditions['Zsymm_side1'].resume()
mdb.models['Model-3D'].boundaryConditions['Zsymm_side2'].resume()
# Save by nguyenb5 on 2024_07_01-19.42.55; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].boundaryConditions['Zsymm_side1'].suppress()
mdb.models['Model-3D'].boundaryConditions['Zsymm_side2'].suppress()
mdb.models['Model-3D'].rootAssembly.Set(cells=
    mdb.models['Model-3D'].rootAssembly.instances['elastic-hold-plate-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), edges=
    mdb.models['Model-3D'].rootAssembly.instances['elastic-hold-plate-1'].edges.getSequenceFromMask(
    ('[#3ffffff ]', ), ), faces=
    mdb.models['Model-3D'].rootAssembly.instances['elastic-hold-plate-1'].faces.getSequenceFromMask(
    ('[#1fff ]', ), ), name='Set-11', vertices=
    mdb.models['Model-3D'].rootAssembly.instances['elastic-hold-plate-1'].vertices.getSequenceFromMask(
    ('[#ffff ]', ), ))
mdb.models['Model-3D'].ZsymmBC(createStepName='Step-1', localCsys=None, name=
    'Zsymm', region=mdb.models['Model-3D'].rootAssembly.sets['Set-11'])
# Save by nguyenb5 on 2024_07_01-20.01.14; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#74000 ]', ), ), size=0.0015)
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#2000824 ]', ), ), size=0.0075)
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#2000824 ]', ), ), size=0.00075)
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#200000 ]', ), ), size=0.0001)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#200000 ]', ), ), size=0.00015)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
# Save by nguyenb5 on 2024_07_01-20.05.53; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].boundaryConditions['Zsymm'].suppress()
mdb.models['Model-3D'].boundaryConditions['Zsymm_side1'].resume()
mdb.models['Model-3D'].boundaryConditions['Zsymm_side2'].resume()
mdb.models['Model-3D'].loads['Load-1'].setValues(magnitude=-3773584900.0)
mdb.models['Model-3D'].loads['Load-1'].setValues(magnitude=-3773580000.0)
# Save by nguyenb5 on 2024_07_01-20.27.50; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].loads['Load-1'].setValues(magnitude=-100000000.0)
# Save by nguyenb5 on 2024_07_01-20.30.59; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
# Save by nguyenb5 on 2024_07_01-20.31.50; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].boundaryConditions['Zsymm_side1'].suppress()
mdb.models['Model-3D'].boundaryConditions['Zsymm_side2'].suppress()
mdb.models['Model-3D'].boundaryConditions['Zsymm'].resume()
mdb.models['Model-3D'].boundaryConditions['Zsymm'].suppress()
# Save by nguyenb5 on 2024_07_01-21.07.50; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].boundaryConditions['Zsymm_side1'].resume()
mdb.models['Model-3D'].boundaryConditions['Zsymm_side2'].resume()
# Save by nguyenb5 on 2024_07_01-21.14.05; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(name='Model-3D-no_srt', objectToCopy=mdb.models['Model-3D'])
del mdb.models['Model-3D-no_srt'].materials['Material-1'].depvar
del mdb.models['Model-3D-no_srt'].materials['Material-1'].userMaterial
mdb.models['Model-3D-no_srt'].materials['Material-1'].density.setValues(table=(
    (7890.0, ), ))
mdb.models['Model-3D-no_srt'].materials['Material-1'].Elastic(table=((
    210000000000.0, 0.3), ))
mdb.models['Model-3D-no_srt'].materials['Material-1'].Plastic(scaleStress=None, 
    table=((839646000.0, 0.0), (880025000.0, 0.0003), (906975000.0, 0.0005), (
    926275000.0, 0.001), (926275000.0, 0.002), (939393000.0, 0.003), (
    949756000.0, 0.004), (958495000.0, 0.005), (966134000.0, 0.006), (
    972960000.0, 0.007), (979150000.0, 0.008), (984823000.0, 0.009), (
    990061000.0, 0.01), (1027470000.0, 0.02), (1049750000.0, 0.03), (
    1064310000.0, 0.04), (1074410000.0, 0.05), (1081810000.0, 0.06), (
    1087490000.0, 0.07), (1092060000.0, 0.08), (1095870000.0, 0.09), (
    1099140000.0, 0.1), (1111180000.0, 0.15), (1119630000.0, 0.2), (
    1126250000.0, 0.25), (1131720000.0, 0.3), (1136380000.0, 0.35), (
    1140440000.0, 0.4), (1144050000.0, 0.45), (1147300000.0, 0.5), (
    1150250000.0, 0.55), (1152960000.0, 0.6), (1155460000.0, 0.65), (
    1157790000.0, 0.7), (1159960000.0, 0.75), (1162000000.0, 0.8), (
    1163920000.0, 0.85), (1165740000.0, 0.9), (1167460000.0, 0.95), (
    1169110000.0, 1.0), (1170670000.0, 1.05), (1172160000.0, 1.1), (
    1173600000.0, 1.15), (1174970000.0, 1.2), (1176290000.0, 1.25), (
    1177560000.0, 1.3), (1178790000.0, 1.35), (1179970000.0, 1.4), (
    1181120000.0, 1.45), (1182220000.0, 1.5), (1183300000.0, 1.55), (
    1184340000.0, 1.6), (1185350000.0, 1.65), (1186330000.0, 1.7), (
    1187280000.0, 1.75), (1188210000.0, 1.8), (1189120000.0, 1.85), (
    1190000000.0, 1.9), (1190860000.0, 1.95), (1191700000.0, 2.0), (
    1192520000.0, 2.05), (1193320000.0, 2.1), (1194100000.0, 2.15), (
    1194870000.0, 2.2), (1195620000.0, 2.25), (1196350000.0, 2.3), (
    1197070000.0, 2.35), (1197770000.0, 2.4), (1198470000.0, 2.45), (
    1199140000.0, 2.5), (1199810000.0, 2.55), (1200460000.0, 2.6), (
    1201100000.0, 2.65), (1201730000.0, 2.7), (1202350000.0, 2.75), (
    1202960000.0, 2.8), (1203550000.0, 2.85), (1204140000.0, 2.9), (
    1204720000.0, 2.95), (1205290000.0, 3.0)))
mdb.models['Model-3D-no_srt'].materials['Material-1'].Conductivity(table=((
    3.8e-11, ), ))
mdb.models['Model-3D-no_srt'].materials['Material-1'].SpecificHeat(table=((1.0, 
    ), ))
# Save by nguyenb5 on 2024_07_01-21.39.11; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['Model-3D-no_srt'].materials['Material-1'].plastic
# Save by nguyenb5 on 2024_07_01-21.39.28; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D-no_srt'].parts['elastic-hold-plate'].setElementType(
    elemTypes=(ElemType(elemCode=C3D8T, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT), ElemType(
    elemCode=C3D6T, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D4T, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)), regions=(
    mdb.models['Model-3D-no_srt'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), ))
mdb.models['Model-3D-no_srt'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-3D-no_srt', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-2', nodalOutputPrecision=SINGLE, 
    numCpus=8, numDomains=8, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'L23-0203', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '16 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE SDV HAS NO COMPONENTS IN THIS ANALYSIS FOR ELEMENT TYPE C3D8T', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\LocalUserData\\User-data\\nguyenb5\\3rd benchmarking C3D8T hydrostatic stress gradient\\elastic_plate_with_central_hole_3D\\Job-2.odb', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'L23-0203', 'handle': 816, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 5732.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16017.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 499.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.2587 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.1257 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.2676 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.4904 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.3485 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.4815 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.9134 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.9547 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8578 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8165 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.736 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.2726 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.2964 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.4954 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.2513 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.4741 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8563 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8251 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8589 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8431 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8602 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8600 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8457 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8603 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8352 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8601 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8440 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.9321 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.9409 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.9570 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.9426 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.9572 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.9571 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.9569 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.9220 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.9558 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.9400 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.9532 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.47573 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.48542 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.49511 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.50480 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.47364 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.50271 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.48333 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.49302 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.47993 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.50900 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.49931 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.48962 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.47520 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.50427 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.49458 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.48489 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8584 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8016 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8092 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8153 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.44666 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.45635 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8542 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.7851 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.45426 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8548 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.7944 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8544 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.7842 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.44457 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.7934 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.46055 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8100 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.45582 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.44613 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8573 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8574 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8577 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8572 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8023 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8091 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8161 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8556 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8557 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.45086 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.46395 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.47024 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.46604 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.46551 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.7833 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.7816 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.7843 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.7894 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8590 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8259 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8568 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8579 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8580 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8569 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.45082 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8565 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8566 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.45078 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.45079 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.45089 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8571 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8576 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.7947 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.44460 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.45068 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8090 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8555 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8567 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.44603 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.45080 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.44373 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.7860 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.7869 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.44382 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.46398 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.47016 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.47017 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.47006 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.46311 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.45342 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.45351 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.45429 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.46037 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.46047 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.46048 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.46320 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.47020 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.46051 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.45572 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.46049 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.46058 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.46541 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.47018 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.47027 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.48958 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.50274 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.50892 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.50893 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.50882 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.50896 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.50417 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.50894 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.50903 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.48336 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.48954 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.48955 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.48944 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.49305 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.49913 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.49923 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.49924 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.48479 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.48956 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.48965 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.49448 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.49925 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.49927 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.49934 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.50187 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.47280 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.47289 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.47367 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.47510 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.47975 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.47985 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.47986 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.47987 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.47989 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.47996 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.48249 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.48258 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.49218 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.49227 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.50196 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.7835 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.7868 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8540 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.50878 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.48940 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.49909 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.7850 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.7832 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.47002 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.46033 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8551 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8534 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8106 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8021 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.7941 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.7861 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.45064 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.7801 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.7821 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.47971 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.8027 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.47001 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node ELASTIC-HOLD-PLATE-1.7810 D.O.F. 11.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 50000.0, 'attempts': 1, 
    'timeIncrement': 50000.0, 'increment': 1, 'stepTime': 50000.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 100000.0, 'attempts': 1, 
    'timeIncrement': 50000.0, 'increment': 2, 'stepTime': 100000.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 150000.0, 'attempts': 1, 
    'timeIncrement': 50000.0, 'increment': 3, 'stepTime': 150000.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 250000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 4, 'stepTime': 250000.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 350000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 5, 'stepTime': 350000.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 450000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 6, 'stepTime': 450000.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 550000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 7, 'stepTime': 550000.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 650000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 8, 'stepTime': 650000.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 750000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 9, 'stepTime': 750000.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 850000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 10, 'stepTime': 850000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 950000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 11, 'stepTime': 950000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1050000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 12, 'stepTime': 1050000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1150000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 13, 'stepTime': 1150000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1250000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 14, 'stepTime': 1250000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1350000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 15, 'stepTime': 1350000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1450000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 16, 'stepTime': 1450000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1550000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 17, 'stepTime': 1550000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1650000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 18, 'stepTime': 1650000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1750000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 19, 'stepTime': 1750000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1850000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 20, 'stepTime': 1850000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1950000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 21, 'stepTime': 1950000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 21, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2050000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 22, 'stepTime': 2050000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 22, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2150000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 23, 'stepTime': 2150000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 23, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2250000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 24, 'stepTime': 2250000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 24, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2350000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 25, 'stepTime': 2350000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 25, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2450000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 26, 'stepTime': 2450000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 26, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2550000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 27, 'stepTime': 2550000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 27, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2650000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 28, 'stepTime': 2650000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 28, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2750000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 29, 'stepTime': 2750000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 29, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2850000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 30, 'stepTime': 2850000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 30, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2950000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 31, 'stepTime': 2950000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 31, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 3050000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 32, 'stepTime': 3050000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 32, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 3150000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 33, 'stepTime': 3150000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 33, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 3250000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 34, 'stepTime': 3250000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 34, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 3350000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 35, 'stepTime': 3350000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 35, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 3450000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 36, 'stepTime': 3450000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 36, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 3550000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 37, 'stepTime': 3550000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 37, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 3650000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 38, 'stepTime': 3650000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 38, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 3750000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 39, 'stepTime': 3750000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 39, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 3850000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 40, 'stepTime': 3850000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 40, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 3950000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 41, 'stepTime': 3950000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 41, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 4050000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 42, 'stepTime': 4050000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 42, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 4150000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 43, 'stepTime': 4150000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 43, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 4250000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 44, 'stepTime': 4250000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 44, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 4350000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 45, 'stepTime': 4350000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 45, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 4450000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 46, 'stepTime': 4450000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 46, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 4550000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 47, 'stepTime': 4550000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 47, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 4650000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 48, 'stepTime': 4650000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 48, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 4750000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 49, 'stepTime': 4750000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 49, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 4850000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 50, 'stepTime': 4850000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 50, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 4950000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 51, 'stepTime': 4950000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 51, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 5050000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 52, 'stepTime': 5050000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 52, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 5150000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 53, 'stepTime': 5150000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 53, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 5250000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 54, 'stepTime': 5250000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 54, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 5350000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 55, 'stepTime': 5350000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 55, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 5450000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 56, 'stepTime': 5450000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 56, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 5550000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 57, 'stepTime': 5550000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 57, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 5650000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 58, 'stepTime': 5650000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 58, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 5750000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 59, 'stepTime': 5750000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 59, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 5850000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 60, 'stepTime': 5850000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 60, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 5950000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 61, 'stepTime': 5950000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 61, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 6050000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 62, 'stepTime': 6050000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 62, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 6150000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 63, 'stepTime': 6150000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 63, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 6250000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 64, 'stepTime': 6250000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 64, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 6350000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 65, 'stepTime': 6350000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 65, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 6450000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 66, 'stepTime': 6450000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 66, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 6550000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 67, 'stepTime': 6550000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 67, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 6650000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 68, 'stepTime': 6650000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 68, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 6750000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 69, 'stepTime': 6750000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 69, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 6850000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 70, 'stepTime': 6850000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 70, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 6950000.0, 'attempts': 1, 
    'timeIncrement': 100000.0, 'increment': 71, 'stepTime': 6950000.0, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 71, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.01)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByNumber(constraint=
    FIXED, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#88000 ]', ), ), number=8)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh(
    seedConstraintOverride=ON)
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#2000824 ]', ), ), size=0.0005)
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#200000 ]', ), ), size=0.0001)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#200000 ]', ), ), size=0.00012)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#74000 ]', ), ), size=0.001)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.004)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByNumber(constraint=
    FIXED, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#58904a ]', ), ), number=4)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].steps['Step-1'].setValues(nlgeom=ON)
# Save by nguyenb5 on 2024_07_01-22.14.26; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].steps['Step-1'].setValues(nlgeom=OFF)
# Save by nguyenb5 on 2024_07_01-22.16.29; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(modelType=STANDARD_EXPLICIT, name='cube')
mdb.models['cube'].ConstrainedSketch(name='__profile__', sheetSize=20.0)
mdb.models['cube'].sketches['__profile__'].rectangle(point1=(1.0, 1.0), point2=
    (-1.0, -1.0))
mdb.models['cube'].Part(dimensionality=THREE_D, name='Part-1', type=
    DEFORMABLE_BODY)
mdb.models['cube'].parts['Part-1'].BaseSolidExtrude(depth=1.0, sketch=
    mdb.models['cube'].sketches['__profile__'])
del mdb.models['cube'].sketches['__profile__']
mdb.models['cube'].parts['Part-1'].features['Solid extrude-1'].setValues(depth=
    2.0)
mdb.models['cube'].parts['Part-1'].regenerate()
mdb.models['cube'].parts['Part-1'].setValues(space=THREE_D, type=
    DEFORMABLE_BODY)
mdb.models['cube'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['cube'].parts['Part-1'].features['Solid extrude-1'].sketch)
mdb.models['cube'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['cube'].sketches['__edit__'], 
    upToFeature=mdb.models['cube'].parts['Part-1'].features['Solid extrude-1'])
del mdb.models['cube'].sketches['__edit__']
mdb.models['cube'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['cube'].rootAssembly.Instance(dependent=ON, name='Part-1-1', part=
    mdb.models['cube'].parts['Part-1'])
mdb.models['cube'].rootAssembly.translate(instanceList=('Part-1-1', ), vector=(
    0.0, 0.0, -1.0))
mdb.models['cube'].parts['Part-1'].seedPart(deviationFactor=0.1, minSizeFactor=
    0.1, size=0.2)
mdb.models['cube'].parts['Part-1'].generateMesh()
mdb.models['cube'].parts['Part-1'].deleteMesh(regions=
    mdb.models['cube'].parts['Part-1'].cells.getSequenceFromMask(('[#1 ]', ), 
    ))
mdb.models['cube'].parts['Part-1'].seedEdgeByNumber(constraint=FINER, edges=
    mdb.models['cube'].parts['Part-1'].edges.getSequenceFromMask(('[#fff ]', ), 
    ), number=1)
mdb.models['cube'].parts['Part-1'].generateMesh()
mdb.models['cube'].rootAssembly.regenerate()
del mdb.models['cube'].rootAssembly.features['Part-1-1']
mdb.models['cube'].parts['Part-1'].deleteMesh()
mdb.models['cube'].rootAssembly.Instance(dependent=OFF, name='Part-1-1', part=
    mdb.models['cube'].parts['Part-1'])
mdb.models['cube'].rootAssembly.translate(instanceList=('Part-1-1', ), vector=(
    0.0, 0.0, -1.0))
mdb.models['cube'].rootAssembly.generateMesh(regions=(
    mdb.models['cube'].rootAssembly.instances['Part-1-1'], ))
mdb.models['cube'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=C3D8T, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6T, elemLibrary=STANDARD), 
    ElemType(elemCode=C3D4T, elemLibrary=STANDARD)), regions=(
    mdb.models['cube'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), ))
mdb.models['cube'].CoupledTempDisplacementStep(deltmx=1.0, initialInc=1.0, 
    maxInc=1.0, maxNumInc=1000, minInc=0.001, name='Step-1', nlgeom=ON, 
    previous='Initial', timePeriod=100.0)
mdb.models['cube'].rootAssembly.Set(faces=
    mdb.models['cube'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    ('[#8 ]', ), ), name='Set-2')
mdb.models['cube'].DisplacementBC(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'BC-1', region=mdb.models['cube'].rootAssembly.sets['Set-2'], u1=UNSET, u2=
    0.5, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.models['cube'].Material(name='Material-1')
mdb.models['cube'].materials['Material-1'].Density(table=((1.0, ), ))
mdb.models['cube'].materials['Material-1'].Conductivity(table=((1.0, ), ))
mdb.models['cube'].materials['Material-1'].SpecificHeat(table=((1.0, ), ))
mdb.models['cube'].materials['Material-1'].Elastic(table=((200000000000.0, 
    0.3), ))
# Save by nguyenb5 on 2024_07_02-10.34.56; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='cube', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-3', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.models['cube'].HomogeneousSolidSection(material='Material-1', name=
    'Section-1', thickness=None)
mdb.models['cube'].parts['Part-1'].Set(cells=
    mdb.models['cube'].parts['Part-1'].cells.getSequenceFromMask(('[#1 ]', ), )
    , name='Set-2')
mdb.models['cube'].parts['Part-1'].SectionAssignment(offset=0.0, offsetField=''
    , offsetType=MIDDLE_SURFACE, region=
    mdb.models['cube'].parts['Part-1'].sets['Set-2'], sectionName='Section-1', 
    thicknessAssignment=FROM_SECTION)
mdb.models['cube'].rootAssembly.regenerate()
mdb.jobs['Job-3'].submit(consistencyChecking=OFF)
mdb.jobs['Job-3']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'L23-0203', 'handle': 0, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\LocalUserData\\User-data\\nguyenb5\\3rd benchmarking C3D8T hydrostatic stress gradient\\elastic_plate_with_central_hole_3D\\Job-3.odb', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'L23-0203', 'handle': 6784, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-3', 'memory': 24.0})
mdb.jobs['Job-3']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16017.0, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(MINIMUM_MEMORY, {'minimum_memory': 17.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 1 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 2, 'stepTime': 2.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 1.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 3.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 3, 'stepTime': 3.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 4.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 4, 'stepTime': 4.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 10.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 5.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 5, 'stepTime': 5.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 10.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 6.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 6, 'stepTime': 6.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 7.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 7, 'stepTime': 7.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 1.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 8.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 8, 'stepTime': 8.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 10.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 9.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 9, 'stepTime': 9.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 10.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 10.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 10, 'stepTime': 10.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 10.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 11.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 11, 'stepTime': 11.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 10.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 12.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 12, 'stepTime': 12.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 10.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 13.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 13, 'stepTime': 13.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 10.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 14.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 14, 'stepTime': 14.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 10.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 15.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 15, 'stepTime': 15.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 100.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 16.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 16, 'stepTime': 16.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 10.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 17.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 17, 'stepTime': 17.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 100.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 18.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 18, 'stepTime': 18.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 10.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 10.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 19.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 19, 'stepTime': 19.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 100.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 20.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 20, 'stepTime': 20.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 100.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 21, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 21.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 21, 'stepTime': 21.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 100.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 100.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 22, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 22.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 22, 'stepTime': 22.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 100.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 23, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 23.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 23, 'stepTime': 23.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 100.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 10.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 24, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 24.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 24, 'stepTime': 24.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 100.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 25, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 25.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 25, 'stepTime': 25.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 100.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 100.E+18     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node PART-1-1.7 D.O.F. 1.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'SOLVER PROBLEM.  ZERO PIVOT WHEN PROCESSING NODE 7 INSTANCE PART-1-1 D.O.F. 1', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 1 of 1 nodes. The nodes have been identified in node set WarnNodeSolvProbZeroPiv_1_1_26_2_1.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 26, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 26.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 26, 'stepTime': 26.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 100.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 10.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 27, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 27.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 27, 'stepTime': 27.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 100.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 10.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 28, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 28.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 28, 'stepTime': 28.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 100.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 10.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 10.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 29, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 29.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 29, 'stepTime': 29.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 100.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 10.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 30, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 30.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 30, 'stepTime': 30.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 100.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 31, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 31.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 31, 'stepTime': 31.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 100.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 32, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 32.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 32, 'stepTime': 32.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 1.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 10.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 33, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 33.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 33, 'stepTime': 33.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 34, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 34.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 34, 'stepTime': 34.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 35, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 35.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 35, 'stepTime': 35.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 36, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 36.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 36, 'stepTime': 36.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 37, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 37.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 37, 'stepTime': 37.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 38, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 38.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 38, 'stepTime': 38.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 39, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 39.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 39, 'stepTime': 39.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 40, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 40.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 40, 'stepTime': 40.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 41, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 41.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 41, 'stepTime': 41.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 42, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 42.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 42, 'stepTime': 42.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 43, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 43.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 43, 'stepTime': 43.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 44, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 44.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 44, 'stepTime': 44.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 45, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 45.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 45, 'stepTime': 45.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 46, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 46.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 46, 'stepTime': 46.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 47, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 47.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 47, 'stepTime': 47.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 48, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 48.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 48, 'stepTime': 48.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 49, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 49.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 49, 'stepTime': 49.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 50, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 50.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 50, 'stepTime': 50.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 51, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 51.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 51, 'stepTime': 51.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 52, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 52.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 52, 'stepTime': 52.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 53, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 53.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 53, 'stepTime': 53.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 54, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 54.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 54, 'stepTime': 54.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 55, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 55.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 55, 'stepTime': 55.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 56, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 56.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 56, 'stepTime': 56.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 57, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 57.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 57, 'stepTime': 57.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 58, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 58.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 58, 'stepTime': 58.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 59, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 59.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 59, 'stepTime': 59.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 60, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 60.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 60, 'stepTime': 60.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 61, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 61.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 61, 'stepTime': 61.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 62, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 62.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 62, 'stepTime': 62.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 63, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 63.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 63, 'stepTime': 63.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 64, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 64.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 64, 'stepTime': 64.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 65, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 65.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 65, 'stepTime': 65.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 66, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 66.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 66, 'stepTime': 66.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 67, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 67.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 67, 'stepTime': 67.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 68, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 68.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 68, 'stepTime': 68.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 69, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 69.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 69, 'stepTime': 69.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 70, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 70.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 70, 'stepTime': 70.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 71, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 71.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 71, 'stepTime': 71.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 72, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 72.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 72, 'stepTime': 72.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 73, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 73.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 73, 'stepTime': 73.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 74, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 74.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 74, 'stepTime': 74.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 75, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 75.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 75, 'stepTime': 75.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 76, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 76.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 76, 'stepTime': 76.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 77, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 77.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 77, 'stepTime': 77.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 78, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 78.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 78, 'stepTime': 78.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 79, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 79.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 79, 'stepTime': 79.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 80, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 80.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 80, 'stepTime': 80.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 81, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 81.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 81, 'stepTime': 81.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 82, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 82.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 82, 'stepTime': 82.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 83, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 83.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 83, 'stepTime': 83.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 84, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 84.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 84, 'stepTime': 84.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 85, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 85.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 85, 'stepTime': 85.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 86, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 86.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 86, 'stepTime': 86.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 87, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 87.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 87, 'stepTime': 87.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 88, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 88.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 88, 'stepTime': 88.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 89, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 89.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 89, 'stepTime': 89.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 90, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 90.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 90, 'stepTime': 90.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 91, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 91.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 91, 'stepTime': 91.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 92, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 92.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 92, 'stepTime': 92.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 93, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 93.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 93, 'stepTime': 93.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 94, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 94.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 94, 'stepTime': 94.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 95, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 95.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 95, 'stepTime': 95.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 96, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 96.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 96, 'stepTime': 96.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 97, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 97.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 97, 'stepTime': 97.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 98, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 98.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 98, 'stepTime': 98.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 99, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 99.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 99, 'stepTime': 99.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 100, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 100.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 100, 'stepTime': 100.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-3']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(JOB_COMPLETED, {'time': 'Tue Jul  2 10:35:41 2024', 
    'jobName': 'Job-3'})
mdb.models['cube'].fieldOutputRequests['F-Output-1'].setValues(variables=('S', 
    'PE', 'PEEQ', 'PEMAG', 'LE', 'U', 'RF', 'CF', 'CSTRESS', 'CDISP', 'NT', 
    'HFL', 'RFL', 'COORD'))
# Save by nguyenb5 on 2024_07_02-10.36.51; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-3'].submit(consistencyChecking=OFF)
mdb.jobs['Job-3']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'L23-0203', 'handle': 0, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\LocalUserData\\User-data\\nguyenb5\\3rd benchmarking C3D8T hydrostatic stress gradient\\elastic_plate_with_central_hole_3D\\Job-3.odb', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'L23-0203', 'handle': 28736, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-3', 'memory': 24.0})
mdb.jobs['Job-3']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16017.0, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(MINIMUM_MEMORY, {'minimum_memory': 17.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 1 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 2, 'stepTime': 2.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 1.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 3.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 3, 'stepTime': 3.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 4.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 4, 'stepTime': 4.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 10.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 5.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 5, 'stepTime': 5.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 10.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 6.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 6, 'stepTime': 6.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 7.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 7, 'stepTime': 7.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 1.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 8.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 8, 'stepTime': 8.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 10.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 9.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 9, 'stepTime': 9.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 10.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 10.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 10, 'stepTime': 10.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 10.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 11.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 11, 'stepTime': 11.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 10.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 12.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 12, 'stepTime': 12.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 10.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 13.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 13, 'stepTime': 13.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 10.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 14.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 14, 'stepTime': 14.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 10.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 15.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 15, 'stepTime': 15.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 100.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 16.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 16, 'stepTime': 16.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 10.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 17.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 17, 'stepTime': 17.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 100.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 18.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 18, 'stepTime': 18.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 10.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 10.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 19.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 19, 'stepTime': 19.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 100.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 20.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 20, 'stepTime': 20.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 100.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 21, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 21.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 21, 'stepTime': 21.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 100.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 100.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 22, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 22.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 22, 'stepTime': 22.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 100.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 23, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 23.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 23, 'stepTime': 23.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 100.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 10.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 24, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 24.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 24, 'stepTime': 24.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 100.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 25, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 25.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 25, 'stepTime': 25.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 100.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 100.E+18     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node PART-1-1.7 D.O.F. 1.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'SOLVER PROBLEM.  ZERO PIVOT WHEN PROCESSING NODE 7 INSTANCE PART-1-1 D.O.F. 1', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 1 of 1 nodes. The nodes have been identified in node set WarnNodeSolvProbZeroPiv_1_1_26_2_1.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 26, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 26.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 26, 'stepTime': 26.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 100.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 10.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 27, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 27.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 27, 'stepTime': 27.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 100.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 10.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 28, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 28.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 28, 'stepTime': 28.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 100.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 10.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 10.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 29, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 29.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 29, 'stepTime': 29.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 100.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 10.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 30, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 30.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 30, 'stepTime': 30.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 100.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero FORCE everywhere in the model based on the default criterion. please check the value of the average FORCE during the current iteration to verify that the FORCE is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero FORCE.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 31, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 31.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 31, 'stepTime': 31.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 100.E+09     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 32, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 32.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 32, 'stepTime': 32.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.5 D.O.F. 3 ratio = 1.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 10.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 1 ratio = 100.E+12     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PART-1-1.7 D.O.F. 3 ratio = 1.E+15     .', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 33, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 33.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 33, 'stepTime': 33.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 34, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 34.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 34, 'stepTime': 34.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 35, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 35.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 35, 'stepTime': 35.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 36, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 36.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 36, 'stepTime': 36.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 37, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 37.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 37, 'stepTime': 37.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 38, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 38.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 38, 'stepTime': 38.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 39, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 39.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 39, 'stepTime': 39.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 40, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 40.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 40, 'stepTime': 40.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 41, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 41.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 41, 'stepTime': 41.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 42, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 42.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 42, 'stepTime': 42.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 43, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 43.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 43, 'stepTime': 43.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 44, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 44.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 44, 'stepTime': 44.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 45, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 45.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 45, 'stepTime': 45.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 46, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 46.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 46, 'stepTime': 46.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 47, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 47.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 47, 'stepTime': 47.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 48, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 48.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 48, 'stepTime': 48.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 49, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 49.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 49, 'stepTime': 49.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 50, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 50.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 50, 'stepTime': 50.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 51, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 51.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 51, 'stepTime': 51.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 52, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 52.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 52, 'stepTime': 52.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 53, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 53.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 53, 'stepTime': 53.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 54, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 54.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 54, 'stepTime': 54.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 55, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 55.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 55, 'stepTime': 55.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 56, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 56.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 56, 'stepTime': 56.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 57, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 57.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 57, 'stepTime': 57.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 58, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 58.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 58, 'stepTime': 58.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 59, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 59.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 59, 'stepTime': 59.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 60, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 60.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 60, 'stepTime': 60.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 61, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 61.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 61, 'stepTime': 61.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 62, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 62.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 62, 'stepTime': 62.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 63, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 63.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 63, 'stepTime': 63.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 64, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 64.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 64, 'stepTime': 64.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 65, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 65.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 65, 'stepTime': 65.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 66, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 66.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 66, 'stepTime': 66.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 67, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 67.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 67, 'stepTime': 67.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 68, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 68.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 68, 'stepTime': 68.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 69, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 69.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 69, 'stepTime': 69.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 70, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 70.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 70, 'stepTime': 70.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 71, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 71.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 71, 'stepTime': 71.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 72, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 72.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 72, 'stepTime': 72.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 73, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 73.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 73, 'stepTime': 73.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 74, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 74.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 74, 'stepTime': 74.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 75, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 75.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 75, 'stepTime': 75.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 76, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 76.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 76, 'stepTime': 76.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 77, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 77.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 77, 'stepTime': 77.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 78, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 78.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 78, 'stepTime': 78.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 79, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 79.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 79, 'stepTime': 79.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 80, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 80.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 80, 'stepTime': 80.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 81, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 81.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 81, 'stepTime': 81.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 82, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 82.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 82, 'stepTime': 82.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 83, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 83.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 83, 'stepTime': 83.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 84, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 84.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 84, 'stepTime': 84.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 85, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 85.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 85, 'stepTime': 85.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 86, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 86.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 86, 'stepTime': 86.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 87, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 87.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 87, 'stepTime': 87.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 88, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 88.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 88, 'stepTime': 88.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 89, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 89.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 89, 'stepTime': 89.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 90, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 90.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 90, 'stepTime': 90.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 91, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 91.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 91, 'stepTime': 91.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 92, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 92.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 92, 'stepTime': 92.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 93, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 93.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 93, 'stepTime': 93.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 94, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 94.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 94, 'stepTime': 94.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 95, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 95.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 95, 'stepTime': 95.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 96, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 96.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 96, 'stepTime': 96.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 97, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 97.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 97, 'stepTime': 97.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 98, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 98.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 98, 'stepTime': 98.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 99, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 99.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 99, 'stepTime': 99.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 100, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 100.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 100, 'stepTime': 100.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-3']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(JOB_COMPLETED, {'time': 'Tue Jul  2 10:37:10 2024', 
    'jobName': 'Job-3'})
mdb.models['Model-3D'].steps['Step-1'].setValues(initialInc=500.0, maxInc=
    1000.0, maxNumInc=1000000, minInc=100.0)
# Save by nguyenb5 on 2024_07_02-11.06.25; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
# Save by nguyenb5 on 2024_07_02-11.07.28; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.jobs['Job-2']
mdb.models['Model-3D'].steps['Step-1'].setValues(deltmx=10.0, nlgeom=ON)
# Save by nguyenb5 on 2024_07_02-11.17.40; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].parts['elastic-hold-plate'].setElementType(elemTypes=(
    ElemType(elemCode=C3D8T, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6T, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT), ElemType(
    elemCode=C3D4T, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT)), regions=(
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), ))
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].steps['Step-1'].setValues(nlgeom=OFF)
# Save by nguyenb5 on 2024_07_02-11.35.44; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].steps['Step-1'].setValues(nlgeom=ON)
# Save by nguyenb5 on 2024_07_02-12.33.35; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].steps['Step-1'].setValues(initialInc=50000.0, maxInc=
    100000.0, minInc=10000.0)
# Save by nguyenb5 on 2024_07_02-12.37.08; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].steps['Step-1'].setValues(initialInc=500.0, maxInc=
    1000.0, minInc=100.0)
# Save by nguyenb5 on 2024_07_02-14.11.03; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#74780 ]', ), ), size=0.003)
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    AS_IS, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#fc780 ]', ), ), size=0.002)
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    AS_IS, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#3d ]', ), ), size=0.002)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.002)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-3D'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].sketch)
mdb.models['Model-3D'].parts['elastic-hold-plate'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=mdb.models['Model-3D'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'])
del mdb.models['Model-3D'].sketches['__edit__']
mdb.models['Model-3D'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].sketch)
mdb.models['Model-3D'].parts['elastic-hold-plate'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=mdb.models['Model-3D'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'])
del mdb.models['Model-3D'].sketches['__edit__']
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.001)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    AS_IS, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#f4780 ]', ), ), size=0.001)
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    AS_IS, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#3d ]', ), ), size=0.001)
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#3002800 ]', ), ), size=0.00025)
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#a00000 ]', ), ), size=0.0001)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
# Save by nguyenb5 on 2024_07_05-19.08.06; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-3D'].ConstrainedSketch(gridSpacing=0.004, name='__profile__', 
    sheetSize=0.16, transform=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-3D'].parts['elastic-hold-plate'].faces[5], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-3D'].parts['elastic-hold-plate'].edges[17], 
    sketchOrientation=RIGHT, origin=(0.028538, 0.032481, 0.001)))
mdb.models['Model-3D'].sketches['__profile__'].sketchOptions.setValues(
    decimalPlaces=3)
mdb.models['Model-3D'].parts['elastic-hold-plate'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['Model-3D'].sketches['__profile__'])
mdb.models['Model-3D'].sketches['__profile__'].Line(point1=(
    -0.00993999995715916, -0.014369), point2=(0.0244620000006109, -0.014369))
mdb.models['Model-3D'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-3D'].sketches['__profile__'].geometry[13])
mdb.models['Model-3D'].sketches['__profile__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['Model-3D'].sketches['__profile__'].geometry[2], 
    entity2=mdb.models['Model-3D'].sketches['__profile__'].geometry[13])
mdb.models['Model-3D'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-3D'].sketches['__profile__'].vertices[9], entity2=
    mdb.models['Model-3D'].sketches['__profile__'].geometry[9])
mdb.models['Model-3D'].sketches['__profile__'].Line(point1=(
    -0.00993999995715916, -0.014369), point2=(-0.00993999995715916, 
    0.0275189999978319))
mdb.models['Model-3D'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-3D'].sketches['__profile__'].geometry[14])
mdb.models['Model-3D'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-3D'].sketches['__profile__'].geometry[2], entity2=
    mdb.models['Model-3D'].sketches['__profile__'].geometry[14])
mdb.models['Model-3D'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-3D'].sketches['__profile__'].vertices[10], entity2=
    mdb.models['Model-3D'].sketches['__profile__'].geometry[8])
mdb.models['Model-3D'].parts['elastic-hold-plate'].PartitionFaceBySketch(faces=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].faces.getSequenceFromMask(
    ('[#20 ]', ), ), sketch=mdb.models['Model-3D'].sketches['__profile__'], 
    sketchUpEdge=mdb.models['Model-3D'].parts['elastic-hold-plate'].edges[17])
del mdb.models['Model-3D'].sketches['__profile__']
mdb.models['Model-3D'].parts['elastic-hold-plate'].PartitionCellByExtrudeEdge(
    cells=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), edges=(
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges[0], 
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges[4]), line=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges[24], sense=
    REVERSE)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#f ]', ), ))
# Save by nguyenb5 on 2024_07_05-19.12.52; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#f ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FIXED, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#627cf8e5 ]', ), ), size=0.0005)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh(
    seedConstraintOverride=ON)
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#f ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#627cfbf5 ]', ), ), size=0.0015)
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#627cfbf5 ]', ), ), size=0.001)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#f ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#427dfed5 ]', ), ), size=0.0005)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#f ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#427dfed5 ]', ), ), size=0.001)
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#14000000 #c ]', ), ), size=0.0002)
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.0005)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.0002)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.0001)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
# Save by nguyenb5 on 2024_07_05-20.05.39; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.001)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
# Save by nguyenb5 on 2024_07_05-20.10.11; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].materials['Material-1'].depvar.setValues(n=8)
# Save by nguyenb5 on 2024_07_05-21.15.45; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.002)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
# Save by nguyenb5 on 2024_07_05-21.19.01; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].rootAssembly.regenerate()
# Save by nguyenb5 on 2024_07_05-21.19.28; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.004)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
# Save by nguyenb5 on 2024_07_05-21.25.09; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].boundaryConditions['Zsymm_side1'].suppress()
mdb.models['Model-3D'].boundaryConditions['Zsymm_side2'].suppress()
mdb.models['Model-3D'].rootAssembly.Set(cells=
    mdb.models['Model-3D'].rootAssembly.instances['elastic-hold-plate-1'].cells.getSequenceFromMask(
    ('[#f ]', ), ), edges=
    mdb.models['Model-3D'].rootAssembly.instances['elastic-hold-plate-1'].edges.getSequenceFromMask(
    ('[#ffffffff #f ]', ), ), faces=
    mdb.models['Model-3D'].rootAssembly.instances['elastic-hold-plate-1'].faces.getSequenceFromMask(
    ('[#1fffff ]', ), ), name='Set-12', vertices=
    mdb.models['Model-3D'].rootAssembly.instances['elastic-hold-plate-1'].vertices.getSequenceFromMask(
    ('[#fffff ]', ), ))
mdb.models['Model-3D'].DisplacementBC(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'U3_constraint', region=mdb.models['Model-3D'].rootAssembly.sets['Set-12'], 
    u1=UNSET, u2=UNSET, u3=0.0, ur1=UNSET, ur2=UNSET, ur3=UNSET)
# Save by nguyenb5 on 2024_07_05-21.31.36; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.002)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
# Save by nguyenb5 on 2024_07_05-21.35.41; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.02)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.01)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].boundaryConditions['Zsymm_side1'].resume()
mdb.models['Model-3D'].boundaryConditions['Zsymm_side2'].resume()
mdb.models['Model-3D'].boundaryConditions['U3_constraint'].suppress()
mdb.models['Model-3D'].steps['Step-1'].setValues(nlgeom=OFF)
# Save by nguyenb5 on 2024_07_05-22.05.07; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].boundaryConditions['Zsymm_side1'].suppress()
mdb.models['Model-3D'].boundaryConditions['Zsymm_side2'].suppress()
# Save by nguyenb5 on 2024_07_05-22.07.42; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.002)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
# Save by nguyenb5 on 2024_07_05-22.08.24; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].rootAssembly.regenerate()
del mdb.jobs['Job-3']
mdb.models['Model-3D'].steps['Step-1'].setValues(deltmx=1.0, nlgeom=ON)
# Save by nguyenb5 on 2024_07_05-22.12.59; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].steps['Step-1'].setValues(initialInc=50.0, maxInc=100.0, 
    minInc=10.0)
# Save by nguyenb5 on 2024_07_05-22.14.35; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'L23-0203', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '2 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\LocalUserData\\User-data\\nguyenb5\\3rd benchmarking C3D8T hydrostatic stress gradient\\elastic_plate_with_central_hole_3D\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'L23-0203', 'handle': 14048, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'USER SUBROUTINE UMAT IS MISSING', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
# Save by nguyenb5 on 2024_07_06-13.36.32; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].steps['Step-1'].setValues(deltmx=10.0)
# Save by nguyenb5 on 2024_07_06-13.51.16; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].boundaryConditions['Zsymm_side1'].resume()
mdb.models['Model-3D'].boundaryConditions['Zsymm_side2'].resume()
# Save by nguyenb5 on 2024_07_06-13.53.05; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].steps['Step-1'].setValues(initialInc=50000.0, maxInc=
    100000.0, maxNumInc=10000000, minInc=10000.0, timePeriod=10000000000.0)
# Save by nguyenb5 on 2024_07_06-13.55.20; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].materials['Material-1'].userMaterial.setValues(
    thermalConstants=(8.31446261815324, 300.0, 2e-06, 3.8e-06))
mdb.models['Model-3D'].steps['Step-1'].setValues(amplitude=STEP, cetol=None, 
    creepIntegration=None, deltmx=10.0)
mdb.models['Model-3D'].materials['Material-1'].userMaterial.setValues(
    thermalConstants=(8.31446261815324, 300.0, 2e-06, 3.8e-11))
# Save by nguyenb5 on 2024_07_06-14.33.51; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].materials['Material-1'].userMaterial.setValues(
    thermalConstants=(8.31446261815324, 300.0, 2e-06, 3.8e-06))
# Save by nguyenb5 on 2024_07_06-14.45.56; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.001)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
# Save by nguyenb5 on 2024_07_06-14.53.03; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].materials['Material-1'].userMaterial.setValues(
    thermalConstants=(8.31446261815324, 300.0, 2e-06, 3.8e-11))
# Save by nguyenb5 on 2024_07_06-14.53.27; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.0001)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
# Save by nguyenb5 on 2024_07_06-14.58.02; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.01)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByNumber(constraint=
    FINER, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#20000000 ]', ), ), number=1)
mdb.models['Model-3D'].parts['elastic-hold-plate'].setSeedConstraints(
    constraint=FIXED, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#20000000 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh(
    seedConstraintOverride=ON)
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#f ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByNumber(constraint=
    FIXED, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#982012a #1 ]', ), ), number=1)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.1)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
# Save by nguyenb5 on 2024_07_06-15.06.35; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=1.0)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.02)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByNumber(constraint=
    FIXED, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#2080012a ]', ), ), number=2)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh(
    seedConstraintOverride=ON)
# Save by nguyenb5 on 2024_07_06-15.15.52; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.01)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByNumber(constraint=
    FIXED, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#2080012a ]', ), ), number=1)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
# Save by nguyenb5 on 2024_07_06-15.19.30; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].steps['Step-1'].setValues(creepIntegration=None, 
    initialInc=5000000.0, maxInc=10000000.0, minInc=1000000.0)
# Save by nguyenb5 on 2024_07_06-15.19.59; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.1)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
# Save by nguyenb5 on 2024_07_06-15.24.52; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].steps['Step-1'].setValues(creepIntegration=None, 
    initialInc=500.0, maxInc=1000.0, minInc=100.0)
# Save by nguyenb5 on 2024_07_06-15.27.50; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.002)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.005)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByNumber(constraint=
    FIXED, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#20000120 ]', ), ), number=2)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh(
    seedConstraintOverride=ON)
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#f ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByNumber(constraint=
    AS_IS, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#2982012a #1 ]', ), ), number=2)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
# Save by nguyenb5 on 2024_07_06-16.28.57; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
# Save by nguyenb5 on 2024_07_06-16.32.01; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.1)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#f ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByNumber(constraint=
    AS_IS, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#63ffffff ]', ), ), number=1)
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=0.01)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh(
    seedConstraintOverride=ON)
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#f ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#427dfed5 ]', ), ), size=0.001)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#f ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#407d00c4 ]', ), ), size=0.002)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#8200 ]', ), ), size=0.002)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#f ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#42611ed5 ]', ), ), size=0.002)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].cells.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#42084050 ]', ), ), size=0.002)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
# Save by nguyenb5 on 2024_07_06-17.14.35; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].boundaryConditions['Zsymm_side1'].suppress()
mdb.models['Model-3D'].boundaryConditions['Zsymm_side2'].suppress()
mdb.models['Model-3D'].boundaryConditions['Zsymm'].resume()
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=1e-05)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh(
    seedConstraintOverride=ON)
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=1e-12)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
#* FeatureError: Regeneration failed
mdb.models['Model-3D'].parts['elastic-hold-plate'].restore()
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=1e-09)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
#* FeatureError: Regeneration failed
mdb.models['Model-3D'].parts['elastic-hold-plate'].restore()
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=1e-08)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
#* FeatureError: Regeneration failed
mdb.models['Model-3D'].parts['elastic-hold-plate'].restore()
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=1e-07)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
#* FeatureError: Regeneration failed
mdb.models['Model-3D'].parts['elastic-hold-plate'].restore()
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=1e-06)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
#* FeatureError: Regeneration failed
mdb.models['Model-3D'].parts['elastic-hold-plate'].restore()
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh(
    seedConstraintOverride=ON)
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=100.0)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh(
    seedConstraintOverride=ON)
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=10000.0)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].parts['elastic-hold-plate'].seedEdgeByNumber(constraint=
    AS_IS, edges=
    mdb.models['Model-3D'].parts['elastic-hold-plate'].edges.getSequenceFromMask(
    ('[#5182012a #4 ]', ), ), number=1)
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].features['Solid extrude-1'].setValues(
    depth=10.0)
mdb.models['Model-3D'].parts['elastic-hold-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-hold-plate'].generateMesh()
mdb.models['Model-3D'].rootAssembly.regenerate()
mdb.models['Model-3D'].sections['Section-1'].setValues(material='Material-1', 
    thickness=100.0)
mdb.models['Model-3D'].sections['Section-1'].setValues(material='Material-1', 
    thickness=10.0)
# Save by nguyenb5 on 2024_07_07-17.40.06; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
