from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models.changeKey(fromName='Model-1', toName='Model-2D')
# Save by nguyenb5 on 2024_06_28-17.15.10; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(modelType=STANDARD_EXPLICIT, name='Model-3D')
mdb.models['Model-2D'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-2D'].parts['elastic-plastic-plate'].features['Partition face-1'].sketch)
mdb.models['Model-2D'].parts['elastic-plastic-plate'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=mdb.models['Model-2D'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-2D'].parts['elastic-plastic-plate'].features['Partition face-1'])
del mdb.models['Model-2D'].sketches['__edit__']
mdb.models['Model-3D'].ConstrainedSketch(name='__profile__', sheetSize=0.2)
mdb.models['Model-3D'].sketches['__profile__'].sketchOptions.setValues(
    decimalPlaces=3)
mdb.models['Model-3D'].sketches['__profile__'].rectangle(point1=(0.0, 0.0), 
    point2=(0.06, 0.06))
mdb.models['Model-3D'].sketches['__profile__'].EllipseByCenterPerimeter(
    axisPoint1=(0.04, 0.0), axisPoint2=(0.0, 0.01), center=(0.0, 0.0))
mdb.models['Model-3D'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-3D'].sketches['__profile__'].vertices[4], entity2=
    mdb.models['Model-3D'].sketches['__profile__'].geometry[5])
mdb.models['Model-3D'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-3D'].sketches['__profile__'].geometry[6], point1=(
    -0.0137137211859226, 0.0113938637077808))
mdb.models['Model-3D'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-3D'].sketches['__profile__'].geometry[2], point1=(
    -0.000338573008775711, 0.00901161879301071))
mdb.models['Model-3D'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-3D'].sketches['__profile__'].geometry[5], point1=(
    0.0130365751683712, 0.000197306275367737))
mdb.models['Model-3D'].Part(dimensionality=THREE_D, name=
    'elastic-plastic-plate', type=DEFORMABLE_BODY)
mdb.models['Model-3D'].parts['elastic-plastic-plate'].BaseSolidExtrude(depth=
    0.02, sketch=mdb.models['Model-3D'].sketches['__profile__'])
del mdb.models['Model-3D'].sketches['__profile__']
mdb.models['Model-3D'].parts['elastic-plastic-plate'].features['Solid extrude-1'].setValues(
    depth=0.001)
mdb.models['Model-3D'].parts['elastic-plastic-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-plastic-plate'].features['Solid extrude-1'].setValues(
    depth=0.002)
mdb.models['Model-3D'].parts['elastic-plastic-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-plastic-plate'].features['Solid extrude-1'].setValues(
    depth=0.006)
mdb.models['Model-3D'].parts['elastic-plastic-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-plastic-plate'].features['Solid extrude-1'].setValues(
    depth=0.002)
mdb.models['Model-3D'].parts['elastic-plastic-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-plastic-plate'].regenerate()
mdb.models['Model-3D'].parts['elastic-plastic-plate'].DatumPlaneByOffset(flip=
    SIDE2, offset=0.035, plane=
    mdb.models['Model-3D'].parts['elastic-plastic-plate'].faces[0])
mdb.models['Model-3D'].parts['elastic-plastic-plate'].PartitionCellByDatumPlane(
    cells=
    mdb.models['Model-3D'].parts['elastic-plastic-plate'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), datumPlane=
    mdb.models['Model-3D'].parts['elastic-plastic-plate'].datums[2])
mdb.models['Model-3D'].Material(name='Material-1')
mdb.models['Model-3D'].materials['Material-1'].Density(table=((1.0, ), ))
mdb.models['Model-3D'].materials['Material-1'].Depvar(n=22)
mdb.models['Model-3D'].materials['Material-1'].UserMaterial(
    mechanicalConstants=(200000000000.0, 0.3, 0.2, 3.0, 2.0), thermalConstants=
    (8.31446261815324, 293.0, 2e-06, 3.8e-11), type=THERMOMECHANICAL)
mdb.models['Model-3D'].HomogeneousSolidSection(material='Material-1', name=
    'Section-1', thickness=None)
mdb.models['Model-3D'].parts['elastic-plastic-plate'].Set(cells=
    mdb.models['Model-3D'].parts['elastic-plastic-plate'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), name='Set-1')
mdb.models['Model-3D'].parts['elastic-plastic-plate'].SectionAssignment(offset=
    0.0, offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-3D'].parts['elastic-plastic-plate'].sets['Set-1'], 
    sectionName='Section-1', thicknessAssignment=FROM_SECTION)
mdb.models['Model-3D'].CoupledTempDisplacementStep(cetol=None, 
    creepIntegration=None, deltmx=None, name='Step-1', previous='Initial', 
    timeIncrementationMethod=FIXED)
mdb.models['Model-3D'].steps['Step-1'].setValues(creepIntegration=None, 
    initialInc=1000.0, maxNumInc=1000, nlgeom=ON, timePeriod=100000.0)
mdb.models['Model-3D'].fieldOutputRequests['F-Output-1'].setValues(variables=(
    'COORD', 'E', 'HFL', 'LE', 'NT', 'RF', 'RFL', 'S', 'SDV', 'TEMP', 'U'))
mdb.models['Model-3D'].TabularAmplitude(data=((0.0, 0.0), (100000.0, 1.0)), 
    name='Amp-1', smooth=SOLVER_DEFAULT, timeSpan=STEP)
mdb.models['Model-3D'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model-3D'].rootAssembly.Instance(dependent=ON, name=
    'elastic-plastic-plate-1', part=
    mdb.models['Model-3D'].parts['elastic-plastic-plate'])
mdb.models['Model-3D'].rootAssembly.Set(cells=
    mdb.models['Model-3D'].rootAssembly.instances['elastic-plastic-plate-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), edges=
    mdb.models['Model-3D'].rootAssembly.instances['elastic-plastic-plate-1'].edges.getSequenceFromMask(
    ('[#7fffff ]', ), ), faces=
    mdb.models['Model-3D'].rootAssembly.instances['elastic-plastic-plate-1'].faces.getSequenceFromMask(
    ('[#fff ]', ), ), name='Set-1', vertices=
    mdb.models['Model-3D'].rootAssembly.instances['elastic-plastic-plate-1'].vertices.getSequenceFromMask(
    ('[#3fff ]', ), ))
mdb.models['Model-3D'].Temperature(createStepName='Initial', 
    crossSectionDistribution=CONSTANT_THROUGH_THICKNESS, distributionType=
    UNIFORM, magnitudes=(27.0, ), name='Cbar_L', region=
    mdb.models['Model-3D'].rootAssembly.sets['Set-1'])
mdb.models['Model-3D'].rootAssembly.Set(faces=
    mdb.models['Model-3D'].rootAssembly.instances['elastic-plastic-plate-1'].faces.getSequenceFromMask(
    ('[#44 ]', ), ), name='Set-2')
mdb.models['Model-3D'].XsymmBC(createStepName='Initial', localCsys=None, name=
    'XSYMM', region=mdb.models['Model-3D'].rootAssembly.sets['Set-2'])
mdb.models['Model-3D'].rootAssembly.Set(faces=
    mdb.models['Model-3D'].rootAssembly.instances['elastic-plastic-plate-1'].faces.getSequenceFromMask(
    ('[#80 ]', ), ), name='Set-3')
mdb.models['Model-3D'].YsymmBC(createStepName='Initial', localCsys=None, name=
    'YSYMM', region=mdb.models['Model-3D'].rootAssembly.sets['Set-3'])
mdb.models['Model-3D'].rootAssembly.Set(faces=
    mdb.models['Model-3D'].rootAssembly.instances['elastic-plastic-plate-1'].faces.getSequenceFromMask(
    ('[#20 ]', ), ), name='Set-4')
mdb.models['Model-3D'].DisplacementBC(amplitude='Amp-1', createStepName=
    'Step-1', distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None
    , name='DISP', region=mdb.models['Model-3D'].rootAssembly.sets['Set-4'], 
    u1=UNSET, u2=0.0006, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
# Save by nguyenb5 on 2024_06_28-17.37.29; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].parts['elastic-plastic-plate'].seedEdgeBySize(
    constraint=FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-plastic-plate'].edges.getSequenceFromMask(
    ('[#3e07f ]', ), ), size=0.0001)
mdb.models['Model-3D'].parts['elastic-plastic-plate'].seedEdgeBySize(
    constraint=FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-plastic-plate'].edges.getSequenceFromMask(
    ('[#3e07f ]', ), ), size=0.001)
mdb.models['Model-3D'].parts['elastic-plastic-plate'].generateMesh(regions=
    mdb.models['Model-3D'].parts['elastic-plastic-plate'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-3D'].parts['elastic-plastic-plate'].setMeshControls(
    algorithm=ADVANCING_FRONT, regions=
    mdb.models['Model-3D'].parts['elastic-plastic-plate'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), technique=SWEEP)
mdb.models['Model-3D'].parts['elastic-plastic-plate'].deleteMesh(regions=
    mdb.models['Model-3D'].parts['elastic-plastic-plate'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-3D'].parts['elastic-plastic-plate'].seedEdgeBySize(
    constraint=FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-plastic-plate'].edges.getSequenceFromMask(
    ('[#140100 ]', ), ), size=0.001)
mdb.models['Model-3D'].parts['elastic-plastic-plate'].seedEdgeBySize(
    constraint=FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-plastic-plate'].edges.getSequenceFromMask(
    ('[#600e80 ]', ), ), size=0.0005)
mdb.models['Model-3D'].parts['elastic-plastic-plate'].seedEdgeBySize(
    constraint=FINER, deviationFactor=0.1, edges=
    mdb.models['Model-3D'].parts['elastic-plastic-plate'].edges.getSequenceFromMask(
    ('[#81000 ]', ), ), size=0.0002)
mdb.models['Model-3D'].parts['elastic-plastic-plate'].generateMesh(regions=
    mdb.models['Model-3D'].parts['elastic-plastic-plate'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-3D'].parts['elastic-plastic-plate'].generateMesh(regions=
    mdb.models['Model-3D'].parts['elastic-plastic-plate'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
# Save by nguyenb5 on 2024_06_28-17.40.54; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].parts['elastic-plastic-plate'].setElementType(elemTypes=
    (ElemType(elemCode=C3D8T, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6T, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT), ElemType(
    elemCode=C3D4T, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT)), regions=(
    mdb.models['Model-3D'].parts['elastic-plastic-plate'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), ))
# Save by nguyenb5 on 2024_06_28-17.41.52; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-3D'].rootAssembly.regenerate()
del mdb.jobs['Job-1']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-3D', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-1', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
# Save by nguyenb5 on 2024_06_28-17.42.10; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
