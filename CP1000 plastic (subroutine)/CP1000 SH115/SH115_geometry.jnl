from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].Part(name='Part-1-failed', objectToCopy=
    mdb.models['Model-1'].parts['Part-1'])
mdb.models['Model-1'].parts['Part-1-failed'].Unlock(reportWarnings=False)
del mdb.models['Model-1'].parts['Part-1']
mdb.models['Model-1'].parts.changeKey(fromName='Part-1-failed', toName=
    'Part-1')
mdb.models['Model-1'].rootAssembly.regenerate()
#* FeatureError: The assembly is locked and cannot be regenerated.
mdb.models['Model-1'].Part(name='Part-2-failed', objectToCopy=
    mdb.models['Model-1'].parts['Part-2'])
mdb.models['Model-1'].parts['Part-2-failed'].Unlock(reportWarnings=False)
del mdb.models['Model-1'].parts['Part-2']
mdb.models['Model-1'].parts.changeKey(fromName='Part-2-failed', toName=
    'Part-2')
mdb.models['Model-1'].rootAssembly.regenerate()
#* FeatureError: The assembly is locked and cannot be regenerated.
# Save by nguyenb5 on 2024_05_30-15.20.53; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['Part-2'].regenerate()
mdb.models['Model-1'].rootAssembly.unlock()
mdb.models['Model-1'].rootAssembly.deleteFeatures(('Partition face-1', 
    'Partition cell-2'))
# Save by nguyenb5 on 2024_05_30-15.21.15; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].steps.changeKey(fromName='Move', toName='Step-1')
# Save by nguyenb5 on 2024_05_30-15.22.09; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
# Save by nguyenb5 on 2024_05_30-15.22.19; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].boundaryConditions.changeKey(fromName='y', toName=
    'bottom_encastre')
mdb.models['Model-1'].boundaryConditions.changeKey(fromName='z_sym', toName=
    'zsymm')
mdb.models['Model-1'].boundaryConditions.changeKey(fromName='move', toName=
    'top_disp')
# Save by nguyenb5 on 2024_05_30-15.33.00; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(name='Model-Full', objectToCopy=mdb.models['Model-1'])
mdb.models.changeKey(fromName='Model-1', toName='Model-One-Half')
del mdb.models['Model-Full'].parts['Part-1']
mdb.models['Model-Full'].rootAssembly.suppressFeatures(featureNames=('model', 
    ))
mdb.models['Model-Full'].parts['Part-2'].Set(cells=
    mdb.models['Model-Full'].parts['Part-2'].cells.getSequenceFromMask((
    '[#1 ]', ), ), name='Set-1')
mdb.models['Model-Full'].parts['Part-2'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-Full'].parts['Part-2'].sets['Set-1'], sectionName=
    'Section-1', thicknessAssignment=FROM_SECTION)
mdb.models['Model-Full'].rootAssembly.deleteSets(setNames=('Disp', 'Force', 
    'y_fix', 'z_symm'))
del mdb.models['Model-Full'].rootAssembly.features['model']
mdb.models['Model-Full'].parts.changeKey(fromName='Part-2', toName='Part-1')
mdb.models['Model-Full'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model-Full'].rootAssembly.Instance(dependent=ON, name='Part-1-1', 
    part=mdb.models['Model-Full'].parts['Part-1'])
mdb.models['Model-Full'].boundaryConditions.delete(('top_disp', 
    'bottom_encastre', 'zsymm'))
mdb.models['Model-Full'].steps['Step-1'].setValues(initialInc=0.1, noStop=OFF, 
    timeIncrementationMethod=FIXED, timePeriod=840.0)
mdb.models['Model-Full'].amplitudes['Amp-1'].setValues(data=((0.0, 0.0), (
    840.0, 1.0)), smooth=SOLVER_DEFAULT, timeSpan=STEP)
mdb.models['Model-Full'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-Full'].sketches['Sketch-4'])
del mdb.models['Model-Full'].sketches['__edit__']
mdb.models['Model-Full'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-Full'].sketches['shear 0'])
del mdb.models['Model-Full'].sketches['__edit__']
mdb.models['Model-Full'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-Full'].sketches['shear3'])
del mdb.models['Model-Full'].sketches['__edit__']
mdb.ModelFromInputFile(inputFileName=
    'C:/LocalUserData/User-data/nguyenb5/CP1000 processed/CP1000 SH/SHFull_Fullfix_sv05.inp'
    , name='SHFull_Fullfix_sv05')
#* Number of intervals must be greater than zero.
mdb.models['Model-Full'].ConstrainedSketch(gridSpacing=12.52, name=
    '__profile__', sheetSize=500.9, transform=
    mdb.models['Model-Full'].parts['Part-1'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-Full'].parts['Part-1'].faces[16], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-Full'].parts['Part-1'].edges[34], 
    sketchOrientation=RIGHT, origin=(29.304499, -80.204495, 1.0)))
mdb.models['Model-Full'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-Full'].sketches['__profile__'])
del mdb.models['Model-Full'].sketches['__profile__']
mdb.models['Model-Full'].Part(compressFeatureList=ON, name='Part-1-Copy', 
    objectToCopy=mdb.models['Model-Full'].parts['Part-1'], scale=0.001)
del mdb.models['Model-Full'].parts['Part-1-Copy']
mdb.models['Model-Full'].Part(compressFeatureList=ON, name='Part-1-Copy', 
    objectToCopy=mdb.models['Model-Full'].parts['Part-1'], scale=0.001)
mdb.Model(name='Model-Full-Copy', objectToCopy=mdb.models['Model-Full'])
del mdb.models['Model-Full-Copy']
mdb.models['Model-Full'].parts.changeKey(fromName='Part-1', toName='SH115_mm')
mdb.models['Model-Full'].parts.changeKey(fromName='Part-1-Copy', toName=
    'SH115_m')
mdb.models['SHFull_Fullfix_sv05'].Material(name='CP1000_SV05-Copy', 
    objectToCopy=mdb.models['SHFull_Fullfix_sv05'].materials['CP1000_SV05'])
del mdb.models['SHFull_Fullfix_sv05'].materials['CP1000_SV05-Copy']
mdb.models['Model-Full'].materials['CP1000'].elastic.setValues(table=((
    210000000000.0, 0.3), ))
mdb.models['Model-Full'].materials['CP1000'].Density(table=((7890000.0, ), ))
mdb.models['Model-Full'].materials['CP1000'].Plastic(scaleStress=None, table=((
    839646000.0, 0.0), (880025000.0, 0.0003), (906975000.0, 0.0005), (
    926275000.0, 0.001), (926275000.0, 0.002), (939393000.0, 0.003), (
    949756000.0, 0.004), (958495000.0, 0.005), (966134000.0, 0.006), (
    972960000.0, 0.007), (979150000.0, 0.008), (984823000.0, 0.009), (
    990061000.0, 0.01), (1027470000.0, 0.02), (1049750000.0, 0.03), (
    1064310000.0, 0.04), (1074410000.0, 0.05), (1081810000.0, 0.06), (
    1087490000.0, 0.07), (1092060000.0, 0.08), (1095870000.0, 0.09), (
    1099140000.0, 0.1), (1111180000.0, 0.15), (1119630000.0, 0.2), (
    1126250000.0, 0.25), (1131720000.0, 0.3), (1136380000.0, 0.35), (
    1140440000.0, 0.4), (1144050000.0, 0.45), (1147300000.0, 0.5), (
    1150250000.0, 0.55), (1152960000.0, 0.6), (1155460000.0, 0.65), (
    1157790000.0, 0.7), (1159960000.0, 0.75), (1162000000.0, 0.8), (
    1163920000.0, 0.85), (1165740000.0, 0.9), (1167460000.0, 0.95), (
    1169110000.0, 1.0), (1170670000.0, 1.05), (1172160000.0, 1.1), (
    1173600000.0, 1.15), (1174970000.0, 1.2), (1176290000.0, 1.25), (
    1177560000.0, 1.3), (1178790000.0, 1.35), (1179970000.0, 1.4), (
    1181120000.0, 1.45), (1182220000.0, 1.5), (1183300000.0, 1.55), (
    1184340000.0, 1.6), (1185350000.0, 1.65), (1186330000.0, 1.7), (
    1187280000.0, 1.75), (1188210000.0, 1.8), (1189120000.0, 1.85), (
    1190000000.0, 1.9), (1190860000.0, 1.95), (1191700000.0, 2.0), (
    1192520000.0, 2.05), (1193320000.0, 2.1), (1194100000.0, 2.15), (
    1194870000.0, 2.2), (1195620000.0, 2.25), (1196350000.0, 2.3), (
    1197070000.0, 2.35), (1197770000.0, 2.4), (1198470000.0, 2.45), (
    1199140000.0, 2.5), (1199810000.0, 2.55), (1200460000.0, 2.6), (
    1201100000.0, 2.65), (1201730000.0, 2.7), (1202350000.0, 2.75), (
    1202960000.0, 2.8), (1203550000.0, 2.85), (1204140000.0, 2.9), (
    1204720000.0, 2.95), (1205290000.0, 3.0)))
# Save by nguyenb5 on 2024_05_31-19.07.15; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-Full'].rootAssembly.regenerate()
del mdb.models['Model-Full'].sections['Section-1']
mdb.models['Model-Full'].HomogeneousSolidSection(material='CP1000', name=
    'Section-1', thickness=None)
mdb.models['Model-Full'].parts['SH115_m'].Set(cells=
    mdb.models['Model-Full'].parts['SH115_m'].cells.getSequenceFromMask((
    '[#1 ]', ), ), name='Set-1')
mdb.models['Model-Full'].parts['SH115_m'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-Full'].parts['SH115_m'].sets['Set-1'], sectionName=
    'Section-1', thicknessAssignment=FROM_SECTION)
del mdb.models['Model-Full'].sections['Section-1']
mdb.models['Model-Full'].HomogeneousSolidSection(material='CP1000', name=
    'Section-1', thickness=None)
mdb.models['Model-Full'].parts['SH115_m'].Set(cells=
    mdb.models['Model-Full'].parts['SH115_m'].cells.getSequenceFromMask((
    '[#1 ]', ), ), name='Set-2')
mdb.models['Model-Full'].parts['SH115_m'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-Full'].parts['SH115_m'].sets['Set-2'], sectionName=
    'Section-1', thicknessAssignment=FROM_SECTION)
mdb.models['Model-Full'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-Full'].parts['SH115_mm'].features['Solid extrude-1'].sketch)
mdb.models['Model-Full'].parts['SH115_mm'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-Full'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-Full'].parts['SH115_mm'].features['Solid extrude-1'])
mdb.models['Model-Full'].sketches['__edit__'].Line(point1=(36.8044986724853, 
    -67.7044948890084), point2=(21.804498434557, -67.7044948890084))
mdb.models['Model-Full'].sketches['__edit__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-Full'].sketches['__edit__'].geometry[30])
mdb.models['Model-Full'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-Full'].sketches['__edit__'].vertices[35], entity2=
    mdb.models['Model-Full'].sketches['__edit__'].geometry[25])
del mdb.models['Model-Full'].sketches['__edit__']
mdb.models['Model-Full'].parts['SH115_mm'].PartitionEdgeByParam(edges=
    mdb.models['Model-Full'].parts['SH115_mm'].edges.getSequenceFromMask((
    '[#0 #4 ]', ), ), parameter=0.950104809743081)
mdb.models['Model-Full'].parts['SH115_mm'].features['Partition edge-1'].setValues(
    parameter=2.0)
mdb.models['Model-Full'].parts['SH115_mm'].regenerate()
#* FeatureError: Regeneration failed
mdb.models['Model-Full'].parts['SH115_mm'].restore()
mdb.models['Model-Full'].parts['SH115_mm'].regenerate()
del mdb.models['Model-Full'].parts['SH115_mm'].features['Partition edge-1']
mdb.models['Model-Full'].parts['SH115_mm'].DatumPlaneByPrincipalPlane(offset=
    12.5, principalPlane=XZPLANE)
mdb.models['Model-Full'].parts['SH115_mm'].DatumPlaneByPrincipalPlane(offset=
    -12.5, principalPlane=XZPLANE)
mdb.models['Model-Full'].parts['SH115_mm'].DatumPlaneByPrincipalPlane(offset=
    10.5, principalPlane=XZPLANE)
mdb.models['Model-Full'].parts['SH115_mm'].DatumPlaneByPrincipalPlane(offset=
    -10.5, principalPlane=XZPLANE)
mdb.models['Model-Full'].parts['SH115_mm'].deleteFeatures(('Datum plane-1', 
    'Datum plane-2', 'Datum plane-3', 'Datum plane-4'))
mdb.models['Model-Full'].parts['SH115_mm'].DatumPlaneByPrincipalPlane(offset=
    0.0, principalPlane=XZPLANE)
del mdb.models['Model-Full'].parts['SH115_mm'].features['Datum plane-1']
mdb.models['Model-Full'].parts['SH115_mm'].DatumPlaneByOffset(flip=SIDE2, 
    offset=2.0, plane=mdb.models['Model-Full'].parts['SH115_mm'].faces[4])
del mdb.models['Model-Full'].parts['SH115_mm'].features['Datum plane-1']
mdb.models['Model-Full'].parts['SH115_mm'].DatumPlaneByOffset(flip=SIDE2, 
    offset=112.5, plane=mdb.models['Model-Full'].parts['SH115_mm'].faces[10])
mdb.models['Model-Full'].parts['SH115_mm'].DatumPlaneByOffset(flip=SIDE2, 
    offset=114.5, plane=mdb.models['Model-Full'].parts['SH115_mm'].faces[10])
mdb.models['Model-Full'].parts['SH115_mm'].DatumPlaneByOffset(flip=SIDE2, 
    offset=112.5, plane=mdb.models['Model-Full'].parts['SH115_mm'].faces[2])
mdb.models['Model-Full'].parts['SH115_mm'].DatumPlaneByOffset(flip=SIDE2, 
    offset=114.5, plane=mdb.models['Model-Full'].parts['SH115_mm'].faces[2])
mdb.models['Model-Full'].parts['SH115_mm'].PartitionCellByDatumPlane(cells=
    mdb.models['Model-Full'].parts['SH115_mm'].cells.getSequenceFromMask((
    '[#1 ]', ), ), datumPlane=
    mdb.models['Model-Full'].parts['SH115_mm'].datums[13])
mdb.models['Model-Full'].parts['SH115_mm'].PartitionCellByDatumPlane(cells=
    mdb.models['Model-Full'].parts['SH115_mm'].cells.getSequenceFromMask((
    '[#1 ]', ), ), datumPlane=
    mdb.models['Model-Full'].parts['SH115_mm'].datums[10])
mdb.models['Model-Full'].parts['SH115_mm'].PartitionCellByDatumPlane(cells=
    mdb.models['Model-Full'].parts['SH115_mm'].cells.getSequenceFromMask((
    '[#2 ]', ), ), datumPlane=
    mdb.models['Model-Full'].parts['SH115_mm'].datums[11])
mdb.models['Model-Full'].parts['SH115_mm'].PartitionCellByDatumPlane(cells=
    mdb.models['Model-Full'].parts['SH115_mm'].cells.getSequenceFromMask((
    '[#8 ]', ), ), datumPlane=
    mdb.models['Model-Full'].parts['SH115_mm'].datums[12])
# Save by nguyenb5 on 2024_05_31-19.34.36; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-Full'].parts['SH115_m'].checkGeometry()
del mdb.models['Model-Full'].parts['SH115_m']
mdb.models['Model-Full'].Part(compressFeatureList=ON, name='SH115_m', 
    objectToCopy=mdb.models['Model-Full'].parts['SH115_mm'], scale=0.001)
del mdb.models['Model-Full'].sections['Section-1']
mdb.models['Model-Full'].HomogeneousSolidSection(material='CP1000', name=
    'Section-1', thickness=None)
mdb.models['Model-Full'].parts['SH115_m'].Set(cells=
    mdb.models['Model-Full'].parts['SH115_m'].cells.getSequenceFromMask((
    '[#1f ]', ), ), name='Set-1')
mdb.models['Model-Full'].parts['SH115_m'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-Full'].parts['SH115_m'].sets['Set-1'], sectionName=
    'Section-1', thicknessAssignment=FROM_SECTION)
mdb.models['Model-Full'].parts['SH115_m'].seedEdgeByNumber(constraint=FINER, 
    edges=mdb.models['Model-Full'].parts['SH115_m'].edges.getSequenceFromMask((
    '[#0 #10000000 #1000 ]', ), ), number=7)
mdb.models['Model-Full'].parts['SH115_m'].seedEdgeByNumber(constraint=FINER, 
    edges=mdb.models['Model-Full'].parts['SH115_m'].edges.getSequenceFromMask((
    '[#2000 #0 #10 ]', ), ), number=7)
mdb.models['Model-Full'].parts['SH115_m'].seedEdgeByNumber(constraint=FINER, 
    edges=mdb.models['Model-Full'].parts['SH115_m'].edges.getSequenceFromMask((
    '[#100 #0 #4 ]', ), ), number=2)
mdb.models['Model-Full'].parts['SH115_m'].seedEdgeByNumber(constraint=FINER, 
    edges=mdb.models['Model-Full'].parts['SH115_m'].edges.getSequenceFromMask((
    '[#0 #1000000 #800 ]', ), ), number=2)
mdb.models['Model-Full'].parts['SH115_m'].seedEdgeByNumber(constraint=FINER, 
    edges=mdb.models['Model-Full'].parts['SH115_m'].edges.getSequenceFromMask((
    '[#2802a #100c0 ]', ), ), number=7)
mdb.models['Model-Full'].parts['SH115_m'].seedEdgeByNumber(constraint=FINER, 
    edges=mdb.models['Model-Full'].parts['SH115_m'].edges.getSequenceFromMask((
    '[#450 #40000025 #1 ]', ), ), number=4)
mdb.models['Model-Full'].parts['SH115_m'].seedEdgeByNumber(constraint=FINER, 
    edges=mdb.models['Model-Full'].parts['SH115_m'].edges.getSequenceFromMask((
    '[#0 #10000000 #1000 ]', ), ), number=8)
mdb.models['Model-Full'].parts['SH115_m'].seedEdgeByNumber(constraint=FINER, 
    edges=mdb.models['Model-Full'].parts['SH115_m'].edges.getSequenceFromMask((
    '[#2000 #0 #10 ]', ), ), number=8)
mdb.models['Model-Full'].parts['SH115_m'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-Full'].parts['SH115_m'].edges.getSequenceFromMask((
    '[#1280 #0 #2 ]', ), ), size=0.002)
mdb.models['Model-Full'].parts['SH115_m'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-Full'].parts['SH115_m'].edges.getSequenceFromMask((
    '[#0 #a800000 #400 ]', ), ), size=0.002)
mdb.models['Model-Full'].parts['SH115_mm'].features['Solid extrude-1'].setValues(
    depth=0.5)
mdb.models['Model-Full'].parts['SH115_mm'].regenerate()
mdb.models['Model-Full'].parts['SH115_mm'].regenerate()
del mdb.models['Model-Full'].parts['SH115_m']
mdb.models['Model-Full'].Part(compressFeatureList=ON, name='SH115_m', 
    objectToCopy=mdb.models['Model-Full'].parts['SH115_mm'], scale=0.001)
mdb.models['Model-Full'].rootAssembly.regenerate()
del mdb.models['Model-Full'].rootAssembly.features['Part-1-1']
del mdb.models['Model-Full'].rootAssembly.features['Datum csys-1']
mdb.models['Model-Full'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model-Full'].rootAssembly.Instance(dependent=ON, name='SH115_m-1', 
    part=mdb.models['Model-Full'].parts['SH115_m'])
mdb.models['Model-Full'].parts['SH115_m'].seedEdgeByNumber(constraint=FINER, 
    edges=mdb.models['Model-Full'].parts['SH115_m'].edges.getSequenceFromMask((
    '[#0 #10000000 #1000 ]', ), ), number=8)
mdb.models['Model-Full'].parts['SH115_m'].seedEdgeByNumber(constraint=FINER, 
    edges=mdb.models['Model-Full'].parts['SH115_m'].edges.getSequenceFromMask((
    '[#0 #1000000 #800 ]', ), ), number=2)
mdb.models['Model-Full'].parts['SH115_m'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-Full'].parts['SH115_m'].edges.getSequenceFromMask((
    '[#0 #2000040 #1400 ]', ), ), size=0.002)
mdb.models['Model-Full'].parts['SH115_m'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-Full'].parts['SH115_m'].edges.getSequenceFromMask((
    '[#0 #800000 ]', ), ), size=0.002)
mdb.models['Model-Full'].parts['SH115_m'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-Full'].parts['SH115_m'].edges.getSequenceFromMask((
    '[#338f #0 #16 ]', ), ), size=0.002)
mdb.models['Model-Full'].rootAssembly.regenerate()
mdb.models['Model-Full'].parts['SH115_m'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-Full'].parts['SH115_m'].edges.getSequenceFromMask((
    '[#208 #18800080 #12 ]', ), ), size=0.002)
mdb.models['Model-Full'].parts['SH115_m'].seedEdgeByNumber(constraint=FINER, 
    edges=mdb.models['Model-Full'].parts['SH115_m'].edges.getSequenceFromMask((
    '[#105 #0 #4 ]', ), ), number=2)
mdb.models['Model-Full'].parts['SH115_m'].generateMesh(regions=
    mdb.models['Model-Full'].parts['SH115_m'].cells.getSequenceFromMask((
    '[#1 ]', ), ))
mdb.models['Model-Full'].parts['SH115_m'].generateMesh(regions=
    mdb.models['Model-Full'].parts['SH115_m'].cells.getSequenceFromMask((
    '[#4 ]', ), ))
mdb.models['Model-Full'].parts['SH115_m'].seedEdgeByNumber(constraint=FINER, 
    edges=mdb.models['Model-Full'].parts['SH115_m'].edges.getSequenceFromMask((
    '[#450 #40000025 #1 ]', ), ), number=4)
mdb.models['Model-Full'].parts['SH115_m'].seedEdgeByNumber(constraint=FINER, 
    edges=mdb.models['Model-Full'].parts['SH115_m'].edges.getSequenceFromMask((
    '[#14800 #20000000 ]', ), ), number=4)
mdb.models['Model-Full'].parts['SH115_m'].seedEdgeByNumber(constraint=FINER, 
    edges=mdb.models['Model-Full'].parts['SH115_m'].edges.getSequenceFromMask((
    '[#28000 ]', ), ), number=8)
mdb.models['Model-Full'].parts['SH115_m'].generateMesh(regions=
    mdb.models['Model-Full'].parts['SH115_m'].cells.getSequenceFromMask((
    '[#2 ]', ), ))
mdb.models['Model-Full'].parts['SH115_m'].generateMesh(regions=
    mdb.models['Model-Full'].parts['SH115_m'].cells.getSequenceFromMask((
    '[#6 ]', ), ), seedConstraintOverride=ON)
mdb.models['Model-Full'].parts['SH115_m'].deleteMesh(regions=
    mdb.models['Model-Full'].parts['SH115_m'].cells.getSequenceFromMask((
    '[#4 ]', ), ))
mdb.models['Model-Full'].parts['SH115_m'].generateMesh(regions=
    mdb.models['Model-Full'].parts['SH115_m'].cells.getSequenceFromMask((
    '[#4 ]', ), ))
mdb.models['Model-Full'].parts['SH115_m'].deleteMesh(regions=
    mdb.models['Model-Full'].parts['SH115_m'].cells.getSequenceFromMask((
    '[#4 ]', ), ))
mdb.models['Model-Full'].parts['SH115_m'].deleteMesh()
mdb.models['Model-Full'].parts['SH115_m'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-Full'].parts['SH115_m'].edges.getSequenceFromMask((
    '[#fffc0000 #847efe18 #c3e8 ]', ), ), size=0.001)
mdb.models['Model-Full'].parts['SH115_m'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-Full'].parts['SH115_m'].edges.getSequenceFromMask((
    '[#fffc0000 #847efe18 #c3e8 ]', ), ), size=0.0001)
mdb.models['Model-Full'].parts['SH115_m'].generateMesh(regions=
    mdb.models['Model-Full'].parts['SH115_m'].cells.getSequenceFromMask((
    '[#8 ]', ), ))
mdb.models['Model-Full'].parts['SH115_m'].deleteMesh()
mdb.models['Model-Full'].parts['SH115_m'].seedEdgeByNumber(constraint=FINER, 
    edges=mdb.models['Model-Full'].parts['SH115_m'].edges.getSequenceFromMask((
    '[#20 #10000 ]', ), ), number=8)
mdb.models['Model-Full'].parts['SH115_m'].generateMesh(regions=
    mdb.models['Model-Full'].parts['SH115_m'].cells.getSequenceFromMask((
    '[#8 ]', ), ))
mdb.models['Model-Full'].parts['SH115_m'].seedEdgeByNumber(constraint=FINER, 
    edges=mdb.models['Model-Full'].parts['SH115_m'].edges.getSequenceFromMask((
    '[#0 #100 ]', ), ), number=2)
mdb.models['Model-Full'].parts['SH115_m'].deleteMesh(regions=
    mdb.models['Model-Full'].parts['SH115_m'].cells.getSequenceFromMask((
    '[#8 ]', ), ))
mdb.models['Model-Full'].parts['SH115_m'].seedEdgeByNumber(constraint=AS_IS, 
    edges=mdb.models['Model-Full'].parts['SH115_m'].edges.getSequenceFromMask((
    '[#28000 #c0 ]', ), ), number=8)
mdb.models['Model-Full'].parts['SH115_m'].generateMesh(regions=
    mdb.models['Model-Full'].parts['SH115_m'].cells.getSequenceFromMask((
    '[#8 ]', ), ))
mdb.models['Model-Full'].parts['SH115_m'].generateMesh(regions=
    mdb.models['Model-Full'].parts['SH115_m'].cells.getSequenceFromMask((
    '[#2 ]', ), ))
mdb.models['Model-Full'].parts['SH115_m'].generateMesh(regions=
    mdb.models['Model-Full'].parts['SH115_m'].cells.getSequenceFromMask((
    '[#4 ]', ), ))
mdb.models['Model-Full'].parts['SH115_m'].deleteMesh()
mdb.models['Model-Full'].parts['SH115_m'].seedEdgeByNumber(constraint=FINER, 
    edges=mdb.models['Model-Full'].parts['SH115_m'].edges.getSequenceFromMask((
    '[#0 #2 ]', ), ), number=2)
mdb.models['Model-Full'].parts['SH115_m'].generateMesh(regions=
    mdb.models['Model-Full'].parts['SH115_m'].cells.getSequenceFromMask((
    '[#2 ]', ), ))
mdb.models['Model-Full'].parts['SH115_m'].generateMesh(regions=
    mdb.models['Model-Full'].parts['SH115_m'].cells.getSequenceFromMask((
    '[#4 ]', ), ))
mdb.models['Model-Full'].parts['SH115_m'].deleteMesh()
mdb.models['Model-Full'].parts['SH115_m'].generateMesh(regions=
    mdb.models['Model-Full'].parts['SH115_m'].cells.getSequenceFromMask((
    '[#4 ]', ), ))
mdb.models['Model-Full'].parts['SH115_m'].generateMesh(regions=
    mdb.models['Model-Full'].parts['SH115_m'].cells.getSequenceFromMask((
    '[#2 ]', ), ))
mdb.models['Model-Full'].parts['SH115_m'].seedEdgeByNumber(constraint=FINER, 
    edges=mdb.models['Model-Full'].parts['SH115_m'].edges.getSequenceFromMask((
    '[#0 #4 #1 ]', ), ), number=1)
mdb.models['Model-Full'].parts['SH115_m'].generateMesh(regions=
    mdb.models['Model-Full'].parts['SH115_m'].cells.getSequenceFromMask((
    '[#2 ]', ), ))
mdb.models['Model-Full'].parts['SH115_m'].generateMesh(regions=
    mdb.models['Model-Full'].parts['SH115_m'].cells.getSequenceFromMask((
    '[#2 ]', ), ))
mdb.models['Model-Full'].parts['SH115_m'].deleteMesh()
mdb.models['Model-Full'].parts['SH115_m'].generateMesh(regions=
    mdb.models['Model-Full'].parts['SH115_m'].cells.getSequenceFromMask((
    '[#2 ]', ), ))
mdb.models['Model-Full'].parts['SH115_m'].deleteMesh(regions=
    mdb.models['Model-Full'].parts['SH115_m'].cells.getSequenceFromMask((
    '[#2 ]', ), ))
mdb.models['Model-Full'].parts['SH115_m'].setSeedConstraints(constraint=FIXED, 
    edges=mdb.models['Model-Full'].parts['SH115_m'].edges.getSequenceFromMask((
    '[#0:2 #1 ]', ), ))
mdb.models['Model-Full'].parts['SH115_m'].setSeedConstraints(constraint=FIXED, 
    edges=mdb.models['Model-Full'].parts['SH115_m'].edges.getSequenceFromMask((
    '[#0 #4 ]', ), ))
mdb.models['Model-Full'].parts['SH115_m'].generateMesh(regions=
    mdb.models['Model-Full'].parts['SH115_m'].cells.getSequenceFromMask((
    '[#2 ]', ), ))
mdb.models['Model-Full'].parts['SH115_m'].generateMesh(regions=
    mdb.models['Model-Full'].parts['SH115_m'].cells.getSequenceFromMask((
    '[#2 ]', ), ))
mdb.models['Model-Full'].parts['SH115_m'].generateMesh(regions=
    mdb.models['Model-Full'].parts['SH115_m'].cells.getSequenceFromMask((
    '[#2 ]', ), ), seedConstraintOverride=ON)
mdb.models['Model-Full'].parts['SH115_m'].deleteMesh()
mdb.models['Model-Full'].parts['SH115_m'].setMeshControls(regions=
    mdb.models['Model-Full'].parts['SH115_m'].cells.getSequenceFromMask((
    '[#2 ]', ), ), technique=BOTTOM_UP)
mdb.models['Model-Full'].parts['SH115_m'].setMeshControls(algorithm=
    ADVANCING_FRONT, regions=
    mdb.models['Model-Full'].parts['SH115_m'].cells.getSequenceFromMask((
    '[#2 ]', ), ), technique=SWEEP)
mdb.models['Model-Full'].parts['SH115_m'].generateMesh(regions=
    mdb.models['Model-Full'].parts['SH115_m'].cells.getSequenceFromMask((
    '[#2 ]', ), ))
mdb.models['Model-Full'].parts['SH115_m'].generateMesh(regions=
    mdb.models['Model-Full'].parts['SH115_m'].cells.getSequenceFromMask((
    '[#8 ]', ), ))
mdb.models['Model-Full'].parts['SH115_m'].seedEdgeByNumber(constraint=FIXED, 
    edges=mdb.models['Model-Full'].parts['SH115_m'].edges.getSequenceFromMask((
    '[#50 ]', ), ), number=1)
mdb.models['Model-Full'].parts['SH115_m'].generateMesh(regions=
    mdb.models['Model-Full'].parts['SH115_m'].cells.getSequenceFromMask((
    '[#10 ]', ), ))
mdb.models['Model-Full'].parts['SH115_m'].setMeshControls(algorithm=
    ADVANCING_FRONT, regions=
    mdb.models['Model-Full'].parts['SH115_m'].cells.getSequenceFromMask((
    '[#10 ]', ), ), technique=SWEEP)
mdb.models['Model-Full'].parts['SH115_m'].generateMesh(regions=
    mdb.models['Model-Full'].parts['SH115_m'].cells.getSequenceFromMask((
    '[#10 ]', ), ))
mdb.models['Model-Full'].parts['SH115_m'].generateMesh(regions=
    mdb.models['Model-Full'].parts['SH115_m'].cells.getSequenceFromMask((
    '[#5 ]', ), ))
# Save by nguyenb5 on 2024_05_31-20.27.57; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-Full'].rootAssembly.regenerate()
mdb.models['Model-Full'].rootAssembly.Set(cells=
    mdb.models['Model-Full'].rootAssembly.instances['SH115_m-1'].cells.getSequenceFromMask(
    ('[#1f ]', ), ), edges=
    mdb.models['Model-Full'].rootAssembly.instances['SH115_m-1'].edges.getSequenceFromMask(
    ('[#ffffffff:2 #ffff ]', ), ), faces=
    mdb.models['Model-Full'].rootAssembly.instances['SH115_m-1'].faces.getSequenceFromMask(
    ('[#ffffffff #3f ]', ), ), name='Set-23', vertices=
    mdb.models['Model-Full'].rootAssembly.instances['SH115_m-1'].vertices.getSequenceFromMask(
    ('[#ffffffff #ffff ]', ), ))
mdb.models['Model-Full'].ZsymmBC(createStepName='Step-1', localCsys=None, name=
    'BC-1', region=mdb.models['Model-Full'].rootAssembly.sets['Set-23'])
mdb.models['Model-Full'].boundaryConditions.changeKey(fromName='BC-1', toName=
    'ZSYMM')
mdb.models['Model-Full'].rootAssembly.Set(faces=
    mdb.models['Model-Full'].rootAssembly.instances['SH115_m-1'].faces.getSequenceFromMask(
    ('[#400000 ]', ), ), name='Set-24')
mdb.models['Model-Full'].EncastreBC(createStepName='Step-1', localCsys=None, 
    name='bottom_encastre', region=
    mdb.models['Model-Full'].rootAssembly.sets['Set-24'])
mdb.models['Model-Full'].rootAssembly.Set(faces=
    mdb.models['Model-Full'].rootAssembly.instances['SH115_m-1'].faces.getSequenceFromMask(
    ('[#40000000 ]', ), ), name='Set-25')
mdb.models['Model-Full'].DisplacementBC(amplitude='Amp-1', createStepName=
    'Step-1', distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None
    , name='top_displacement', region=
    mdb.models['Model-Full'].rootAssembly.sets['Set-25'], u1=UNSET, u2=0.002, 
    u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
del mdb.jobs['SH115']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-Full', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-1', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.models['Model-Full'].parts['SH115_m'].Set(cells=
    mdb.models['Model-Full'].parts['SH115_m'].cells.getSequenceFromMask((
    '[#1f ]', ), ), name='Set-24')
mdb.models['Model-Full'].parts['SH115_m'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-Full'].parts['SH115_m'].sets['Set-24'], sectionName=
    'Section-1', thicknessAssignment=FROM_SECTION)
mdb.models['Model-Full'].rootAssembly.regenerate()
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'L23-0203', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '118 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\LocalUserData\\User-data\\nguyenb5\\CP1000 processed\\CP1000 SH\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'L23-0203', 'handle': 15500, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 1822.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16017.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 312.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Fri May 31 20:46:52 2024', 
    'jobName': 'Job-1'})
# Save by nguyenb5 on 2024_05_31-20.47.17; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].setValues(numCpus=4, numDomains=4, numThreadsPerMpiProcess=1)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'L23-0203', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '118 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\LocalUserData\\User-data\\nguyenb5\\CP1000 processed\\CP1000 SH\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'L23-0203', 'handle': 17064, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 2113.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16017.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 269.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.3, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 3, 'stepTime': 0.3, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.4, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 4, 'stepTime': 0.4, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.5, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 5, 'stepTime': 0.5, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.6, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 6, 'stepTime': 0.6, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.7, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 7, 'stepTime': 0.7, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.8, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 8, 'stepTime': 0.8, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.9, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 9, 'stepTime': 0.9, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 10, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 11, 'stepTime': 1.1, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 12, 'stepTime': 1.2, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.3, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 13, 'stepTime': 1.3, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.4, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 14, 'stepTime': 1.4, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.5, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 15, 'stepTime': 1.5, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.6, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 16, 'stepTime': 1.6, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.7, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 17, 'stepTime': 1.7, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.8, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 18, 'stepTime': 1.8, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.9, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 19, 'stepTime': 1.9, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 20, 'stepTime': 2.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 2.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 21, 'stepTime': 2.1, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 21, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 2.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 22, 'stepTime': 2.2, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 22, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 2.3, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 23, 'stepTime': 2.3, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 23, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 2.4, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 24, 'stepTime': 2.4, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 24, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 2.5, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 25, 'stepTime': 2.5, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 25, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 2.6, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 26, 'stepTime': 2.6, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 26, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 2.7, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 27, 'stepTime': 2.7, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 27, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 2.8, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 28, 'stepTime': 2.8, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 28, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 2.9, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 29, 'stepTime': 2.9, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 29, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 3.0, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 30, 'stepTime': 3.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 30, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 3.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 31, 'stepTime': 3.1, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 31, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 3.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 32, 'stepTime': 3.2, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 32, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 3.3, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 33, 'stepTime': 3.3, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 33, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 3.4, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 34, 'stepTime': 3.4, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 34, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 3.5, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 35, 'stepTime': 3.5, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 35, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 3.6, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 36, 'stepTime': 3.6, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 36, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 3.7, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 37, 'stepTime': 3.7, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 37, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-Full'].steps['Step-1'].setValues(initialInc=1.0)
mdb.models['Model-Full'].fieldOutputRequests['F-Output-1'].setValues(frequency=
    1, variables=('PEEQ', 'RF', 'S', 'U'))
mdb.models['Model-One-Half'].fieldOutputRequests['F-Output-1'].setValues(
    numIntervals=200)
# Save by nguyenb5 on 2024_05_31-21.09.34; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
# Save by nguyenb5 on 2024_05_31-21.30.30; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models.changeKey(fromName='Model-Full', toName='Model-Full-Half-Thickness')
mdb.models.changeKey(fromName='Model-One-Half', toName=
    'Model-Truncated-Half-Thickness')
mdb.models['Model-Full-Half-Thickness'].Part(name='SH115_mm-Copy', 
    objectToCopy=mdb.models['Model-Full-Half-Thickness'].parts['SH115_mm'])
mdb.models['Model-Full-Half-Thickness'].parts.changeKey(fromName=
    'SH115_mm-Copy', toName='SH115_m-Copy')
mdb.models['Model-Full-Half-Thickness'].ConstrainedSketch(name='__edit__', 
    objectToCopy=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115_m-Copy'].features['Solid extrude-1'].sketch)
mdb.models['Model-Full-Half-Thickness'].parts['SH115_m-Copy'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'], upToFeature=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115_m-Copy'].features['Solid extrude-1'])
mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].scale(objectList=(
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[8], 
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[9], 
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[10], 
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[11], 
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[12], 
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[13], 
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[16], 
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[17], 
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[20], 
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[21], 
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[24], 
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[25], 
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[26], 
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[27], 
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[28], 
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[29]), 
    scaleCenter=(29.3044986724853, -80.2044948890084), scaleValue=0.001)
mdb.models['Model-Full-Half-Thickness'].parts['SH115_m-Copy'].features['Solid extrude-1'].setValues(
    sketch=mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'])
del mdb.models['Model-Full-Half-Thickness'].sketches['__edit__']
mdb.models['Model-Full-Half-Thickness'].parts['SH115_m-Copy'].regenerate()
#* FeatureError: Regeneration failed
mdb.models['Model-Full-Half-Thickness'].parts['SH115_m-Copy'].restore()
mdb.models['Model-Full-Half-Thickness'].parts['SH115_m-Copy'].regenerate()
mdb.models['Model-Full-Half-Thickness'].parts['SH115_m-Copy'].regenerate()
mdb.models['Model-Full-Half-Thickness'].ConstrainedSketch(name='__edit__', 
    objectToCopy=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115_m-Copy'].features['Solid extrude-1'].sketch)
mdb.models['Model-Full-Half-Thickness'].parts['SH115_m-Copy'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'], upToFeature=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115_m-Copy'].features['Solid extrude-1'])
del mdb.models['Model-Full-Half-Thickness'].sketches['__edit__']
mdb.models['Model-Full-Half-Thickness'].parts['SH115_m-Copy'].deleteFeatures((
    'Partition cell-4', 'Datum plane-1', 'Datum plane-2', 'Datum plane-3', 
    'Datum plane-4', 'Partition cell-1', 'Partition cell-2', 
    'Partition cell-3'))
mdb.models['Model-Full-Half-Thickness'].ConstrainedSketch(name='__edit__', 
    objectToCopy=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115_m-Copy'].features['Solid extrude-1'].sketch)
mdb.models['Model-Full-Half-Thickness'].parts['SH115_m-Copy'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'], upToFeature=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115_m-Copy'].features['Solid extrude-1'])
mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].copyScale(
    objectList=(
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[8], 
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[9], 
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[10], 
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[11], 
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[12], 
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[13], 
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[16], 
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[17], 
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[20], 
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[21], 
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[24], 
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[25], 
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[26], 
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[27], 
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[28], 
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[29]), 
    scaleCenter=(29.3044986724853, -80.2044948890084), scaleValue=0.001)
mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].autoTrimCurve(
    curve1=
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[24], 
    point1=(28.8953399658203, 45.1720428466797))
mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].autoTrimCurve(
    curve1=
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[26], 
    point1=(34.9795074462891, 32.5683288574219))
mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].autoTrimCurve(
    curve1=
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[25], 
    point1=(20.9391021728516, 27.9002990722656))
mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].autoTrimCurve(
    curve1=
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[21], 
    point1=(34.8809661865234, -74.4411163330078))
mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].autoTrimCurve(
    curve1=
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[10], 
    point1=(29.3819122314453, -74.9443206787109))
mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].autoTrimCurve(
    curve1=
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[13], 
    point1=(30.4918117523193, -76.1519927978516))
mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].autoTrimCurve(
    curve1=
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[20], 
    point1=(33.3674621582031, -75.4978332519531))
mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].autoTrimCurve(
    curve1=
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[8], 
    point1=(27.8179588317871, -78.0138168334961))
mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].autoTrimCurve(
    curve1=
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[28], 
    point1=(36.8485145568848, -77.0074234008789))
mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].autoTrimCurve(
    curve1=
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[9], 
    point1=(29.1617889404297, -81.8433456420898))
mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].autoTrimCurve(
    curve1=
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[12], 
    point1=(28.7029438018799, -83.3349761962891))
mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].autoTrimCurve(
    curve1=
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[17], 
    point1=(26.2047863006592, -84.7249069213867))
mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].autoTrimCurve(
    curve1=
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[11], 
    point1=(29.6036396026611, -84.9452667236328))
mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].autoTrimCurve(
    curve1=
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[16], 
    point1=(26.7558422088623, -85.6630859375))
mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].autoTrimCurve(
    curve1=
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[29], 
    point1=(21.3577575683594, -89.1890335083008))
mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].autoTrimCurve(
    curve1=
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].geometry[27], 
    point1=(28.5759925842285, -204.975372314453))
mdb.models['Model-Full-Half-Thickness'].parts['SH115_m-Copy'].features['Solid extrude-1'].setValues(
    sketch=mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'])
del mdb.models['Model-Full-Half-Thickness'].sketches['__edit__']
mdb.models['Model-Full-Half-Thickness'].parts['SH115_m-Copy'].regenerate()
mdb.models['Model-Full-Half-Thickness'].parts['SH115_m-Copy'].features['Solid extrude-1'].setValues(
    depth=0.0005)
mdb.models['Model-Full-Half-Thickness'].parts['SH115_m-Copy'].regenerate()
mdb.models['Model-Full-Half-Thickness'].parts.changeKey(fromName='SH115_mm', 
    toName='SH115_mm_copy')
mdb.models['Model-Full-Half-Thickness'].parts.changeKey(fromName=
    'SH115_mm_copy', toName='SH115_mm')
del mdb.models['Model-Full-Half-Thickness'].parts['SH115_m']
mdb.models['Model-Full-Half-Thickness'].parts.changeKey(fromName='SH115_m-Copy'
    , toName='SH115_m')
mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].DatumPlaneByOffset(
    flip=SIDE2, offset=0.1125, plane=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].faces[10])
mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].DatumPlaneByOffset(
    flip=SIDE2, offset=0.1145, plane=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].faces[10])
mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].DatumPlaneByOffset(
    flip=SIDE2, offset=0.1375, plane=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].faces[10])
mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].DatumPlaneByOffset(
    flip=SIDE2, offset=0.1355, plane=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].faces[10])
mdb.models.changeKey(fromName='SHFull_Fullfix_sv05', toName=
    'SHFull_Fullfix_sv05_reference_Wu_Jiao_Jiao')
mdb.models['Model-Full-Half-Thickness'].materials.changeKey(fromName='CP1000', 
    toName='CP1000_m')
mdb.models['Model-Full-Half-Thickness'].Material(name='CP1000_mm', 
    objectToCopy=mdb.models['Model-Full-Half-Thickness'].materials['CP1000_m'])
mdb.models['Model-Full-Half-Thickness'].materials['CP1000_mm'].density.setValues(
    table=((7.89e-09, ), ))
mdb.models['Model-Full-Half-Thickness'].materials['CP1000_mm'].elastic.setValues(
    table=((210000.0, 0.3), ))
mdb.models['Model-Full-Half-Thickness'].materials['CP1000_mm'].plastic.setValues(
    scaleStress=None, table=((839.646, 0.0), (880.025, 0.0003), (906.975, 
    0.0005), (926.275, 0.001), (926.275, 0.002), (939.393, 0.003), (949.756, 
    0.004), (958.495, 0.005), (966.134, 0.006), (972.96, 0.007), (979.15, 
    0.008), (984.823, 0.009), (990.061, 0.01), (1027.47, 0.02), (1049.75, 
    0.03), (1064.31, 0.04), (1074.41, 0.05), (1081.81, 0.06), (1087.49, 0.07), 
    (1092.06, 0.08), (1095.87, 0.09), (1099.14, 0.1), (1111.18, 0.15), (
    1119.63, 0.2), (1126.25, 0.25), (1131.72, 0.3), (1136.38, 0.35), (1140.44, 
    0.4), (1144.05, 0.45), (1147.3, 0.5), (1150.25, 0.55), (1152.96, 0.6), (
    1155.46, 0.65), (1157.79, 0.7), (1159.96, 0.75), (1162.0, 0.8), (1163.92, 
    0.85), (1165.74, 0.9), (1167.46, 0.95), (1169.11, 1.0), (1170.67, 1.05), (
    1172.16, 1.1), (1173.6, 1.15), (1174.97, 1.2), (1176.29, 1.25), (1177.56, 
    1.3), (1178.79, 1.35), (1179.97, 1.4), (1181.12, 1.45), (1182.22, 1.5), (
    1183.3, 1.55), (1184.34, 1.6), (1185.35, 1.65), (1186.33, 1.7), (1187.28, 
    1.75), (1188.21, 1.8), (1189.12, 1.85), (1190.0, 1.9), (1190.86, 1.95), (
    1191.7, 2.0), (1192.52, 2.05), (1193.32, 2.1), (1194.1, 2.15), (1194.87, 
    2.2), (1195.62, 2.25), (1196.35, 2.3), (1197.07, 2.35), (1197.77, 2.4), (
    1198.47, 2.45), (1199.14, 2.5), (1199.81, 2.55), (1200.46, 2.6), (1201.1, 
    2.65), (1201.73, 2.7), (1202.35, 2.75), (1202.96, 2.8), (1203.55, 2.85), (
    1204.14, 2.9), (1204.72, 2.95), (1205.29, 3.0)))
# Save by nguyenb5 on 2024_06_01-13.59.36; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].PartitionCellByDatumPlane(
    cells=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), datumPlane=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].datums[18])
mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].PartitionCellByDatumPlane(
    cells=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].cells.getSequenceFromMask(
    ('[#2 ]', ), ), datumPlane=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].datums[19])
mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].PartitionCellByDatumPlane(
    cells=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].cells.getSequenceFromMask(
    ('[#4 ]', ), ), datumPlane=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].datums[21])
mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].PartitionCellByDatumPlane(
    cells=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), datumPlane=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].datums[20])
del mdb.models['Model-Full-Half-Thickness'].sections['Section-1']
mdb.models['Model-Full-Half-Thickness'].ConstrainedSketch(name='__edit__', 
    objectToCopy=mdb.models['Model-Full-Half-Thickness'].sketches['Sketch-4'])
del mdb.models['Model-Full-Half-Thickness'].sketches['__edit__']
mdb.models['Model-Full-Half-Thickness'].ConstrainedSketch(name='__edit__', 
    objectToCopy=mdb.models['Model-Full-Half-Thickness'].sketches['shear 0'])
del mdb.models['Model-Full-Half-Thickness'].sketches['__edit__']
mdb.models['Model-Full-Half-Thickness'].ConstrainedSketch(name='__edit__', 
    objectToCopy=mdb.models['Model-Full-Half-Thickness'].sketches['shear3'])
del mdb.models['Model-Full-Half-Thickness'].sketches['__edit__']
mdb.models['Model-Full-Half-Thickness'].HomogeneousSolidSection(material=
    'CP1000_m', name='Section-CP1000-m', thickness=None)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.regenerate()
del mdb.models['Model-Full-Half-Thickness'].rootAssembly.features['SH115_m-1']
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteSets(setNames=(
    'Set-23', 'Set-24', 'Set-25'))
del mdb.models['Model-Full-Half-Thickness'].rootAssembly.features['Datum csys-1']
mdb.models['Model-Full-Half-Thickness'].rootAssembly.DatumCsysByDefault(
    CARTESIAN)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.Instance(dependent=ON, 
    name='SH115_m-1', part=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'])
mdb.models['Model-Full-Half-Thickness'].steps['Step-1'].setValues(maxNumInc=
    200)
mdb.models['Model-Full-Half-Thickness'].steps['Step-1'].setValues(initialInc=
    4.2, maxNumInc=200)
del mdb.models['Model-Full-Half-Thickness'].boundaryConditions['ZSYMM']
del mdb.models['Model-Full-Half-Thickness'].boundaryConditions['top_displacement']
del mdb.models['Model-Full-Half-Thickness'].boundaryConditions['bottom_encastre']
mdb.models['Model-Full-Half-Thickness'].fieldOutputRequests['F-Output-1'].setValues(
    frequency=1, variables=('U', 'RF'))
mdb.models['Model-Full-Half-Thickness'].ConstrainedSketch(name='__edit__', 
    objectToCopy=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].features['Solid extrude-1'].sketch)
mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'], upToFeature=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].features['Solid extrude-1'])
mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].sketchOptions.setValues(
    displayDimensions=OFF)
mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].sketchOptions.setValues(
    gridOrigin=(29.3044986724853, -80.2044948890084))
del mdb.models['Model-Full-Half-Thickness'].sketches['__edit__']
mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].regenerate()
# Save by nguyenb5 on 2024_06_01-14.20.14; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-Full-Half-Thickness'].ConstrainedSketch(name='__edit__', 
    objectToCopy=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].features['Solid extrude-1'].sketch)
mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'], upToFeature=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].features['Solid extrude-1'])
mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].sketchOptions.setValues(
    gridOrigin=(29.3044986724853, -80.2044948890084))
del mdb.models['Model-Full-Half-Thickness'].sketches['__edit__']
mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].regenerate()
mdb.models['Model-Full-Half-Thickness'].ConstrainedSketch(name='__edit__', 
    objectToCopy=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].features['Solid extrude-1'].sketch)
mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'], upToFeature=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].features['Solid extrude-1'])
mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].sketchOptions.setValues(
    gridAuto=OFF, gridSpacing=0.001, sheetAuto=OFF, sheetSize=0.2)
mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].sketchOptions.setValues(
    sheetSize=0.5)
mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'].sketchOptions.setValues(
    gridSpacing=0.0001)
del mdb.models['Model-Full-Half-Thickness'].sketches['__edit__']
mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].regenerate()
del mdb.models['Model-Full-Half-Thickness'].rootAssembly.features['SH115_m-1']
del mdb.models['Model-Full-Half-Thickness'].rootAssembly.features['Datum csys-1']
mdb.models['Model-Full-Half-Thickness'].rootAssembly.DatumCsysByDefault(
    CARTESIAN)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.Instance(dependent=ON, 
    name='SH115_m-1', part=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'])
del mdb.models['Model-Full-Half-Thickness'].rootAssembly.features['SH115_m-1']
del mdb.models['Model-Full-Half-Thickness'].rootAssembly.features['Datum csys-1']
mdb.models['Model-Full-Half-Thickness'].rootAssembly.DatumCsysByDefault(
    CARTESIAN)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.Instance(dependent=OFF, 
    name='SH115_m-1', part=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'])
mdb.models['Model-Full-Half-Thickness'].rootAssembly.translate(instanceList=(
    'SH115_m-1', ), vector=(-29.296999, 80.329495, 0.0))
# Save by nguyenb5 on 2024_06_01-14.36.10; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-Full-Half-Thickness'].rootAssembly.Set(faces=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].faces.getSequenceFromMask(
    ('[#400000 ]', ), ), name='Set-23')
mdb.models['Model-Full-Half-Thickness'].EncastreBC(createStepName='Initial', 
    localCsys=None, name='bottom_encastre', region=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.sets['Set-23'])
mdb.models['Model-Full-Half-Thickness'].rootAssembly.Set(edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].edges.getSequenceFromMask(
    ('[#4000 ]', ), ), faces=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].faces.getSequenceFromMask(
    ('[#41202 #20 ]', ), ), name='Set-24')
mdb.models['Model-Full-Half-Thickness'].ZsymmBC(createStepName='Initial', 
    localCsys=None, name='zsymm', region=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.sets['Set-24'])
mdb.models['Model-Full-Half-Thickness'].rootAssembly.Set(faces=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].faces.getSequenceFromMask(
    ('[#40000000 ]', ), ), name='Set-25')
mdb.models['Model-Full-Half-Thickness'].DisplacementBC(amplitude=UNSET, 
    createStepName='Initial', distributionType=UNIFORM, fieldName='', 
    localCsys=None, name='top_disp', region=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.sets['Set-25'], u1=
    UNSET, u2=SET, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.models['Model-Full-Half-Thickness'].boundaryConditions['bottom_encastre'].suppress(
    )
mdb.models['Model-Full-Half-Thickness'].boundaryConditions['top_disp'].suppress(
    )
mdb.models['Model-Full-Half-Thickness'].boundaryConditions['zsymm'].suppress()
mdb.models['Model-Full-Half-Thickness'].boundaryConditions.delete((
    'bottom_encastre', 'top_disp', 'zsymm'))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.Set(faces=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].faces.getSequenceFromMask(
    ('[#400000 ]', ), ), name='Set-26')
mdb.models['Model-Full-Half-Thickness'].EncastreBC(createStepName='Step-1', 
    localCsys=None, name='bottom_encastre', region=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.sets['Set-26'])
mdb.models['Model-Full-Half-Thickness'].rootAssembly.Set(faces=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].faces.getSequenceFromMask(
    ('[#41202 #20 ]', ), ), name='Set-27')
mdb.models['Model-Full-Half-Thickness'].ZsymmBC(createStepName='Step-1', 
    localCsys=None, name='zsymm', region=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.sets['Set-27'])
mdb.models['Model-Full-Half-Thickness'].rootAssembly.Set(faces=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].faces.getSequenceFromMask(
    ('[#40000000 ]', ), ), name='Set-28')
mdb.models['Model-Full-Half-Thickness'].DisplacementBC(amplitude='Amp-1', 
    createStepName='Step-1', distributionType=UNIFORM, fieldName='', fixed=OFF, 
    localCsys=None, name='top_disp', region=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.sets['Set-28'], u1=
    UNSET, u2=0.0021, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
# Save by nguyenb5 on 2024_06_01-14.41.10; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
# Save by nguyenb5 on 2024_06_01-14.41.28; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].edges.getSequenceFromMask(
    ('[#dfc70000 #80fff18f #c1f8 ]', ), ), size=0.0002)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].edges.getSequenceFromMask(
    ('[#20387efa #7b000e20 #1e07 ]', ), ), size=0.002)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeByNumber(
    constraint=FINER, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].edges.getSequenceFromMask(
    ('[#0:2 #204 ]', ), ), number=2)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeByNumber(
    constraint=FINER, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].edges.getSequenceFromMask(
    ('[#0 #50 ]', ), ), number=4)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeByNumber(
    constraint=FIXED, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].edges.getSequenceFromMask(
    ('[#0 #a00 ]', ), ), number=1)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeByNumber(
    constraint=FIXED, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].edges.getSequenceFromMask(
    ('[#0 #1000000 #1000 ]', ), ), number=4)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.setMeshControls(algorithm=
    ADVANCING_FRONT, regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ), technique=SWEEP)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.setMeshControls(algorithm=
    ADVANCING_FRONT, regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ), technique=SWEEP)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeByNumber(
    constraint=FINER, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].edges.getSequenceFromMask(
    ('[#0 #6000000 ]', ), ), number=2)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].cells.getSequenceFromMask(
    ('[#c ]', ), ), seedConstraintOverride=ON)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeByNumber(
    constraint=FINER, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].edges.getSequenceFromMask(
    ('[#1080 ]', ), ), number=4)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeByNumber(
    constraint=FIXED, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].edges.getSequenceFromMask(
    ('[#200 #0 #1 ]', ), ), number=1)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeByNumber(
    constraint=FIXED, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].edges.getSequenceFromMask(
    ('[#5 ]', ), ), number=2)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].cells.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
# Save by nguyenb5 on 2024_06_01-14.54.37; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.jobs['Job-1']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-Full-Half-Thickness', 
    modelPrint=OFF, multiprocessingMode=DEFAULT, name='Job-1', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, numThreadsPerMpiProcess=
    1, queue=None, resultsFormat=ODB, scratch='', type=ANALYSIS, 
    userSubroutine='', waitHours=0, waitMinutes=0)
mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].Set(cells=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].cells.getSequenceFromMask(
    ('[#1f ]', ), ), name='Set-2')
mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].SectionAssignment(
    offset=0.0, offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].sets['Set-2'], 
    sectionName='Section-CP1000-m', thicknessAssignment=FROM_SECTION)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.regenerate()
mdb.models['Model-Full-Half-Thickness'].parts['SH115_mm'].sectionAssignments[0].setValues(
    sectionName='Section-CP1000-m')
del mdb.models['Model-Full-Half-Thickness'].parts['SH115_mm'].sectionAssignments[0]
mdb.models['Model-Full-Half-Thickness'].HomogeneousSolidSection(material=
    'CP1000_mm', name='Section-CP1000-mm', thickness=None)
del mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].sectionAssignments[0]
# Save by nguyenb5 on 2024_06_01-14.57.01; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'L23-0203', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '116 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\LocalUserData\\User-data\\nguyenb5\\CP1000 processed\\CP1000 SH\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'L23-0203', 'handle': 3508, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 420.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16017.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 91.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Sat Jun  1 14:57:28 2024', 
    'jobName': 'Job-1'})
# Save by nguyenb5 on 2024_06_01-15.10.17; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-Full-Half-Thickness'].rootAssembly.Set(name='top_set', nodes=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].nodes.getSequenceFromMask(
    mask=('[#6c #0 #10 #0:2 #100000 #0 #fc07f000', ' #1 #0:27 #f8000000 #3 ]', 
    ), ))
# Save by nguyenb5 on 2024_06_01-15.15.32; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].DatumPlaneByOffset(
    flip=SIDE2, offset=0.0225, plane=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].faces[30])
mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].DatumPlaneByOffset(
    flip=SIDE2, offset=0.2275, plane=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].faces[30])
mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].PartitionCellByDatumPlane(
    cells=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].cells.getSequenceFromMask(
    ('[#8 ]', ), ), datumPlane=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].datums[27])
mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].PartitionCellByDatumPlane(
    cells=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].cells.getSequenceFromMask(
    ('[#2 ]', ), ), datumPlane=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].datums[28])
mdb.models['Model-Full-Half-Thickness'].rootAssembly.regenerate()
mdb.models['Model-Full-Half-Thickness'].boundaryConditions.delete(('zsymm', 
    'top_disp', 'bottom_encastre'))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.Set(faces=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].faces.getSequenceFromMask(
    ('[#0 #1 ]', ), ), name='Set-42')
mdb.models['Model-Full-Half-Thickness'].EncastreBC(createStepName='Step-1', 
    localCsys=None, name='bottom_encastre', region=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.sets['Set-42'])
mdb.models['Model-Full-Half-Thickness'].rootAssembly.Set(faces=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].faces.getSequenceFromMask(
    ('[#10480850 #8000 ]', ), ), name='Set-43')
mdb.models['Model-Full-Half-Thickness'].ZsymmBC(createStepName='Step-1', 
    localCsys=None, name='zsymm', region=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.sets['Set-43'])
mdb.models['Model-Full-Half-Thickness'].rootAssembly.Set(faces=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].faces.getSequenceFromMask(
    ('[#0 #8000 ]', ), ), name='Set-44')
mdb.models['Model-Full-Half-Thickness'].DisplacementBC(amplitude=UNSET, 
    createStepName='Step-1', distributionType=UNIFORM, fieldName='', fixed=OFF, 
    localCsys=None, name='top_part_constraint', region=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.sets['Set-44'], u1=0.0
    , u2=UNSET, u3=0.0, ur1=0.0, ur2=0.0, ur3=0.0)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.Set(faces=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].faces.getSequenceFromMask(
    ('[#0 #100 ]', ), ), name='Set-45')
mdb.models['Model-Full-Half-Thickness'].DisplacementBC(amplitude=UNSET, 
    createStepName='Step-1', distributionType=UNIFORM, fieldName='', fixed=OFF, 
    localCsys=None, name='top_surface_disp', region=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.sets['Set-45'], u1=
    UNSET, u2=0.0021, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
del mdb.models['Model-Full-Half-Thickness'].boundaryConditions['bottom_encastre']
mdb.models['Model-Full-Half-Thickness'].rootAssembly.Set(cells=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].edges.getSequenceFromMask(
    ('[#c0000060 #8 ]', ), ), faces=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].faces.getSequenceFromMask(
    ('[#2802 #1 ]', ), ), name='Set-46', vertices=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].vertices.getSequenceFromMask(
    ('[#200020 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].EncastreBC(createStepName='Step-1', 
    localCsys=None, name='bottom_part_encastre', region=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.sets['Set-46'])
mdb.models['Model-Full-Half-Thickness'].rootAssembly.Set(faces=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].faces.getSequenceFromMask(
    ('[#10080850 ]', ), ), name='Set-47')
mdb.models['Model-Full-Half-Thickness'].DisplacementBC(amplitude=UNSET, 
    createStepName='Step-1', distributionType=UNIFORM, fieldName='', fixed=OFF, 
    localCsys=None, name='except_top_part_constraint', region=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.sets['Set-47'], u1=
    UNSET, u2=UNSET, u3=0.0, ur1=0.0, ur2=0.0, ur3=UNSET)
# Save by nguyenb5 on 2024_06_01-17.18.11; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].edges.getSequenceFromMask(
    ('[#cdb696fa #800 #8090000 ]', ), ), size=0.002)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeByNumber(
    constraint=FINER, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].edges.getSequenceFromMask(
    ('[#805 #8 ]', ), ), number=2)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeByNumber(
    constraint=FINER, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].edges.getSequenceFromMask(
    ('[#414000 #0 #100000 ]', ), ), number=2)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].cells.getSequenceFromMask(
    ('[#20 ]', ), ))
# Save by nguyenb5 on 2024_06_01-17.21.15; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
# Save by nguyenb5 on 2024_06_01-17.21.21; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'L23-0203', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '116 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof 4 at 6673 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof4.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof 5 at 6673 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof5.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof 6 at 108 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof6.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\LocalUserData\\User-data\\nguyenb5\\CP1000 processed\\CP1000 SH115\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'L23-0203', 'handle': 12172, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 422.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16017.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 92.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Sat Jun  1 17:21:49 2024', 
    'jobName': 'Job-1'})
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].cells.getSequenceFromMask(
    ('[#58 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].edges.getSequenceFromMask(
    ('[#0 #63f7f700 #e7e21ffe ]', ), ), size=0.00015)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].cells.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].cells.getSequenceFromMask(
    ('[#40 ]', ), ))
# Save by nguyenb5 on 2024_06_01-17.26.24; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
# Save by nguyenb5 on 2024_06_01-17.31.16; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-Full-Half-Thickness'].rootAssembly.Set(name='top_nodes', 
    nodes=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].nodes.getSequenceFromMask(
    mask=('[#0:50 #1207f8 #980001f0 #6001003f ]', ), ))
mdb.models['Model-Full-Half-Thickness'].steps['Step-1'].setValues(initialInc=
    4.0, timePeriod=800.0)
mdb.models['Model-Full-Half-Thickness'].boundaryConditions['top_surface_disp'].setValues(
    u2=0.002)
# Save by nguyenb5 on 2024_06_01-17.49.07; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
# Save by nguyenb5 on 2024_06_01-17.49.56; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
# Save by nguyenb5 on 2024_06_01-17.50.33; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
# Save by nguyenb5 on 2024_06_01-18.00.37; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].cells.getSequenceFromMask(
    ('[#58 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].edges.getSequenceFromMask(
    ('[#0 #23f7f500 #e7e21ffe ]', ), ), size=0.0001)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'], 
    ))
# Save by nguyenb5 on 2024_06_01-18.17.48; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-Full-Half-Thickness'].steps['Step-1'].setValues(initialInc=
    2.0, maxNumInc=400)
mdb.models['Model-Full-Half-Thickness'].fieldOutputRequests['F-Output-1'].setValues(
    frequency=2)
# Save by nguyenb5 on 2024_06_01-18.18.43; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].cells.getSequenceFromMask(
    ('[#58 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].edges.getSequenceFromMask(
    ('[#0 #63f7f700 #e7e21ffe ]', ), ), size=0.00012)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'], 
    ))
# Save by nguyenb5 on 2024_06_01-18.20.22; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
# Save by nguyenb5 on 2024_06_01-18.22.51; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-Full-Half-Thickness'].rootAssembly.Set(name='top_nodes', 
    nodes=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].nodes.getSequenceFromMask(
    mask=('[#6c00 #0:3 #3000 #c07f0030 #1f #0:68 #fff00000', ' #3 ]', ), ))
# Save by nguyenb5 on 2024_06_01-20.11.17; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].setValues(numCpus=8, numDomains=8, numThreadsPerMpiProcess=1)
# Save by nguyenb5 on 2024_06_01-20.11.44; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'L23-0203', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '56 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof 4 at 15749 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof4.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof 5 at 15749 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof5.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof 6 at 108 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof6.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\LocalUserData\\User-data\\nguyenb5\\CP1000 processed\\CP1000 SH115\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'L23-0203', 'handle': 7252, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 1076.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16017.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 159.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 2.0, 'increment': 1, 'stepTime': 2.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 4.0, 'attempts': 1, 
    'timeIncrement': 2.0, 'increment': 2, 'stepTime': 4.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 6.0, 'attempts': 1, 
    'timeIncrement': 2.0, 'increment': 3, 'stepTime': 6.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 8.0, 'attempts': 1, 
    'timeIncrement': 2.0, 'increment': 4, 'stepTime': 8.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 10.0, 'attempts': 1, 
    'timeIncrement': 2.0, 'increment': 5, 'stepTime': 10.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 12.0, 'attempts': 1, 
    'timeIncrement': 2.0, 'increment': 6, 'stepTime': 12.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 14.0, 'attempts': 1, 
    'timeIncrement': 2.0, 'increment': 7, 'stepTime': 14.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 16.0, 'attempts': 1, 
    'timeIncrement': 2.0, 'increment': 8, 'stepTime': 16.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 18.0, 'attempts': 1, 
    'timeIncrement': 2.0, 'increment': 9, 'stepTime': 18.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 20.0, 'attempts': 1, 
    'timeIncrement': 2.0, 'increment': 10, 'stepTime': 20.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 22.0, 'attempts': 1, 
    'timeIncrement': 2.0, 'increment': 11, 'stepTime': 22.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 24.0, 'attempts': 1, 
    'timeIncrement': 2.0, 'increment': 12, 'stepTime': 24.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 26.0, 'attempts': 1, 
    'timeIncrement': 2.0, 'increment': 13, 'stepTime': 26.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 28.0, 'attempts': 1, 
    'timeIncrement': 2.0, 'increment': 14, 'stepTime': 28.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 30.0, 'attempts': 1, 
    'timeIncrement': 2.0, 'increment': 15, 'stepTime': 30.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 32.0, 'attempts': 1, 
    'timeIncrement': 2.0, 'increment': 16, 'stepTime': 32.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 34.0, 'attempts': 1, 
    'timeIncrement': 2.0, 'increment': 17, 'stepTime': 34.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 36.0, 'attempts': 1, 
    'timeIncrement': 2.0, 'increment': 18, 'stepTime': 36.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 38.0, 'attempts': 1, 
    'timeIncrement': 2.0, 'increment': 19, 'stepTime': 38.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 40.0, 'attempts': 1, 
    'timeIncrement': 2.0, 'increment': 20, 'stepTime': 40.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 42.0, 'attempts': 1, 
    'timeIncrement': 2.0, 'increment': 21, 'stepTime': 42.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 44.0, 'attempts': 1, 
    'timeIncrement': 2.0, 'increment': 22, 'stepTime': 44.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 46.0, 'attempts': 1, 
    'timeIncrement': 2.0, 'increment': 23, 'stepTime': 46.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 48.0, 'attempts': 1, 
    'timeIncrement': 2.0, 'increment': 24, 'stepTime': 48.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 50.0, 'attempts': 1, 
    'timeIncrement': 2.0, 'increment': 25, 'stepTime': 50.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 52.0, 'attempts': 1, 
    'timeIncrement': 2.0, 'increment': 26, 'stepTime': 52.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 54.0, 'attempts': 1, 
    'timeIncrement': 2.0, 'increment': 27, 'stepTime': 54.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 56.0, 'attempts': 1, 
    'timeIncrement': 2.0, 'increment': 28, 'stepTime': 56.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 58.0, 'attempts': 1, 
    'timeIncrement': 2.0, 'increment': 29, 'stepTime': 58.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-1']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models.changeKey(fromName='SHFull_Fullfix_sv05_reference_Wu_Jiao_Jiao', 
    toName='reference_Wu_Jiao_Jiao')
mdb.models['Model-Full-Half-Thickness'].rootAssembly.setElementType(elemTypes=(
    ElemType(elemCode=C3D8, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6, elemLibrary=STANDARD), 
    ElemType(elemCode=C3D4, elemLibrary=STANDARD)), regions=(
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].cells.getSequenceFromMask(
    ('[#7f ]', ), ), ))
mdb.models['Model-Full-Half-Thickness'].materials['CP1000_m'].density.setValues(
    table=((7890.0, ), ))
# Save by nguyenb5 on 2024_06_01-21.00.40; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-Full-Half-Thickness'].amplitudes['Amp-1'].setValues(data=((
    0.0, 0.0), (800.0, 1.0)), smooth=SOLVER_DEFAULT, timeSpan=STEP)
# Save by nguyenb5 on 2024_06_01-21.06.19; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-Full-Half-Thickness'].boundaryConditions['top_surface_disp'].setValues(
    u2=0.0025)
mdb.models['Model-Full-Half-Thickness'].amplitudes['Amp-1'].setValues(data=((
    0.0, 0.0), (1000.0, 1.0)), smooth=SOLVER_DEFAULT, timeSpan=STEP)
mdb.models['Model-Full-Half-Thickness'].steps['Step-1'].setValues(initialInc=
    2.5, maxNumInc=400, timePeriod=1000.0)
# Save by nguyenb5 on 2024_06_01-21.14.03; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
# Save by nguyenb5 on 2024_06_01-21.14.47; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
# Save by nguyenb5 on 2024_06_01-21.28.35; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].cells.getSequenceFromMask(
    ('[#58 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].edges.getSequenceFromMask(
    ('[#0 #63f7f700 #e7e21ffe ]', ), ), size=0.0001)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'], 
    ))
# Save by nguyenb5 on 2024_06_01-21.52.03; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-Full-Half-Thickness'].steps['Step-1'].setValues(initialInc=
    0.5, maxNumInc=2000)
# Save by nguyenb5 on 2024_06_01-21.53.41; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-Full-Half-Thickness'].rootAssembly.Set(name='top_nodes', 
    nodes=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].nodes.getSequenceFromMask(
    mask=('[#6c00 #0:3 #800 #fc07f002 #1 #0:76 #fe00000 ]', ), ))
# Save by nguyenb5 on 2024_06_01-21.55.00; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
# Save by nguyenb5 on 2024_06_01-21.56.13; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].features['Datum plane-5'].setValues(
    offset=0.025)
mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].regenerate()
mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].regenerate()
mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].features['Datum plane-6'].setValues(
    offset=0.225)
mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].regenerate()
mdb.models['Model-Full-Half-Thickness'].parts['SH115_m'].regenerate()
# Save by nguyenb5 on 2024_06_03-14.25.27; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-Full-Half-Thickness'].rootAssembly.regenerate()
# Save by nguyenb5 on 2024_06_03-14.30.40; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
# Save by nguyenb5 on 2024_06_03-14.31.56; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['Model-Full-Half-Thickness'].boundaryConditions['top_part_constraint']
mdb.models['Model-Full-Half-Thickness'].rootAssembly.Set(cells=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ), edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].edges.getSequenceFromMask(
    ('[#ce00000 #0 #8180000 ]', ), ), faces=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].faces.getSequenceFromMask(
    ('[#20000280 #8100 ]', ), ), name='Set-57', vertices=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].vertices.getSequenceFromMask(
    ('[#b0000 #800000 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].DisplacementBC(amplitude=UNSET, 
    createStepName='Step-1', distributionType=UNIFORM, fieldName='', fixed=OFF, 
    localCsys=None, name='top_part_constraint', region=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.sets['Set-57'], u1=0.0
    , u2=UNSET, u3=0.0, ur1=0.0, ur2=0.0, ur3=0.0)
# Save by nguyenb5 on 2024_06_03-14.38.55; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'], 
    ))
# Save by nguyenb5 on 2024_06_03-14.40.00; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-Full-Half-Thickness'].rootAssembly.Set(name='top_nodes', 
    nodes=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115_m-1'].nodes.getSequenceFromMask(
    mask=('[#6c00 #0:3 #200000 #f0008000 #1fc07 #0:78 #e0000000', ' #f ]', ), 
    ))
# Save by nguyenb5 on 2024_06_03-14.40.50; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['reference_Wu_Jiao_Jiao'].amplitudes['AMP-1'].setValues(data=((0.0, 
    0.0), (1.0, 1.0)), smooth=SOLVER_DEFAULT, timeSpan=STEP)
# Save by nguyenb5 on 2024_06_04-13.19.39; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
# Save by nguyenb5 on 2024_06_04-13.19.58; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-Full-Half-Thickness'].parts.changeKey(fromName='SH115_m', 
    toName='SH115-m')
mdb.models['Model-Full-Half-Thickness'].parts.changeKey(fromName='SH115_mm', 
    toName='SH115-mm')
mdb.models['Model-Full-Half-Thickness'].materials.changeKey(fromName='CP1000_m'
    , toName='CP1000-m')
mdb.models['Model-Full-Half-Thickness'].materials.changeKey(fromName=
    'CP1000_mm', toName='CP1000-mm')
mdb.models['Model-Full-Half-Thickness'].sections['Section-CP1000-m'].setValues(
    material='CP1000-m', thickness=None)
mdb.models['Model-Full-Half-Thickness'].sections['Section-CP1000-mm'].setValues(
    material='CP1000-mm', thickness=None)
# Save by nguyenb5 on 2024_06_04-14.24.09; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-Full-Half-Thickness'].rootAssembly.regenerate()
mdb.models['Model-Full-Half-Thickness'].rootAssembly.features.changeKey(
    fromName='SH115_m-1', toName='SH115-m-1')
del mdb.models['Model-Full-Half-Thickness'].rootAssembly.sets['top_set']
# Save by nguyenb5 on 2024_06_04-14.25.28; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-Full-Half-Thickness'].boundaryConditions.changeKey(fromName=
    'top_surface_disp', toName='top-surface-disp')
mdb.models['Model-Full-Half-Thickness'].boundaryConditions.changeKey(fromName=
    'top_part_constraint', toName='top-part-constraint')
mdb.models['Model-Full-Half-Thickness'].boundaryConditions.changeKey(fromName=
    'bottom_part_encastre', toName='bottom-part-encastre')
mdb.models['Model-Full-Half-Thickness'].boundaryConditions.changeKey(fromName=
    'except_top_part_constraint', toName='except-top-part-constraint')
# Save by nguyenb5 on 2024_06_04-14.26.06; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models.changeKey(fromName='reference_Wu_Jiao_Jiao', toName=
    'reference-Wu-Jiao-Jiao')
# Save by nguyenb5 on 2024_06_04-14.26.18; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
# Save by nguyenb5 on 2024_06_04-14.28.10; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-Full-Half-Thickness'].rootAssembly.translate(instanceList=(
    'SH115-m-1', ), vector=(-0.0075, -0.125, 0.0))
# Save by nguyenb5 on 2024_06_04-20.31.50; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-Full-Half-Thickness'].rootAssembly.Set(faces=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].faces.getSequenceFromMask(
    ('[#10080050 ]', ), ), name='Set-58')
mdb.models['Model-Full-Half-Thickness'].boundaryConditions['except-top-part-constraint'].setValues(
    region=mdb.models['Model-Full-Half-Thickness'].rootAssembly.sets['Set-58'])
mdb.models['Model-Full-Half-Thickness'].rootAssembly.Set(faces=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].faces.getSequenceFromMask(
    ('[#10480050 ]', ), ), name='Set-59')
mdb.models['Model-Full-Half-Thickness'].boundaryConditions['except-top-part-constraint'].setValues(
    region=mdb.models['Model-Full-Half-Thickness'].rootAssembly.sets['Set-59'])
mdb.models['Model-Full-Half-Thickness'].boundaryConditions['except-top-part-constraint'].suppress(
    )
# Save by nguyenb5 on 2024_06_04-20.35.27; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#58 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].ConstrainedSketch(gridSpacing=0.001, 
    name='__profile__', sheetSize=0.051, transform=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.MakeSketchTransform(
    sketchPlane=mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].faces[23], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges[71], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 0.0005)))
mdb.models['Model-Full-Half-Thickness'].sketches['__profile__'].sketchOptions.setValues(
    decimalPlaces=3)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['Model-Full-Half-Thickness'].sketches['__profile__'])
del mdb.models['Model-Full-Half-Thickness'].sketches['__profile__']
mdb.models['Model-Full-Half-Thickness'].ConstrainedSketch(gridSpacing=0.001, 
    name='__profile__', sheetSize=0.051, transform=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.MakeSketchTransform(
    sketchPlane=mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].faces[23], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges[42], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 0.0005)))
mdb.models['Model-Full-Half-Thickness'].sketches['__profile__'].sketchOptions.setValues(
    decimalPlaces=3)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['Model-Full-Half-Thickness'].sketches['__profile__'])
del mdb.models['Model-Full-Half-Thickness'].sketches['__profile__']
mdb.models['Model-Full-Half-Thickness'].ConstrainedSketch(gridSpacing=0.001, 
    name='__profile__', sheetSize=0.051, transform=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].faces[23], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].edges[42], 
    sketchOrientation=RIGHT, origin=(29.304499, -80.204495, 0.0005)))
mdb.models['Model-Full-Half-Thickness'].sketches['__profile__'].sketchOptions.setValues(
    decimalPlaces=3)
mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['Model-Full-Half-Thickness'].sketches['__profile__'])
mdb.models['Model-Full-Half-Thickness'].sketches['__profile__'].Arc3Points(
    point1=(0.00249967249481386, 0.00450011098629943), point2=(
    0.00149967248001204, -0.00249988901158815), point3=(0.003, 0.001))
mdb.models['Model-Full-Half-Thickness'].sketches['__profile__'].Arc3Points(
    point1=(-0.00250032752421703, -0.00449988900313514), point2=(
    -0.0015003275094152, 0.00250011099475955), point3=(-0.003, -0.001))
mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].PartitionFaceBySketch(
    faces=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].faces.getSequenceFromMask(
    ('[#800000 ]', ), ), sketch=
    mdb.models['Model-Full-Half-Thickness'].sketches['__profile__'], 
    sketchUpEdge=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].edges[42])
del mdb.models['Model-Full-Half-Thickness'].sketches['__profile__']
mdb.models['Model-Full-Half-Thickness'].rootAssembly.regenerate()
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'], 
    ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#18 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#fc7 #3e000000 #1e80583e #3 ]', ), ), size=0.0001)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'], 
    ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#1 ]', ), ), size=0.00015)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#80 ]', ), ), size=0.00015)
mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].PartitionCellByExtendFace(
    cells=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].cells.getSequenceFromMask(
    ('[#40 ]', ), ), extendFace=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].faces[1])
#* Feature creation failed.
mdb.models['Model-Full-Half-Thickness'].ConstrainedSketch(name='__edit__', 
    objectToCopy=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].features['Partition face-1'].sketch)
mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'], upToFeature=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].features['Partition face-1'])
del mdb.models['Model-Full-Half-Thickness'].sketches['__edit__']
del mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].features['Partition face-1']
mdb.models['Model-Full-Half-Thickness'].ConstrainedSketch(gridSpacing=0.001, 
    name='__profile__', sheetSize=0.051, transform=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].faces[23], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].edges[42], 
    sketchOrientation=RIGHT, origin=(29.304499, -80.204495, 0.0005)))
mdb.models['Model-Full-Half-Thickness'].sketches['__profile__'].sketchOptions.setValues(
    decimalPlaces=3)
mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['Model-Full-Half-Thickness'].sketches['__profile__'])
mdb.models['Model-Full-Half-Thickness'].sketches['__profile__'].Arc3Points(
    point1=(0.00249967249481386, 0.00450011098629943), point2=(
    0.00149967248001204, -0.00249988901158815), point3=(0.003, 0.0))
mdb.models['Model-Full-Half-Thickness'].sketches['__profile__'].Arc3Points(
    point1=(-0.0015003275094152, 0.00250011099475955), point2=(
    -0.00250032752421703, -0.00449988900313514), point3=(-0.003, 0.0))
mdb.models['Model-Full-Half-Thickness'].sketches['__profile__'].Arc3Points(
    point1=(-0.00250032752421703, -0.00449988900313514), point2=(
    -0.000500327519983301, -0.00249988900735332), point3=(0.00149967248001204, 
    -0.00249988901158815))
mdb.models['Model-Full-Half-Thickness'].sketches['__profile__'].autoTrimCurve(
    curve1=
    mdb.models['Model-Full-Half-Thickness'].sketches['__profile__'].geometry[44]
    , point1=(-0.00246652931122782, -0.00678582274869655))
mdb.models['Model-Full-Half-Thickness'].sketches['__profile__'].autoTrimCurve(
    curve1=
    mdb.models['Model-Full-Half-Thickness'].sketches['__profile__'].geometry[45]
    , point1=(-0.00246652930727365, -0.0049166210885403))
mdb.models['Model-Full-Half-Thickness'].sketches['__profile__'].autoTrimCurve(
    curve1=
    mdb.models['Model-Full-Half-Thickness'].sketches['__profile__'].geometry[46]
    , point1=(0.000323921747966693, -0.00234551513740655))
mdb.models['Model-Full-Half-Thickness'].sketches['__profile__'].ArcByStartEndTangent(
    entity=
    mdb.models['Model-Full-Half-Thickness'].sketches['__profile__'].geometry[32]
    , point1=(-0.00250032752421703, -0.00449988900313514), point2=(
    -0.000500327519983301, -0.00249988900735332))
mdb.models['Model-Full-Half-Thickness'].sketches['__profile__'].autoTrimCurve(
    curve1=
    mdb.models['Model-Full-Half-Thickness'].sketches['__profile__'].geometry[47]
    , point1=(-0.00137171118326407, -0.000766230465856665))
mdb.models['Model-Full-Half-Thickness'].sketches['__profile__'].autoTrimCurve(
    curve1=
    mdb.models['Model-Full-Half-Thickness'].sketches['__profile__'].geometry[48]
    , point1=(-0.00388559668242294, -0.00129265868319806))
del mdb.models['Model-Full-Half-Thickness'].sketches['__profile__']
mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].PartitionCellByExtendFace(
    cells=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].cells.getSequenceFromMask(
    ('[#40 ]', ), ), extendFace=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].faces[23])
#* Feature creation failed.
mdb.models['Model-Full-Half-Thickness'].rootAssembly.regenerate()
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'], 
    ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#58 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#0 #63f7f700 #e7e21ffe ]', ), ), size=0.00015)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#0 #63f7f700 #e7e21ffe ]', ), ), size=0.000125)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#0 #63f7f700 #e7e21ffe ]', ), ), size=0.00012)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'], 
    ))
mdb.models['Model-Full-Half-Thickness'].steps['Step-1'].setValues(initialInc=
    0.2, maxNumInc=5000, noStop=OFF)
mdb.models['Model-Full-Half-Thickness'].boundaryConditions['top-surface-disp'].setValues(
    amplitude='Amp-1')
# Save by nguyenb5 on 2024_06_04-20.57.20; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'L23-0203', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '120 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof 4 at 504 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof4.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof 5 at 504 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof5.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof 6 at 504 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof6.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\LocalUserData\\User-data\\nguyenb5\\CP1000 processed\\CP1000 SH115\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'L23-0203', 'handle': 9576, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 920.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16017.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 179.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Tue Jun  4 20:57:52 2024', 
    'jobName': 'Job-1'})
mdb.models['Model-Full-Half-Thickness'].steps['Step-1'].setValues(initialInc=
    0.25, maxNumInc=4000)
mdb.models['Model-Full-Half-Thickness'].fieldOutputRequests['F-Output-1'].setValues(
    frequency=20)
# Save by nguyenb5 on 2024_06_04-21.00.51; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
# Save by nguyenb5 on 2024_06_04-21.00.59; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
# Save by nguyenb5 on 2024_06_04-21.01.49; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-Full-Half-Thickness'].steps['Step-1'].setValues(initialInc=
    0.5, maxNumInc=2000)
# Save by nguyenb5 on 2024_06_04-21.18.18; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['Model-Full-Half-Thickness'].boundaryConditions['bottom-part-encastre']
mdb.models['Model-Full-Half-Thickness'].rootAssembly.Set(cells=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#c0000c70 #8 ]', ), ), faces=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].faces.getSequenceFromMask(
    ('[#280a #1 ]', ), ), name='Set-65', vertices=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].vertices.getSequenceFromMask(
    ('[#200130 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].EncastreBC(createStepName='Initial', 
    localCsys=None, name='vbottom-part-encastre', region=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.sets['Set-65'])
mdb.models['Model-Full-Half-Thickness'].boundaryConditions.changeKey(fromName=
    'vbottom-part-encastre', toName='bottom-part-encastre')
mdb.models['Model-Full-Half-Thickness'].boundaryConditions['bottom-part-encastre'].deactivate(
    'Step-1')
del mdb.models['Model-Full-Half-Thickness'].boundaryConditions['bottom-part-encastre']
del mdb.models['Model-Full-Half-Thickness'].boundaryConditions['except-top-part-constraint']
del mdb.models['Model-Full-Half-Thickness'].boundaryConditions['zsymm']
mdb.models['Model-Full-Half-Thickness'].rootAssembly.Set(edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#80000 ]', ), ), faces=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].faces.getSequenceFromMask(
    ('[#10480850 #8000 ]', ), ), name='Set-66')
mdb.models['Model-Full-Half-Thickness'].EncastreBC(createStepName='Initial', 
    localCsys=None, name='zsymm', region=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.sets['Set-66'])
mdb.models['Model-Full-Half-Thickness'].rootAssembly.Set(cells=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#c0000c70 #8 ]', ), ), faces=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].faces.getSequenceFromMask(
    ('[#280a #1 ]', ), ), name='Set-67', vertices=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].vertices.getSequenceFromMask(
    ('[#200130 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].EncastreBC(createStepName='Initial', 
    localCsys=None, name='bottom-part-encastre', region=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.sets['Set-67'])
mdb.models['Model-Full-Half-Thickness'].rootAssembly.Set(name='top_nodes', 
    nodes=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].nodes.getSequenceFromMask(
    mask=('[#6c00 #0:3 #c00000 #c0000 #1fc07f #0:71 #3fff ]', ), ))
mdb.models['Model-Full-Half-Thickness'].fieldOutputRequests['F-Output-1'].setValues(
    frequency=10)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#58 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#0 #23f7f700 #e7e21ffe ]', ), ), size=0.0002)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'], 
    ))
# Save by nguyenb5 on 2024_06_04-21.25.31; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
# Save by nguyenb5 on 2024_06_04-21.26.01; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'L23-0203', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '98 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof 4 at 378 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof4.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof 5 at 378 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof5.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof 6 at 378 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof6.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '9 nodes have dof on which velocity/displacement/acceleration/base motion etc. constraints are specified simultaneously. The nodes have been identified in node set ErrNodeBCRedundantDof.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\LocalUserData\\User-data\\nguyenb5\\CP1000 processed\\CP1000 SH115\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-Full-Half-Thickness'].boundaryConditions['zsymm'].setValues(
    typeName=ZSYMM)
# Save by nguyenb5 on 2024_06_04-21.27.29; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'L23-0203', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '98 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof 4 at 378 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof4.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof 5 at 378 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof5.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof 6 at 378 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof6.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\LocalUserData\\User-data\\nguyenb5\\CP1000 processed\\CP1000 SH115\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'L23-0203', 'handle': 7748, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 225.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16017.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 61.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Tue Jun  4 21:27:53 2024', 
    'jobName': 'Job-1'})
mdb.models['Model-Full-Half-Thickness'].rootAssembly.Set(name='top_nodes', 
    nodes=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].nodes.getSequenceFromMask(
    mask=('[#6c00 #0:3 #200000 #f0008000 #1fc07 #0:51 #e0000000', ' #f ]', ), 
    ))
# Save by nguyenb5 on 2024_06_04-21.28.35; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-Full-Half-Thickness'].steps['Step-1'].setValues(maxInc=0.5, 
    timeIncrementationMethod=AUTOMATIC)
mdb.models['Model-Full-Half-Thickness'].steps['Step-1'].setValues(noStop=OFF, 
    timeIncrementationMethod=FIXED)
# Save by nguyenb5 on 2024_06_05-15.13.15; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#58 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#0 #77f7f782 #e7e21ffe ]', ), ), size=0.0001)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'], 
    ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#40 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#0 #23f7f500 #1ffe ]', ), ), size=0.00015)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'], 
    ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#40 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#0 #23f7f500 #1ffe ]', ), ), size=0.00012)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'], 
    ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#40 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#0 #23f7f500 #1ffe ]', ), ), size=0.00018)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'], 
    ))
# Save by nguyenb5 on 2024_06_05-21.59.25; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
# Save by nguyenb5 on 2024_06_05-22.01.30; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-Full-Half-Thickness'].steps['Step-1'].setValues(maxInc=0.5, 
    maxNumInc=100000, timeIncrementationMethod=AUTOMATIC)
mdb.models['Model-Full-Half-Thickness'].fieldOutputRequests['F-Output-1'].setValues(
    numIntervals=200)
# Save by nguyenb5 on 2024_06_05-22.03.14; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'L23-0203', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '160 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT AT EXACT, PREDEFINED TIME POINTS WAS REQUESTED IN THIS STEP. IN ORDER TO WRITE OUTPUT AT EXACT TIME POINTS SPECIFIED, Abaqus MIGHT USE TIME INCREMENTS SMALLER THAN THE MINIMUM TIME INCREMENT ALLOWED IN THE STEP. IN ADDITION, THE NUMBER OF INCREMENTS REQUIRED TO COMPLETE THE STEP WILL IN GENERAL INCREASE.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof 4 at 378 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof4.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof 5 at 378 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof5.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof 6 at 378 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof6.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\LocalUserData\\User-data\\nguyenb5\\CP1000 processed\\CP1000 SH115\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'L23-0203', 'handle': 24016, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 515.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16017.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 107.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Wed Jun  5 22:03:43 2024', 
    'jobName': 'Job-1'})
# Save by nguyenb5 on 2024_06_05-22.15.37; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.ModelFromInputFile(inputFileName=
    'C:/LocalUserData/User-data/nguyenb5/CP1000 processed/CP1000 SH115/geometry.inp'
    , name='geometry')
mdb.models['Model-Full-Half-Thickness'].ConstrainedSketch(gridSpacing=0.001, 
    name='__profile__', sheetSize=0.051, transform=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].faces[23], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].edges[42], 
    sketchOrientation=RIGHT, origin=(29.304499, -80.204495, 0.0005)))
mdb.models['Model-Full-Half-Thickness'].sketches['__profile__'].sketchOptions.setValues(
    decimalPlaces=3)
mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['Model-Full-Half-Thickness'].sketches['__profile__'])
mdb.models['Model-Full-Half-Thickness'].sketches['__profile__'].Arc3Points(
    point1=(0.00249967249481386, 0.00450011098629943), point2=(
    0.00149967248001204, -0.00249988901158815), point3=(0.003, 0.0))
mdb.models['Model-Full-Half-Thickness'].sketches['__profile__'].Arc3Points(
    point1=(-0.00250032752421703, -0.00449988900313514), point2=(
    -0.0015003275094152, 0.00250011099475955), point3=(-0.003, 0.0))
mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].PartitionFaceBySketch(
    faces=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].faces.getSequenceFromMask(
    ('[#800000 ]', ), ), sketch=
    mdb.models['Model-Full-Half-Thickness'].sketches['__profile__'], 
    sketchUpEdge=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].edges[42])
del mdb.models['Model-Full-Half-Thickness'].sketches['__profile__']
mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].PartitionFaceByProjectingEdges(
    edges=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].edges.getSequenceFromMask(
    ('[#81 ]', ), ), extendEdges=False, faces=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].faces.getSequenceFromMask(
    ('[#2 ]', ), ))
#* Feature creation failed.
mdb.models['Model-Full-Half-Thickness'].rootAssembly.regenerate()
mdb.models['Model-Full-Half-Thickness'].ConstrainedSketch(name='__edit__', 
    objectToCopy=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].features['Partition face-1'].sketch)
mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['Model-Full-Half-Thickness'].sketches['__edit__'], upToFeature=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].features['Partition face-1'])
del mdb.models['Model-Full-Half-Thickness'].sketches['__edit__']
mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].PartitionFaceByProjectingEdges(
    edges=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].edges.getSequenceFromMask(
    ('[#80 ]', ), ), extendEdges=False, faces=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].faces.getSequenceFromMask(
    ('[#2 ]', ), ))
#* Feature creation failed.
mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].PartitionFaceByExtendFace(
    extendFace=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].faces[1], faces=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].faces.getSequenceFromMask(
    ('[#2 ]', ), ))
#* Feature creation failed.
mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].features['Partition face-1'].suppress(
    )
mdb.models['Model-Full-Half-Thickness'].ConstrainedSketch(gridSpacing=0.001, 
    name='__profile__', sheetSize=0.051, transform=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].faces[23], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].edges[42], 
    sketchOrientation=RIGHT, origin=(29.304499, -80.204495, 0.0005)))
mdb.models['Model-Full-Half-Thickness'].sketches['__profile__'].sketchOptions.setValues(
    decimalPlaces=3)
mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['Model-Full-Half-Thickness'].sketches['__profile__'])
mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].features['Partition face-1'].resume(
    )
del mdb.models['Model-Full-Half-Thickness'].sketches['__profile__']
mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].PartitionCellByExtrudeEdge(
    cells=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].cells.getSequenceFromMask(
    ('[#40 ]', ), ), edges=(
    mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].edges[0], 
    mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].edges[7]), line=
    mdb.models['Model-Full-Half-Thickness'].parts['SH115-m'].edges[87], sense=
    REVERSE)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.regenerate()
mdb.models['Model-Full-Half-Thickness'].rootAssembly.setMeshControls(algorithm=
    MEDIAL_AXIS, regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#55 ]', ), ), size=0.00018)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#100 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#100 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeByBias(biasMethod=
    SINGLE, constraint=FINER, end1Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#400000 ]', ), ), end2Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#0:2 #80 ]', ), ), maxSize=0.0002, minSize=0.00015)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeByBias(biasMethod=
    SINGLE, constraint=FINER, end1Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#0:2 #10 ]', ), ), end2Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#200 ]', ), ), maxSize=0.0002, minSize=0.00015)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#f03c055 ]', ), ), size=0.00015)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#f03c055 ]', ), ), size=0.00012)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#101 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#101 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.setMeshControls(
    allowMapped=False, regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#101 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#100 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.setMeshControls(
    minTransition=OFF, regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#103 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#f03c055 ]', ), ), size=0.0001)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#500a00 #0 #80290 ]', ), ), size=0.0002)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#8c3100 #0 #160c40 ]', ), ), size=0.00015)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#101 ]', ), ))
# Save by nguyenb5 on 2024_06_06-12.17.51; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'L23-0203', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '140 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT AT EXACT, PREDEFINED TIME POINTS WAS REQUESTED IN THIS STEP. IN ORDER TO WRITE OUTPUT AT EXACT TIME POINTS SPECIFIED, Abaqus MIGHT USE TIME INCREMENTS SMALLER THAN THE MINIMUM TIME INCREMENT ALLOWED IN THE STEP. IN ADDITION, THE NUMBER OF INCREMENTS REQUIRED TO COMPLETE THE STEP WILL IN GENERAL INCREASE.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof 4 at 378 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof4.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof 5 at 378 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof5.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof 6 at 378 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof6.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\LocalUserData\\User-data\\nguyenb5\\CP1000 processed\\CP1000 SH115\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'L23-0203', 'handle': 4748, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 911.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16017.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 165.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Thu Jun  6 12:18:36 2024', 
    'jobName': 'Job-1'})
mdb.models['Model-Full-Half-Thickness'].steps['Step-1'].setValues(initialInc=
    1.0, maxInc=1.0)
# Save by nguyenb5 on 2024_06_06-12.19.18; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
# Save by nguyenb5 on 2024_06_06-12.20.58; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#1c8 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeByBias(biasMethod=
    SINGLE, constraint=FINER, end1Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#400000 ]', ), ), end2Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#0 #20000 #1200000 ]', ), ), maxSize=0.0002, minSize=0.0001)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeByBias(biasMethod=
    SINGLE, constraint=FINER, end1Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#0:2 #200 ]', ), ), end2Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#100000 ]', ), ), maxSize=0.0002, minSize=0.0001)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeByBias(biasMethod=
    SINGLE, constraint=FINER, end1Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#800 #0 #10 ]', ), ), end2Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#200 #0 #80000 ]', ), ), maxSize=0.0002, minSize=0.0001)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#f8ff155 #0 #160c40 #8 ]', ), ), size=0.0001)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeByNumber(
    constraint=FINER, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#0:2 #200000 #2 ]', ), ), number=4)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#0 #10000 #1000000 ]', ), ), size=0.002)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#88 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#0 #a0000 ]', ), ), size=0.002)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#40 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#101 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#101 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.setMeshControls(algorithm=
    MEDIAL_AXIS, regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#101 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#100 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.setMeshControls(algorithm=
    ADVANCING_FRONT, regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#100 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#100 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#100 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#100 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.setMeshControls(algorithm=
    MEDIAL_AXIS, minTransition=OFF, regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#100 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#100 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#1ca ]', ), ), seedConstraintOverride=ON)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#100 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.setMeshControls(algorithm=
    ADVANCING_FRONT, allowMapped=True, regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#100 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.setSweepPath(edge=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges[3]
    , region=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells[8]
    , sense=REVERSE)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#100 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#100 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#500000 #0 #280 ]', ), ), size=0.0002)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#100 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#a00 #0 #80010 ]', ), ), size=0.0002)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.setMeshControls(algorithm=
    ADVANCING_FRONT, regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#100 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#800000 #0 #40 ]', ), ), size=0.0002)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#100 #0 #100000 ]', ), ), size=0.0002)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#101 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#101 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#8c3100 #0 #160c40 ]', ), ), size=0.00015)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#100 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
# Save by nguyenb5 on 2024_06_06-14.01.11; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-Full-Half-Thickness'].boundaryConditions['top-surface-disp'].setValues(
    u2=0.0022)
# Save by nguyenb5 on 2024_06_06-14.06.19; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
# Save by nguyenb5 on 2024_06_06-14.08.10; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#163 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#fdffbff #0 #e21e4ed8 #c ]', ), ), size=0.0001)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'], 
    ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#103 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#f03c045 ]', ), ), size=8e-05)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'], 
    ))
# Save by nguyenb5 on 2024_06_06-19.27.10; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'L23-0203', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '254 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT AT EXACT, PREDEFINED TIME POINTS WAS REQUESTED IN THIS STEP. IN ORDER TO WRITE OUTPUT AT EXACT TIME POINTS SPECIFIED, Abaqus MIGHT USE TIME INCREMENTS SMALLER THAN THE MINIMUM TIME INCREMENT ALLOWED IN THE STEP. IN ADDITION, THE NUMBER OF INCREMENTS REQUIRED TO COMPLETE THE STEP WILL IN GENERAL INCREASE.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof 4 at 378 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof4.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof 5 at 378 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof5.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof 6 at 378 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof6.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\LocalUserData\\User-data\\nguyenb5\\CP1000 processed\\CP1000 SH115\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'L23-0203', 'handle': 9588, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 2142.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16017.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 358.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Thu Jun  6 19:27:51 2024', 
    'jobName': 'Job-1'})
# Save by nguyenb5 on 2024_06_06-20.01.43; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#100 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeByBias(biasMethod=
    SINGLE, constraint=FINER, end1Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#400000 ]', ), ), end2Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#0:2 #80 ]', ), ), maxSize=0.0002, minSize=0.0001)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeByBias(biasMethod=
    SINGLE, constraint=FINER, end1Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#0:2 #200 ]', ), ), end2Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#100000 ]', ), ), maxSize=0.0002, minSize=0.0001)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeByBias(biasMethod=
    SINGLE, constraint=FINER, end1Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#800 ]', ), ), end2Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#0:2 #80000 ]', ), ), maxSize=0.0002, minSize=0.0001)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeByBias(biasMethod=
    SINGLE, constraint=FINER, end1Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#0:2 #10 ]', ), ), end2Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#200 ]', ), ), maxSize=0.0002, minSize=0.0001)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#c8 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeByNumber(
    constraint=AS_IS, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#200000 #80a800 #800100 #1 ]', ), ), number=7)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'], 
    ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#143 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#f8ff155 #0 #160c40 #8 ]', ), ), size=0.0001)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.setMeshControls(
    minTransition=ON, regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#40 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#100 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#100 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.setMeshControls(algorithm=
    MEDIAL_AXIS, regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#100 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#100 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.setMeshControls(algorithm=
    ADVANCING_FRONT, allowMapped=False, regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#100 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.setSweepPath(edge=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges[3]
    , region=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells[8]
    , sense=FORWARD)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#100 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
# Save by nguyenb5 on 2024_06_07-14.30.04; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#103 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#f03c055 ]', ), ), size=8e-05)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#100 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
# Save by nguyenb5 on 2024_06_07-14.31.14; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
# Save by nguyenb5 on 2024_06_07-14.51.31; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#f03c000 ]', ), ), size=7e-05)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#103 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#55 ]', ), ), size=7e-05)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#100 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
# Save by nguyenb5 on 2024_06_08-13.55.34; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#100 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeByBias(biasMethod=
    SINGLE, constraint=FINER, end1Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#400000 ]', ), ), end2Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#0:2 #80 ]', ), ), maxSize=0.0003, minSize=0.0002)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeByBias(biasMethod=
    SINGLE, constraint=FINER, end1Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#800000 ]', ), ), end2Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#0:2 #40 ]', ), ), maxSize=0.0002, minSize=0.0001)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#100 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeByBias(biasMethod=
    SINGLE, constraint=FINER, end1Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#0:2 #10 ]', ), ), end2Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#200 ]', ), ), maxSize=0.0003, minSize=0.0002)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeByBias(biasMethod=
    SINGLE, constraint=FINER, end1Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#0:2 #100000 ]', ), ), end2Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#100 ]', ), ), maxSize=0.0002, minSize=0.0001)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#100 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeByBias(biasMethod=
    SINGLE, constraint=FINER, end1Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#400000 ]', ), ), end2Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#0:2 #80 ]', ), ), maxSize=0.0003, minSize=0.00015)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeByBias(biasMethod=
    SINGLE, constraint=FINER, end1Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#0:2 #10 ]', ), ), end2Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#200 ]', ), ), maxSize=0.0003, minSize=0.00015)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeByBias(biasMethod=
    SINGLE, constraint=FINER, end1Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#800000 ]', ), ), end2Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#0:2 #40 ]', ), ), maxSize=0.00015, minSize=8e-05)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#100 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeByBias(biasMethod=
    SINGLE, constraint=FINER, end1Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#0:2 #100000 ]', ), ), end2Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#100 ]', ), ), maxSize=0.00015, minSize=8e-05)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#50 ]', ), ), size=8e-05)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#100 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#5 ]', ), ), size=8e-05)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#100 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#2000 #0 #20000 ]', ), ), size=8e-05)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#100 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#40000 #0 #800 ]', ), ), size=8e-05)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#100 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#100 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeByBias(biasMethod=
    SINGLE, constraint=FINER, end1Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#400000 ]', ), ), end2Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#0:2 #80 ]', ), ), maxSize=0.0002, minSize=0.00015)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#100 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeByBias(biasMethod=
    SINGLE, constraint=FINER, end1Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#0:2 #10 ]', ), ), end2Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#200 ]', ), ), maxSize=0.0002, minSize=0.00015)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#103 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#55 ]', ), ), size=7e-05)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#100 ]', ), ))
# Save by nguyenb5 on 2024_06_08-14.04.42; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
# Save by nguyenb5 on 2024_06_08-14.05.16; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
# Save by nguyenb5 on 2024_06_08-14.05.46; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-Full-Half-Thickness'].steps['Step-1'].setValues(amplitude=
    STEP, initialInc=5.0, maxInc=5.0)
# Save by nguyenb5 on 2024_06_08-14.06.34; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-Full-Half-Thickness'].rootAssembly.setElementType(elemTypes=(
    ElemType(elemCode=C3D8, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6, elemLibrary=STANDARD), 
    ElemType(elemCode=C3D4, elemLibrary=STANDARD)), regions=(
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#1ff ]', ), ), ))
# Save by nguyenb5 on 2024_06_08-14.08.22; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#103 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#f03c055 ]', ), ), size=0.0008)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#f03c055 ]', ), ), size=8e-05)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'], 
    ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#101 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#400200 #0 #90 ]', ), ), size=0.0001)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'], 
    ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#100 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeByBias(biasMethod=
    SINGLE, constraint=FINER, end1Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#400000 ]', ), ), end2Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#0:2 #80 ]', ), ), maxSize=0.0002, minSize=0.0001)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'], 
    ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeByBias(biasMethod=
    SINGLE, constraint=FINER, end1Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#0:2 #10 ]', ), ), end2Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#200 ]', ), ), maxSize=0.0002, minSize=0.0001)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'], 
    ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#103 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#f03c055 ]', ), ), size=0.0001)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'], 
    ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#103 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#f03c055 ]', ), ), size=9e-05)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'], 
    ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#103 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#f03c055 ]', ), ), size=0.0001)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeByBias(biasMethod=
    SINGLE, constraint=FINER, end1Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#800000 #0 #100000 ]', ), ), end2Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#100 #0 #40 ]', ), ), maxSize=0.00015, minSize=1e-05)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'], 
    ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#100 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeByBias(biasMethod=
    SINGLE, constraint=FINER, end1Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#800000 ]', ), ), end2Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#0:2 #40 ]', ), ), maxSize=0.00015, minSize=0.0001)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeByBias(biasMethod=
    SINGLE, constraint=FINER, end1Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#0:2 #100000 ]', ), ), end2Edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#100 ]', ), ), maxSize=0.00015, minSize=0.0001)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'], 
    ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#101 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#c3000 #0 #60c00 ]', ), ), size=0.0001)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'], 
    ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#100 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#400000 #0 #80 ]', ), ), size=0.0001)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'], 
    ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].cells.getSequenceFromMask(
    ('[#101 ]', ), ))
mdb.models['Model-Full-Half-Thickness'].rootAssembly.seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'].edges.getSequenceFromMask(
    ('[#d81b00 #0 #1c06d0 ]', ), ), size=0.0001)
mdb.models['Model-Full-Half-Thickness'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-Full-Half-Thickness'].rootAssembly.instances['SH115-m-1'], 
    ))
# Save by nguyenb5 on 2024_06_08-16.15.52; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
# Save by nguyenb5 on 2024_06_08-16.16.25; build 2023.HF4 2023_07_21-20.45.57 RELr425 183702
